import React, {Component} from 'react'
import PropTypes from 'prop-types'
import {Row, Col} from 'layout/export'
import ColorPicker from '../colorPicker'
import {FormGroup, LabelGroup, ReactSelect, Label} from 'formElements/export'
import BranderRange from '../common/range/BranderRange'
import {inputStates, statuses} from '../data'
import './inputBrander.scss'

class InputBrander extends Component {
    constructor(props) {
        super(props)

        this.state = {
            status: '',
            elementState: '',
        }
    }

    render() {
        const {styles} = this.props
        const {status, elementState} = this.state

        return (
            <Row xs={{justifyContent: 'center'}}>
                <Col sm={12}>
                    <FormGroup size="sm" >
                        <LabelGroup label="Border Radius" standaloneLabel >
                            <BranderRange
                                id="inputBorderRadius"
                                CSSProperty="--inputBorderRadius"
                                styles={styles}
                                min={0}
                                max={30}
                            />
                        </LabelGroup>
                    </FormGroup>
                </Col>
                <Col sm={6} style={{marginRight: 'auto'}}>
                    <FormGroup size="sm">
                        <Label>Status</Label>
                        <ReactSelect
                            size="sm"
                            options={statuses}
                            onChange={status => this.setState({status})}
                            value={this.state.status}
                            placeholder="Select One..."
                        />
                    </FormGroup>
                </Col>
                {status &&
                    <Col sm={6}>
                        <ColorPicker
                            customProperty={`--input${status}`}
                            label="Border & Feedback"
                            className={`input-brander-${status.toLowerCase()}`}
                            color={String(styles.getPropertyValue(`--input${status}`)).trim()}
                        />
                    </Col>
                }
                <Col sm={12}>
                    <FormGroup size="sm">
                        <Label>State</Label>
                        <ReactSelect
                            size="sm"
                            options={inputStates}
                            onChange={elementState => this.setState({elementState})}
                            value={this.state.elementState}
                        />
                    </FormGroup>
                </Col>
                <Col sm={12}>
                    <Row>
                        {['', 'Focus', 'Disabled'].includes(elementState) &&
                            <Col sm={12}>
                                <ColorPicker
                                    customProperty={`--input${elementState}Background`}
                                    label="Background"
                                    className={`input-brander${elementState ? `-${elementState.toLowerCase()}-` : '-'}background`}
                                    color={String(styles.getPropertyValue(`--input${elementState}Background`)).trim()}
                                    isCSSProperty
                                />
                            </Col>
                        }
                        {['', 'Disabled'].includes(elementState) &&
                            <Col sm={6}>
                                <ColorPicker
                                    customProperty={`--input${elementState}Text`}
                                    label="Text"
                                    className={`input-brander${elementState ? `-${elementState.toLowerCase()}-` : '-'}text`}
                                    color={String(styles.getPropertyValue(`--input${elementState}Text`)).trim()}
                                />
                            </Col>
                        }
                        <Col sm={6}>
                            <ColorPicker
                                customProperty={`--input${elementState}Border`}
                                label="Border Color"
                                className={`input-brander${elementState ? `-${elementState.toLowerCase()}-` : '-'}border`}
                                color={String(styles.getPropertyValue(`--input${elementState}Border`)).trim()}
                            />
                        </Col>
                        {['', 'Disabled'].includes(elementState) &&
                            <Col sm={6}>
                                <ColorPicker
                                    customProperty={`--input${elementState}Placeholder`}
                                    label="Placeholder"
                                    className={`input-brander${elementState ? `-${elementState.toLowerCase()}-` : '-'}placeholder`}
                                    color={String(styles.getPropertyValue(`--input${elementState}Placeholder`)).trim()}
                                />
                            </Col>
                        }
                        {['', 'Disabled'].includes(elementState) &&
                            <Col sm={6}>
                                <ColorPicker
                                    customProperty={`--input${elementState}Label`}
                                    label="Label"
                                    className={`input-brander${elementState ? `-${elementState.toLowerCase()}-` : '-'}label`}
                                    color={String(styles.getPropertyValue(`--input${elementState}Label`)).trim()}
                                />
                            </Col>
                        }
                    </Row>
                </Col>
            </Row>
        )
    }
}

InputBrander.propTypes = {
    styles: PropTypes.object.isRequired,
}

export default InputBrander