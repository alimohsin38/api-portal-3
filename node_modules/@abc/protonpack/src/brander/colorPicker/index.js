import React from 'react'
import PropTypes from 'prop-types'
import {ChromePicker, CustomPicker} from 'react-color'
import {FormGroup, LabelGroup, Label, Input, Textarea} from 'formElements/export'
import './colorPicker.scss'

class ColorPicker extends React.Component {
    constructor(props) {
        super(props)

        this.state = {
            displayColorPicker: false,
            selectedType: 'color',
        }

        this.handleClick = this.handleClick.bind(this)
        this.handleClose = this.handleClose.bind(this)
        this.handleColorChange = this.handleColorChange.bind(this)
        this.handleCSSChange = this.handleCSSChange.bind(this)
    }

    getRGBAString(rgba) {
        return `rgba(${rgba.r}, ${rgba.g}, ${rgba.b}, ${rgba.a})`
    }

    handleClick() {
        this.setState({displayColorPicker: !this.state.displayColorPicker})
    }

    handleClose() {
        this.setState({displayColorPicker: false})
    }

    handleColorChange(color) {
        const colorValue = this.props.showAlpha ? this.getRGBAString(color.rgb) : color.hex

        document.documentElement.style.setProperty(this.props.customProperty, colorValue)
        this.props.onChange(colorValue)
    }

    handleCSSChange(e) {
        document.documentElement.style.setProperty(this.props.customProperty, e.target.value)
    }

    render() {
        // eslint-disable-next-line no-unused-vars
        const {label, className, hex, rgb, showAlpha, customProperty} = this.props
        const color = showAlpha ? rgb : hex
        const displayColor = showAlpha ? this.getRGBAString(rgb) : hex

        return (
            <div>
                <FormGroup size="sm" className={`color-picker-value-container ${className}`}>
                    <LabelGroup label={label} standaloneLabel >
                        {(this.state.selectedType === 'color') ?
                            <Input
                                type="text"
                                size="sm"
                                onClick={this.handleClick}
                                readOnly
                                value={displayColor}
                            />
                            :
                            <Textarea
                                placeholder={`Any valid CSS for the ${label} property...`}
                                onBlur={this.handleCSSChange}
                            />
                        }
                    </LabelGroup>
                </FormGroup>
                {this.state.displayColorPicker &&
                    <div style={{position: 'absolute', zIndex: '2', marginTop: '-.3125rem'}}>
                        <div
                            style={{position: 'fixed', top: '0px', right: '0px', bottom: '0px', left: '0px'}}
                            onClick={this.handleClose}
                        />
                        <ChromePicker
                            color={color}
                            onChange={this.handleColorChange}
                            disableAlpha={!showAlpha}
                        />
                    </div>
                }
                {this.props.isCSSProperty &&
                    <div className="form-check">
                        <div style={{display: 'flex', marginTop: '5px'}}>
                            <div style={{marginRight: '10px'}}>
                                <Input
                                    name="inputType"
                                    type="radio"
                                    value="color"
                                    id="color"
                                    defaultChecked
                                    onClick={() => this.setState({selectedType: 'color'})}
                                />
                                <Label htmlFor="color" radio>Color</Label>
                            </div>
                            <div>
                                <Input
                                    name="inputType"
                                    type="radio"
                                    value="css"
                                    id="css"
                                    onClick={() => this.setState({selectedType: 'css'})}
                                />
                                <Label htmlFor="css" radio>CSS</Label>
                            </div>
                        </div>
                    </div>
                }
            </div>
        )
    }
}

ColorPicker.propTypes = {
    customProperty: PropTypes.string.isRequired,
    label: PropTypes.string.isRequired,
    className: PropTypes.string.isRequired,
    isCSSProperty: PropTypes.bool,
    showAlpha: PropTypes.bool,
    onChange: PropTypes.func,
    hex: PropTypes.string,
    rgb: PropTypes.object,
}

ColorPicker.defaultProps = {
    showAlpha: false,
}

export default CustomPicker(ColorPicker)