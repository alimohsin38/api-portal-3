import React, {Component} from 'react'
import PropTypes from 'prop-types'
import {Popover as ReactstrapPopover} from 'reactstrap'
import grid from 'styles/config/_grid.scss'

export default class Popover extends Component {
    constructor(props) {
        super(props)

        this.state = {
            placement: props.placement,
        }

        this.setCSSCustomProperties()

        this.handleMobileMediaQueryTrigger = this.handleMobileMediaQueryTrigger.bind(this)
    }

    componentDidMount() {
        this.mediaQuery = window.matchMedia(`(min-width: ${grid.gridBreakPointSM})`)
        this.setState({
            placement: this.mediaQuery.matches ? this.props.placement : 'bottom',
        })
        this.mediaQuery && this.mediaQuery.addListener(this.handleMobileMediaQueryTrigger)
    }

    componentWillUnmount() {
        this.mediaQuery && this.mediaQuery.removeListener(this.handleMobileMediaQueryTrigger)
        delete this.mediaQuery
    }

    componentWillReceiveProps(nextProps) {
        if (nextProps.width) {
            this.setCSSCustomProperties()
        }
        if (nextProps.placement !== undefined && nextProps.placement !== this.props.placement) {
            this.setState({
                placement: this.mediaQuery && this.mediaQuery.matches ? nextProps.placement : 'bottom',
            })
        }
    }

    handleMobileMediaQueryTrigger(mediaQuery) {
        this.setState({
            placement: mediaQuery.matches ? this.props.placement : 'bottom',
        })
    }

    setCSSCustomProperties() {
        const {width} = this.props
        document.documentElement.style.setProperty('--popoverWidth', width)
    }

    render() {
        return (
            <ReactstrapPopover
                {...this.props}
                placement={this.state.placement}
            />
        )
    }
}

Popover.propTypes = {
    ...Popover.propTypes,
    placement: PropTypes.string,
    width: PropTypes.string,
}
