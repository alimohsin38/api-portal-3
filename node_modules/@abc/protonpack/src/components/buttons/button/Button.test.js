import React from 'react'
import {shallow, mount} from 'enzyme'
import Button from './'

describe('Button', () => {
    describe('render a button', () => {
        const button = mount(
            <Button>xyz</Button>
        )

        const buttonElm = button.find('button')

        it('should be a button', () => {
            expect(buttonElm.matchesElement(<button>xyz</button>)).toBe(true)
        })

        it('should have the class .btn and .btn-default', () => {
            expect(buttonElm.hasClass('btn')).toBe(true)
            expect(buttonElm.hasClass('btn-default')).toBe(true)
        })

        it('should have type button by default', () => {
            expect(button.getDOMNode().getAttribute('type')).toBe('button')
        })
    })

    describe('render a disabled button', () => {
        const button = shallow(
            <Button disabled>xyz</Button>
        ) 

        const buttonElm = button.find('button')

        it('should be a button', () => {
            expect(buttonElm.matchesElement(<button>xyz</button>)).toBe(true)
        })

        it('should have the class .btn and .btn-secondary', () => {
            expect(buttonElm.hasClass('btn')).toBe(true)
            expect(buttonElm.hasClass('btn-default')).toBe(true)
        })

        it('should have the prop disabled', () => {
            expect(buttonElm.prop('disabled')).toBe(true)
        })
    })

    describe('render a primary button', () => {
        const button = shallow(
            <Button btnStyle="primary">xyz</Button>
        )

        const buttonElm = button.find('button')

        it('should be a button', () => {
            expect(buttonElm.matchesElement(<button>xyz</button>)).toBe(true)
        })

        it('should have the class .btn and .btn-primary', () => {
            expect(buttonElm.hasClass('btn')).toBe(true)
            expect(buttonElm.hasClass('btn-primary')).toBe(true)
        })
    })

    describe('render an outline button', () => {
        const button = shallow(
            <Button btnStyle="primary" outline>xyz</Button>
        )

        const buttonElm = button.find('button')

        it('should be a button', () => {
            expect(buttonElm.matchesElement(<button>xyz</button>)).toBe(true)
        })

        it('should have the class .btn', () => {
            expect(buttonElm.hasClass('btn')).toBe(true)
        })

        it('should have the classes btn--outline and btn--style_primary', () => {
            expect(buttonElm.hasClass('btn--outline')).toBe(true)
            expect(buttonElm.hasClass('btn--style_primary')).toBe(true)
        })
    })

    describe('render a large button', () => {
        const button = shallow(
            <Button btnStyle="primary" size="lg">xyz</Button>
        )

        const buttonElm = button.find('button')

        it('should be a button', () => {
            expect(buttonElm.matchesElement(<button>xyz</button>)).toBe(true)
        })

        it('should have the class .btn and .btn-primary', () => {
            expect(buttonElm.hasClass('btn')).toBe(true)
            expect(buttonElm.hasClass('btn-primary')).toBe(true)
        })

        it('should have the class .btn-lg', () => {
            expect(button.hasClass('btn-lg')).toBe(true)
        })
    })

    describe('render a button block', () => {
        const button = shallow(
            <Button block>xyz</Button>
        ) 

        const buttonElm = button.find('button')

        it('should be a button', () => {
            expect(buttonElm.matchesElement(<button>xyz</button>)).toBe(true)
        })

        it('should have the class .btn and .btn-default', () => {
            expect(buttonElm.hasClass('btn')).toBe(true)
            expect(buttonElm.hasClass('btn-default')).toBe(true)
        })

        it('should have the class .btn-block', () => {
            expect(buttonElm.hasClass('btn-block')).toBe(true)
        })
    })

    describe('render an active button', () => {
        const button = shallow(
            <Button active>xyz</Button>
        ) 

        const buttonElm = button.find('button')

        it('should be a button', () => {
            expect(buttonElm.matchesElement(<button>xyz</button>)).toBe(true)
        })

        it('should have the class .btn and .btn-default', () => {
            expect(buttonElm.hasClass('btn')).toBe(true)
            expect(buttonElm.hasClass('btn-default')).toBe(true)
        })

        it('shuld have the class .active', () => {
            expect(button.hasClass('active')).toBe(true)
        })
    })

    describe('render the button with custom classNames', () => {
        const button = shallow(
            <Button className="something someotherthing">xyz</Button>
        ) 

        const buttonElm = button.find('button')

        it('should be a button', () => {
            expect(buttonElm.matchesElement(<button>xyz</button>)).toBe(true)
        })

        it('should have the class .btn and .btn-default', () => {
            expect(buttonElm.hasClass('btn')).toBe(true)
            expect(buttonElm.hasClass('btn-default')).toBe(true)
        })

        it('shuld have the classes .something and .someotherthing', () => {
            expect(buttonElm.hasClass('something')).toBe(true)
            expect(buttonElm.hasClass('someotherthing')).toBe(true)
        })
    })
})