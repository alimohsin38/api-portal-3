import React from 'react'
import {mount} from 'enzyme'
import Card from './'

describe('Card', () => {
    describe('render a card with the correct classes', () => {
        const wrapper = mount(
            <Card>xyz</Card>
        )

        it('should be a div', () => {
            expect(wrapper.containsMatchingElement(<div>xyz</div>)).toBe(true)
        })

        it('should have the class .card', () => {
            expect(wrapper.hasClass('card')).toBe(true)
        })
        it('should not have the class .card--removePadding', () => {
            expect(wrapper.hasClass('card--removePadding')).toBe(false)
        })

        it('should have the data-abc-id of card', () => {
            expect(wrapper.find('.card').prop('data-abc-id')).toBe('card')
        })
    })

    describe('should allow data-abc-id to be overridden', () => {
        const wrapper = mount(
            <Card data-abc-id="The Black Lotus">xyz</Card>
        )
        
        it('should have the prop data-abc-id: The Black Lotus', () => {
            expect(wrapper.find('.card').prop('data-abc-id')).toBe('The Black Lotus')
        })
    })

    describe('should allow extra properties', () => {
        const wrapper = mount(
            <Card role="add3mana">xyz</Card>
        )
        
        it('should have the prop role: add3mana', () => {
            expect(wrapper.prop('role')).toBe('add3mana')
        })
    })

    describe('should allow classNames to be added', () => {
        const wrapper = mount(
            <Card className="one too tree">xyz</Card>
        )
        
        it('should have the class .card', () => {
            expect(wrapper.hasClass('card')).toBe(true)
        })

        it('should have the class .one', () => {
            expect(wrapper.hasClass('one')).toBe(true)
        })

        it('should have the class .too', () => {
            expect(wrapper.hasClass('too')).toBe(true)
        })

        it('should have the class .tree', () => {
            expect(wrapper.hasClass('tree')).toBe(true)
        })
    })

    describe('should add background color', () => {
        const wrapper = mount(
            <Card backgroundColor="lightGray">xyz</Card>
        )

        it('should have the class .card--backgroundColor_lightGray', () => {
            expect(wrapper.hasClass('card--backgroundColor_lightGray')).toBe(true)
        })
    })

    describe('should drop inner padding when removePadding is true', () => {
        const wrapper = mount(
            <Card backgroundColor="lightGray" removePadding>xyz</Card>
        )

        it('should not have the class .card--withPadding', () => {
            expect(wrapper.hasClass('card--withPadding')).toBe(false)
        })
    })
})