import React, {Component} from 'react'
import PropTypes from 'prop-types'
import IDangerousSwiper from 'react-id-swiper'
import pick from 'lodash/pick'

export default class Swiper extends Component {
    constructor(props) {
        super(props)

        this.setSwiperRef = this.setSwiperRef.bind(this)
    }

    componentWillReceiveProps(nextProps) {
        if (this._swiper && nextProps.activeIndex !== this.props.activeIndex) {
            this._swiper.swiper.slideTo(nextProps.activeIndex)
        }
    }

    setSwiperRef(swiper) {
        this._swiper = swiper
    }

    buildClasses() {
        const {className, ratio} = this.props
        const classes = ['swiper']

        if (ratio) {
            classes.push(`swiper--ratio_${ratio.split(':').join('-')}`)
        }

        if (className) {
            classes.push(className)
        }

        return classes.join(' ')
    }

    render() {
        // eslint-disable-next-line no-unused-vars
        const {children, ['data-abc-id']: dataAbcId, activeIndex, ...remain} = this.props
        const classes = this.buildClasses()
        const abcId = dataAbcId || 'swiper'
        const settings = {
            a11y: true,
            grabCursor: true,
            initialSlide: activeIndex,
            mousewheelControl: true,
            mousewheelForceToAxis: true,
            mousewheelReleaseOnEdges: true,
            ...pick(remain,Object.keys(SwiperExposedPropTypes)),
        }

        return (
            <div data-abc-id={abcId} className={classes}>
                <IDangerousSwiper ref={this.setSwiperRef} {...settings}>
                    {children}
                </IDangerousSwiper>
            </div>
        )
    }
}

const SwiperExposedPropTypes = {
    slidesPerView: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number,
    ]),
    centeredSlides: PropTypes.bool,
    spaceBetween: PropTypes.number,
    runCallbacksOnInit: PropTypes.bool,
    on: PropTypes.shape({
        init: PropTypes.func,
        beforeDestroy: PropTypes.func,
        slideChange: PropTypes.func,
        slideChangeTransitionStart: PropTypes.func,
        slideChangeTransitionEnd: PropTypes.func,
        slideNextTransitionStart: PropTypes.func,
        slideNextTransitionEnd: PropTypes.func,
        slidePrevTransitionStart: PropTypes.func,
        slidePrevTransitionEnd: PropTypes.func,
        transitionStart: PropTypes.func,
        onTransitionEnd: PropTypes.func,
        touchStart: PropTypes.func,
        touchMove: PropTypes.func,
        touchMoveOpposite: PropTypes.func,
        sliderMove: PropTypes.func,
        touchEnd: PropTypes.func,
        click: PropTypes.func,
        tap: PropTypes.func,
        doubleTap: PropTypes.func,
        imagesReady: PropTypes.func,
        progress: PropTypes.func,
        reachBeginning: PropTypes.func,
        reachEnd: PropTypes.func,
        fromEdge: PropTypes.func,
        setTranslate: PropTypes.func,
        setTransition: PropTypes.func,
        resize: PropTypes.func,
    }),
    onTransitionStart: PropTypes.func,
}

Swiper.propTypes = {
    className: PropTypes.string,
    children: PropTypes.node.isRequired,
    ratio: PropTypes.oneOf([
        '4:1',
        '3:1',
        '2:1',
        '16:9',
        '3:2',
        '4:3',
    ]),
    activeIndex: PropTypes.number,
    ...SwiperExposedPropTypes,
}

Swiper.defaultProps = {
    activeIndex: 0,
}
