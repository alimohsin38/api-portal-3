import React, {Component} from 'react'
import PropTypes from 'prop-types'
import classnames from 'classnames'
import makeClassnames from '../../utils/bem'
import FontSizeControls from './toolBarControls/fontSizeControls'
import InlineStyleControls from './toolBarControls/inlineStyleControls'
import BlockStyleControls from './toolBarControls/blockStyleControls'
import {Editor, EditorState, RichUtils, ContentState, convertFromRaw, convertToRaw} from 'draft-js'
import './editor.scss'

const blockStyleTypes = {
    UL: 'unordered-list-item',
    OL: 'ordered-list-item',
    INDENT: 'indent',
    OUTDENT: 'outdent',
    LEFT: 'left',
    RIGHT: 'right',
    CENTER: 'center',
    JUSTIFY: 'justify',
}

export default class RichEditor extends Component {
    constructor(props) {
        super(props)
        const editorState = this.renderIntialContent(this.props.content)

        this.state = {
            editorState,
            popoverOpen: false,
            focused: false,
        }

        this.handleFocus = this.handleFocus.bind(this)
        this.handleBlur = this.handleBlur.bind(this)
        this.onChange = this.onChange.bind(this)
        this.toggleBlockType = this.toggleBlockType.bind(this)
        this.toggleInlineStyle = this.toggleInlineStyle.bind(this)
        this.getBlockStyle = this.getBlockStyle.bind(this)
        this.togglePopover = this.togglePopover.bind(this)
        this.handleSelect = this.handleSelect.bind(this)
    }

    get elementName() {
        return 'RichEditor'
    }

    buildClasses() {
        const {size, weight} = this.props
        const classes = classnames(this.elementName, makeClassnames({
            block: this.elementName,
            element: 'font',
            modifiers: {
                element: {
                    size,
                    weight,
                },
            },
        }))

        return classes
    }

    renderIntialContent(content) {
        let editorState = EditorState.createEmpty()

        if (content) {
            const initialContent = content.indexOf('{"blocks"') >= 0
                ? convertFromRaw(JSON.parse(content))
                : ContentState.createFromText(content)
            editorState = EditorState.createWithContent(initialContent)
        }

        return editorState
    }

    handleFocus() {
        const {onFocus} = this.props

        this.setState({focused: true})
        onFocus && onFocus()
    }

    handleBlur() {
        const {onBlur} = this.props

        this.setState({focused: false})
        onBlur && onBlur()
    }

    onChange(editorState) {
        const {onChange} = this.props

        this.setState({editorState})
        onChange && onChange(convertToRaw(editorState.getCurrentContent()))
    }

    togglePopover() {
        this.setState({popoverOpen: !this.state.popoverOpen})
    }

    handleSelect(value) {
        this.toggleInlineStyle(value)
        this.togglePopover(value)
    }

    toggleBlockType(blockType) {
        this.onChange(
            RichUtils.toggleBlockType(
                this.state.editorState,
                blockType
            )
        )
    }

    toggleInlineStyle(inlineStyle) {
        this.onChange(
            RichUtils.toggleInlineStyle(
                this.state.editorState,
                inlineStyle
            )
        )
    }

    getBlockStyle(block) {
        let align
        const blockType = block.getType()

        switch (blockType) {
            case blockStyleTypes.LEFT:
            case blockStyleTypes.RIGHT:
            case blockStyleTypes.CENTER:
            case blockStyleTypes.JUSTIFY:
                align = blockType
                break
        }

        return classnames(makeClassnames({
            block: this.elementName,
            element: 'block',
            modifiers: {
                element: {
                    align,
                    [blockType]: true,
                },
            },
        }))
    }

    render() {
        const {
            editorState,
            focused,
            popoverOpen,
        } = this.state

        const {
            placeholder,
            readOnly,
            className,
            height,
            width,
            ['data-abc-id']: dataAbcId,
        } = this.props

        const placeholderText = placeholder || 'Edit content here...'
        const abcId = dataAbcId || 'rich-editor'
        const popOverId = `${abcId}-popOver`

        const containerClasses =  classnames(this.buildClasses(), className)

        const editorClasses = classnames(makeClassnames({
            block: this.elementName,
            element: 'editor',
            modifiers: {
                element: {
                    noBorder: readOnly,
                    focused,
                },
            },
        }))

        const toolBarClasses = classnames(makeClassnames({
            block: this.elementName,
            element: 'toolbar',
            modifiers: {
                element: {
                    hidden: readOnly,
                },
            },
        }))

        const editorInlineStyles = {}
        width && (editorInlineStyles.width = width)
        height && (editorInlineStyles.height = height)

        const blockTypesConfig = [
            {label: 'UL', iconType: 'list-heavy', style: blockStyleTypes.UL},
            {label: 'OL', iconType: 'list-numeric-heavy', style: blockStyleTypes.OL},
            {label: 'LI', iconType: 'indent-solid', style: blockStyleTypes.INDENT},
            {label: 'RI', iconType: 'outdent-solid', style: blockStyleTypes.OUTDENT},
        ]

        const alignmentConfig = [
            {label: 'AL', iconType: 'align-left-solid', style: blockStyleTypes.LEFT},
            {label: 'AR', iconType: 'align-right-solid', style: blockStyleTypes.RIGHT},
            {label: 'AC', iconType: 'align-center-solid', style: blockStyleTypes.CENTER},
            {label: 'AJ', iconType: 'align-justify-solid', style: blockStyleTypes.JUSTIFY},
        ]

        const styleMap = {
            'header-one': {
                fontSize: 32,
            },
            'header-two': {
                fontSize: 28,
            },
            'header-three': {
                fontSize: 24,
            },
            'header-four': {
                fontSize: 20,
            },
            'header-five': {
                fontSize: 16,
            },
            'header-six': {
                fontSize: 12,
            },
            default: {
                fontSize: 14,
            },
        }

        return (
            <div
                className={containerClasses}
                data-abc-id={abcId}
            >
                {!readOnly && <div className={toolBarClasses} style={{width}}>
                    <FontSizeControls
                        abcId={popOverId}
                        editorState={editorState}
                        isOpen={popoverOpen}
                        togglePopover={this.togglePopover}
                        onSelect={this.handleSelect}
                    />
                    <InlineStyleControls
                        editorState={editorState}
                        onToggle={this.toggleInlineStyle}
                    />
                    <BlockStyleControls
                        editorState={editorState}
                        onToggle={this.toggleBlockType}
                        blockTypesConfig={blockTypesConfig}
                    />
                    <BlockStyleControls
                        editorState={editorState}
                        onToggle={this.toggleBlockType}
                        blockTypesConfig={alignmentConfig}
                    />
                </div>}
                <div
                    className={editorClasses}
                    style={{...editorInlineStyles}}
                    onClick={this.handleFocus}
                    onBlur={this.handleBlur}
                >
                    <Editor
                        ref="editor"
                        editorState={editorState}
                        onChange={this.onChange}
                        blockStyleFn={this.getBlockStyle}
                        customStyleMap={styleMap}
                        placeholder={placeholderText}
                        spellCheck={true}
                        readOnly={readOnly}
                    />
                </div>
            </div>
        )
    }
}

RichEditor.defaultProps = {
    size: 'lg',
    weight: 'normal',
}

RichEditor.propTypes = {
    content: PropTypes.oneOfType([
        PropTypes.object,
        PropTypes.string,
    ]),
    placeholder: PropTypes.string,
    onChange: PropTypes.func,
    onFocus: PropTypes.func,
    onBlur: PropTypes.func,
    readOnly: PropTypes.bool,
    className: PropTypes.string,
    width: PropTypes.number,
    height: PropTypes.number,
    size: PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl', 'xxl']),
    weight: PropTypes.oneOf(['light', 'normal', 'medium', 'bold']),
}
