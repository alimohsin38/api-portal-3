import React from 'react'
import {render} from 'enzyme'
import RichEditor from './'

describe('RichEditor', () => {
    describe('render without any passed in properties except onChange', () => {
        const wrapper = render(<RichEditor onChange={() => console.log('something')}/>)  // eslint-disable-line no-console

        it('should have a \'RichEditor\' class', () => {
            expect(wrapper.find('.RichEditor').length).toBe(1)
        })

        it('should have a \'RichEditor__toolbar\' class', () => {
            expect(wrapper.find('.RichEditor__toolbar').length).toBe(1)
        })

        it('should have a place holder element', () => {
            expect(wrapper.find('.public-DraftEditorPlaceholder-inner').length).toBe(1)
        })

        it('should have place holder content equal to \'Edit content here...\'', () => {
            expect(wrapper.find('.public-DraftEditorPlaceholder-inner').toString()).toContain('Edit content here...')
        })

        it('should have a \'Bold\' option in the tool bar', () => {
            expect(wrapper.find('.icon-bold-solid').length).toBe(1)
        })

        it('should have a \'Italic\' option in the tool bar', () => {
            expect(wrapper.find('.icon-italic-solid').length).toBe(1)
        })

        it('should have a \'Underline\' option in the tool bar', () => {
            expect(wrapper.find('.icon-underline-solid').length).toBe(1)
        })
    }),
    describe('render with passed in props - placeholder', () => {
        const placeholder = 'randomvalue'
        const wrapper = render(
            <RichEditor
                onChange={() => console.log('something')} // eslint-disable-line no-console
                placeholder={placeholder}
            />
        )

        it('should have place holder content equal to passed in prop value', () => {
            expect(wrapper.find('.public-DraftEditorPlaceholder-inner').toString()).toContain(placeholder)
        })

        it('should have a \'font size\' option in the tool bar', () => {
            expect(wrapper.find('.icon-text-size-solid').length).toBe(1)
        })

        it('should have a \'left alignment\' option in the tool bar', () => {
            expect(wrapper.find('.icon-align-left-solid').length).toBe(1)
        })
    }),
    describe('render with passed in props - text content', () => {
        const placeholder = 'randomvalue'
        const content = 'Hello World'
        const wrapper = render(
            <RichEditor
                abcId='test-editor'
                content={content}
                onChange={() => console.log('something')} // eslint-disable-line no-console
                placeholder={placeholder}
                readOnly
            />
        )

        it('should be able to render with text content', () => {
            expect(wrapper.find('.RichEditor').length).toBe(1)
        })

        it('should have the editor content equal to passed in prop value', () => {
            expect(wrapper.find('.DraftEditor-editorContainer').toString()).toContain(content)
        })
    })
    describe('render with passed in properties - readOnly', () => {
        const placeholder = 'randomvalue'
        const data = '{"blocks":[{"key":"a7skh","text":"Hello","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}],"entityMap":{}}'
        const wrapper = render(
            <RichEditor
                abcId='test-editor'
                content={data}
                onChange={() => console.log('something')} // eslint-disable-line no-console
                placeholder={placeholder}
                readOnly
            />
        )

        it('should be able to render with raw content', () => {
            expect(wrapper.find('.RichEditor').length).toBe(1)
        })

        it('should have a \'RichEditor--editor-noBorder\' class', () => {
            expect(wrapper.find('.RichEditor__editor--noBorder').length).toBe(1)
        })

        it('should not have a \'RichEditor__toolbar\' class', () => {
            expect(wrapper.find('.RichEditor__toolbar').length).toBe(0)
        })

        it('should not have a \'Bold\' option in the tool bar', () => {
            expect(wrapper.find('.icon-bold-solid').length).toBe(0)
        })

        it('should have the editor content equal to passed in prop value', () => {
            expect(wrapper.find('.DraftEditor-editorContainer').toString()).toContain('Hello')
        })
    })
})
