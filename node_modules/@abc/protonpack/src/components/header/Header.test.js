import React from 'react'
import {mount} from 'enzyme'
import Container from '../layout/container'
import Header from './'

describe('Header', () => {
    describe('render a basic header', () => {
        const wrapper = mount(
            <Header>
                xyz
            </Header>
        )

        const wrapperElement = wrapper.find('header')

        it('should contain a <header />', () => {
            expect(wrapperElement.length).toBe(1)
        })

        it('should have the data-abc-id of header', () => {
            expect(wrapperElement.prop('data-abc-id')).toBe('header')
        })

        describe('child components are built correctly', () => {
            const headerChild = wrapperElement.childAt(0)

            it('should contain a child div', () => {
                expect(headerChild.type()).toBe('div')
            })

            it('should contain a Container', () => {
                expect(headerChild.find(Container).length).toBe(1)
            })
        })
    })

    describe('render a fixed header', () => {
        const wrapper = mount(
            <Header fixed>
                xyz
            </Header>
        )

        const wrapperElement = wrapper.find('header')

        it('should contain a <header />', () => {
            expect(wrapperElement.length).toBe(1)
        })

        it('should have a displace element with a displace class', () => {
            expect(wrapperElement.childAt(1).type()).toBe('div')
            expect(wrapperElement.childAt(1).hasClass('displace')).toBe(true)
        })

        describe('child components are built correctly', () => {
            const headerChild = wrapperElement.childAt(0)

            it('should contain a child div', () => {
                expect(headerChild.type()).toBe('div')
            })

            it('should have the class .header--isFixed', () => {
                expect(headerChild.hasClass('header--isFixed')).toBe(true)
            })

            it('should contain a Container', () => {
                expect(headerChild.find(Container).length).toBe(1)
            })
        })
    })

    describe('render a fluid header', () => {
        const wrapper = mount(
            <Header fluid>
                xyz
            </Header>
        )

        const wrapperElement = wrapper.find('header')

        it('should contain a <header />', () => {
            expect(wrapperElement.length).toBe(1)
        })

        describe('child components are built correctly', () => {
            const headerChild = wrapperElement.childAt(0)

            it('should contain a child div', () => {
                expect(headerChild.type()).toBe('div')
            })

            it('should contain a Container', () => {
                expect(headerChild.find(Container).length).toBe(1)
            })

            it('should have the class .fluid', () => {
                expect(headerChild.find(Container).hasClass('container-fluid')).toBe(true)
            })
        })
    })

    describe('render a fixed header', () => {
        const wrapper = mount(
            <Header className="xyz 123 abc">
                xyz
            </Header>
        )

        const wrapperElement = wrapper.find('header')

        it('should contain a <header />', () => {
            expect(wrapperElement.length).toBe(1)
        })

        it('should have the extra classes .xyz .123 .abc', () => {
            expect(wrapperElement.hasClass('xyz')).toBe(true)
            expect(wrapperElement.hasClass('123')).toBe(true)
            expect(wrapperElement.hasClass('abc')).toBe(true)
        })

        describe('child components are built correctly', () => {
            const headerChild = wrapperElement.childAt(0)

            it('should contain a child div', () => {
                expect(headerChild.type()).toBe('div')
            })

            it('should contain a Container', () => {
                expect(headerChild.find(Container).length).toBe(1)
            })
        })
    })

    describe('render a fixed fluid header', () => {
        const wrapper = mount(
            <Header fixed fluid>
                xyz
            </Header>
        )

        const wrapperElement = wrapper.find('header')

        it('should contain a <header />', () => {
            expect(wrapperElement.length).toBe(1)
        })

        it('should have a displace element with a displace class', () => {
            expect(wrapperElement.childAt(1).type()).toBe('div')
            expect(wrapperElement.childAt(1).hasClass('displace')).toBe(true)
        })

        describe('child components are built correctly', () => {
            const headerChild = wrapperElement.childAt(0)

            it('should contain a child div', () => {
                expect(headerChild.type()).toBe('div')
            })

            it('should have the class .header--isFixed', () => {
                expect(headerChild.hasClass('header--isFixed')).toBe(true)
            })

            it('should contain a Container', () => {
                expect(headerChild.find(Container).length).toBe(1)
            })

            it('should have the class .fluid', () => {
                expect(headerChild.find(Container).hasClass('container-fluid')).toBe(true)
            })
        })
    })

    describe('render a fixed fluid header with classes', () => {
        const wrapper = mount(
            <Header fixed fluid className="xyz 123 abc">
                xyz
            </Header>
        )

        const wrapperElement = wrapper.find('header')

        it('should contain a <header />', () => {
            expect(wrapperElement.length).toBe(1)
        })

        it('should have a displace element with a displace class', () => {
            expect(wrapperElement.childAt(1).type()).toBe('div')
            expect(wrapperElement.childAt(1).hasClass('displace')).toBe(true)
        })

        it('should have the extra classes .xyz .123 .abc', () => {
            expect(wrapperElement.hasClass('xyz')).toBe(true)
            expect(wrapperElement.hasClass('123')).toBe(true)
            expect(wrapperElement.hasClass('abc')).toBe(true)
        })

        describe('child components are built correctly', () => {
            const headerChild = wrapperElement.childAt(0)

            it('should contain a child div', () => {
                expect(headerChild.type()).toBe('div')
            })

            it('should have the class .header--isFixed', () => {
                expect(headerChild.hasClass('header--isFixed')).toBe(true)
            })

            it('should contain a Container', () => {
                expect(headerChild.find(Container).length).toBe(1)
            })

            it('should have the class .fluid', () => {
                expect(headerChild.find(Container).hasClass('container-fluid')).toBe(true)
            })
        })
    })
})