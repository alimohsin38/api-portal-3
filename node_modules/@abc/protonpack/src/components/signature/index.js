import React, {Component} from 'react'
import PropTypes from 'prop-types'
import classnames from 'classnames'
import ReactSignaturePadWrapper from 'react-signature-canvas'
import {Indicator} from '../../export'

export default class SignaturePad extends Component {
    constructor(props) {
        super(props)

        this.state = {
            showLabel: true,
        }

        this.handleBegin = this.handleBegin.bind(this)
    }

    handleBegin() {
        this.setState({showLabel: false})

        this.props.onValidationFieldSuccess && this.props.onValidationFieldSuccess()
    }

    isEmpty() {
        return !this.signaturePad || this.signaturePad.isEmpty()
    }

    clear() {
        const {continuousValidation, onClear} = this.props
        this.setState({showLabel: true})

        this.signaturePad.clear()
        onClear && onClear()
        continuousValidation && this.validate()
    }

    validate() {
        const {onValidationFieldFailure} = this.props
        const isValid = !this.isEmpty()

        if (!isValid) {
            onValidationFieldFailure && onValidationFieldFailure(this.props.validationMessage)
        }

        return isValid
    }

    fromDataURL(data) {
        this.signaturePad.fromDataURL(data)
        if (!this.isEmpty()) {
            this.setState({showLabel: false})
        }
    }

    toDataURL() {
        return this.signaturePad.getCanvas().toDataURL()
    }

    render() {
        const {showLabel} = this.state
        const {className, statusMessage, continuousValidation, width, height, ...remain} = this.props // eslint-disable-line no-unused-vars
        const status = statusMessage && statusMessage.status

        const containerClasses = classnames(
            'signaturePad',
            {[`form-control-${status}`]: status},
            className
        )

        const labelClasses = classnames('signaturePad--label', {'signaturePad--label-hide': !showLabel})
        const clearClasses = classnames('signaturePad--clear', {'signaturePad--clear-hide': showLabel})

        const borderWidth = 2
        const containerInlineStyles = {}

        width && (containerInlineStyles.width = width)
        height && (containerInlineStyles.height = height + borderWidth)

        return (
            <div
                className={containerClasses}
                data-abc-id='signature-pad'
                style={{...containerInlineStyles}}
            >
                <span className={labelClasses}>Sign Here</span>
                <Indicator
                    className={clearClasses}
                    type='close'
                    onClick={() => this.clear()}
                />

                <ReactSignaturePadWrapper
                    canvasProps={{width, height}}
                    ref={ref => this.signaturePad = ref}
                    onBegin={this.handleBegin}
                    {...remain}
                />
            </div>
        )
    }
}


SignaturePad.defaultProps = {
    validationMessage: 'Please enter a signature',
}


SignaturePad.propTypes = {
    options: PropTypes.object,
    continuousValidation: PropTypes.bool,
    statusMessage: PropTypes.object,
    validationMessage: PropTypes.string,
    onValidationFieldSuccess: PropTypes.func,
    onValidationFieldFailure: PropTypes.func,
    onClear: PropTypes.func,
    className: PropTypes.string,
    width: PropTypes.number,
    height: PropTypes.number,
}