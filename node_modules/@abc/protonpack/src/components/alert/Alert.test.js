import React from 'react'
import {shallow} from 'enzyme'
import Alert from './'
import Icon from '@abc/quarkicons'

describe('Alert', () => {
    describe('defaults', () => {
        const alert = shallow(
            <Alert isOpen={true}>
                <span id="test">Hi</span>
            </Alert>
        )

        it('should have type of danger', () => {
            expect(alert.hasClass('alert-danger')).toBe(true)
        })

        it('should render children it receives', () => {
            expect(alert.is('div')).toBe(true)
            expect(alert.contains(<span id="test">Hi</span>)).toBe(true)
        })

        it('should have the prop data-abc-id equal to "alert"', () => {
            expect(alert.prop('data-abc-id')).toEqual('alert')
        })
    })

    describe('onDismiss', () => {
        const emptyState = {message: '', type: ''}

        const alert = shallow(
            <Alert isOpen={true} onDismiss={() => emptyState}>
                <span id="test">Hi</span>
            </Alert>
        )

        it('should have a close button when given onDismiss prop', () => {
            expect(alert.containsMatchingElement(<Icon type="x-sm"/>)).toBe(true)
        })
    })

    describe('types', () => {
        const dangerAlert = shallow(
            <Alert isOpen={true} type="danger">
                <span id="test">I'm a danger alert</span>
            </Alert>
        )
        const warningAlert = shallow(
            <Alert isOpen={true} type="warning">
                <span id="test">I'm a warning</span>
            </Alert>
        )
        const infoAlert = shallow(
            <Alert isOpen={true} type="info">
                <span id="test">I'm informative</span>
            </Alert>
        )
        const successAlert = shallow(
            <Alert isOpen={true} type="success">
                <span id="test">You were successful</span>
            </Alert>
        )

        it('dangerAlert should have class alert-danger', () => {
            expect(dangerAlert.hasClass('alert-danger')).toBe(true)
        })
        it('warningAlert should have class alert-warning', () => {
            expect(warningAlert.hasClass('alert-warning')).toBe(true)
        })
        it('infoAlert should have class alert-info', () => {
            expect(infoAlert.hasClass('alert-info')).toBe(true)
        })
        it('successAlert should have class alert-success', () => {
            expect(successAlert.hasClass('alert-success')).toBe(true)
        })
    })
})