import React from 'react'
import {mount} from 'enzyme'
import Pagination from './'


describe('Pagination', () => {
    describe('with minimum properties', () => {
        const clickHandler = () => {}

        const pagination = mount(
            <Pagination totalPages={3} currentPage={1} handleClick={clickHandler} />
        )

        it('should have class .pagination', () => {
            expect(pagination.hasClass('pagination')).toBe(true)
        })

        it('should have 5 children', () => {
            expect(pagination.children().length).toBe(5)
        })

        it('each child should have a page-item class', () => {
            pagination.children().forEach((child) => {
                expect(child.matchesElement(<li></li>))
                expect(child.hasClass('page-item')).toBe(true)
            })
        })

        it('each child should have a a link with the page-link class', () => {
            pagination.children().forEach((child) => {
                expect(child.find('a').hasClass('page-link')).toBe(true)
            })
        })

        it('should be active at page 1', () => {
            const child = pagination.children().at(1)
            expect(child.hasClass('active')).toBe(true)
            expect(child.text()).toBe('1')
        })

        it('should start with a Prev', () => {
            expect(pagination
                .children()
                .at(0)
                .text()
            ).toBe('Prev')
        })

        it('should end with a Next', () => {
            expect(pagination
                .children()
                .at(4)
                .text()
            ).toBe('Next')
        })

        it('the Prev button should be disabled', () => {
            expect(pagination
                .children()
                .at(0)
                .hasClass('disabled')
            ).toBe(true)
        })
    })

    describe('with extra properties', () => {
        const clickHandler = () => {}

        const pagination = mount(
            <Pagination totalPages={3}
                currentPage={1}
                handleClick={clickHandler}
                size="lg"
                justifyContent="center"
                className="some other classes"
            />
        )

        it('should still have a pagination class', () => {
            expect(pagination.hasClass('pagination')).toBe(true)
        })

        it('should have the large class', () => {
            expect(pagination.hasClass('pagination-lg')).toBe(true)
        })

        it('should have a justifyContent class', () => {
            expect(pagination.hasClass('justify-content-center')).toBe(true)
        })

        it('should have extra class names', () => {
            expect(pagination.hasClass('some')).toBe(true)
            expect(pagination.hasClass('other')).toBe(true)
            expect(pagination.hasClass('classes')).toBe(true)
        })
    })

    describe('click functionality checks', () => {
        let curPage = 1

        const clickHandler = (page) => {
            curPage = page
        }

        const pagination = mount(
            <Pagination totalPages={3} currentPage={curPage} handleClick={clickHandler} />
        )

        it('should be active at page 1', () => {
            const child = pagination.children().at(1)
            expect(child.hasClass('active')).toBe(true)
            expect(child.text()).toBe('1')
        })

        it('should change the active page when clicked', () => {
            pagination.children()
                .at(3)
                .find('.page-link')
                .simulate('click')
            pagination.setProps({currentPage: curPage})

            const child = pagination.children().at(3)
            expect(child.hasClass('active')).toBe(true)
            expect(child.text()).toBe('3')

            expect(pagination
                .children()
                .at(0)
                .hasClass('disabled')
            ).toBe(false)
            expect(pagination
                .children()
                .at(4)
                .hasClass('disabled')
            ).toBe(true)
        })
    })
})