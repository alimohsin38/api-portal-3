import React from 'react'
import {mount, shallow} from 'enzyme'
import Badge from './'
import Icon from '@abc/quarkicons'

describe('Badge', () => {
    describe('default configuration', () => {
        const wrapper = shallow(
            <Badge className='test' disabled alwaysShow><Icon type='x-heavy' /></Badge>
        )

        it('should be a div with the classes indicated', () => {
            expect(wrapper.type()).toBe('div')
            expect(wrapper.hasClass('badge')).toBe(true)
            expect(wrapper.hasClass('badge--disabled')).toBe(true)
            expect(wrapper.hasClass('badge--alwaysShow')).toBe(true)
            expect(wrapper.hasClass('test')).toBe(true)
        })

        it('should have the default data-abc-id', () => {
            expect(wrapper.prop('data-abc-id')).toBe('badge')
        })

        it('should have <Icon type=\'x-heavy\'/> child', () => {
            expect(wrapper.containsMatchingElement(<Icon type='x-heavy' />)).toBe(true)
        })
    })

    describe('will handle content', () => {
        it('should handle string content', () => {
            const wrapper = mount(
                <Badge content="fake-content" />
            )
            expect(wrapper.getDOMNode().getAttribute('data-content')).toEqual('fake-content')
        })

        it('should handle numeric content', () => {
            const wrapper = mount(
                <Badge content={100} />
            )
            expect(wrapper.getDOMNode().getAttribute('data-content')).toEqual('100')
        })

        it('should display numeric content if it is a numeric string that can be parsed', () => {
            const wrapper = mount(
                <Badge content="0.001_numericString" alwaysShow/>
            )
            expect(wrapper.getDOMNode().getAttribute('data-content')).toEqual('0.001')
        })

        it('should not display content if it is numeric 0', () => {
            const wrapper = mount(
                <Badge content={0} />
            )
            expect(wrapper.getDOMNode().getAttribute('data-content')).toBeNull()
        })

        it('should not display content if it is string parsed to 0', () => {
            const wrapper = mount(
                <Badge content="0string" />
            )
            expect(wrapper.getDOMNode().getAttribute('data-content')).toBeNull()
        })

        it('should display content if it is numeric 0 and alwaysShow is true', () => {
            const wrapper = mount(
                <Badge content={0} alwaysShow/>
            )
            expect(wrapper.getDOMNode().getAttribute('data-content')).toEqual('0')
        })

        it('should display content if it is string parsed to 0 and alwaysShow is true', () => {
            const wrapper = mount(
                <Badge content="0_string" alwaysShow/>
            )
            expect(wrapper.getDOMNode().getAttribute('data-content')).toEqual('0')
        })
    })

    describe('will handle size prop', () => {
        const sizes = [
            'sm',
            'lg',
        ]

        sizes.forEach((size) => {
            const wrapper = shallow(
                <Badge size={size} />
            )
            it(`should have the class .badge--size_${size}`, () => {
                expect(wrapper.hasClass(`badge--size_${size}`)).toBe(true)
            })
        })
    })

    describe('will handle styleType prop', () => {
        const types = [
            'danger',
            'info',
            'primary',
            'secondary',
            'success',
            'warning',
        ]

        types.forEach((type) => {
            const wrapper = shallow(
                <Badge styleType={type} />
            )
            it(`should have the class .badge--style_${type}`, () => {
                expect(wrapper.hasClass(`badge--style_${type}`)).toBe(true)
            })
        })
    })

    describe('will handle position prop', () => {
        const positions = [
            'bottom',
            'bottom-left',
            'bottom-right',
            'center',
            'left',
            'right',
            'top',
            'top-left',
            'top-right',
        ]

        positions.forEach((position) => {
            const wrapper = shallow(
                <Badge position={position} />
            )
            it(`should have the class .badge--position_${position}`, () => {
                expect(wrapper.hasClass(`badge--position_${position}`)).toBe(true)
            })
        })
    })
})