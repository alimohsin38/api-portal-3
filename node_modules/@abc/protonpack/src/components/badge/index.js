import React, {Component} from 'react'
import PropTypes from 'prop-types'
import makeClassnames from '../../utils/bem'
import classnames from 'classnames'

export const positions = {
    BOTTOM: 'bottom',
    BOTTOM_LEFT: 'bottom-left',
    BOTTOM_RIGHT: 'bottom-right',
    CENTER: 'center',
    LEFT: 'left',
    RIGHT: 'right',
    TOP: 'top',
    TOP_LEFT: 'top-left',
    TOP_RIGHT: 'top-right',
}

export default class Badge extends Component {
    get elementName() {
        return 'badge'
    }

    buildClasses() {
        const {
            alwaysShow,
            block,
            disabled,
            position,
            size,
            styleType,
            ...remain
        } = this.props

        return {
            classes: {
                ...makeClassnames({
                    block,
                    element: this.elementName,
                    modifiers: {
                        element: {
                            alwaysShow,
                            size,
                            style: styleType,
                            position,
                            disabled,
                        },
                    },
                }),
            },
            ...remain,
        }
    }

    render() {
        const {classes, ...nonClassProps} = this.buildClasses()
        const {
            children,
            className,
            content,
            ['data-abc-id']: dataAbcId,
            ...remain
        } = nonClassProps

        const abcId = dataAbcId || 'badge'
        const numericContent = parseFloat(content)
        const parsedContent = isNaN(numericContent) ? content : numericContent
        const shownContent = this.props.alwaysShow || numericContent !== 0 ? parsedContent : undefined

        return (
            <div data-abc-id={abcId} className={classnames(classes, className)} {...remain} data-content={shownContent}>
                {React.Children.map(children, child => React.cloneElement(child, {block: this.elementName}))}
            </div>
        )
    }
}

Badge.propTypes = {
    alwaysShow: PropTypes.bool,
    block: PropTypes.string,
    content: PropTypes.oneOfType([
        PropTypes.number,
        PropTypes.string,
    ]),
    disabled: PropTypes.bool,
    size: PropTypes.oneOf([
        'sm',
        'lg',
    ]),
    styleType: PropTypes.oneOf([
        'danger',
        'info',
        'primary',
        'secondary',
        'success',
        'warning',
    ]),
    className: PropTypes.string,
    children: PropTypes.node,
    position: PropTypes.oneOf(Object.keys(positions).map(key => positions[key])),
}

Badge.defaultProps = {
    position: 'top-right',
    styleType: 'info',
}
