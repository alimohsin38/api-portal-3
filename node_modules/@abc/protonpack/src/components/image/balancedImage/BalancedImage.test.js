import React from 'react'
import {shallow} from 'enzyme'
import Icon from '@abc/quarkicons'
import BalancedImage from './'

describe('BalancedImage', () => {
    describe('default component', () => {
        const wrapper = shallow(
            <BalancedImage className="fake-className" src="" size="1em"/>
        )

        const imgElement = wrapper.childAt(0)

        it('should be an image', () => {
            expect(imgElement.type()).toBe('img')
        })

        it('should have the class .balanced-image', () => {
            expect(wrapper.hasClass('balanced-image')).toBe(true)
        })

        it('should have the passed className', () => {
            expect(wrapper.hasClass('fake-className')).toBe(true)
        })
    })

    describe('will handle props', () => {
        const wrapper = shallow(
            <BalancedImage className="fake-className" src="" size="1em" round hasBorder inheritColor/>
        )

        it('should have the class .balanced-image--hasBorder', () => {
            expect(wrapper.hasClass('balanced-image--hasBorder')).toBe(true)
        })

        it('should have the class .balanced-image--rounded', () => {
            expect(wrapper.hasClass('balanced-image--rounded')).toBe(true)
        })

        it('should have the class .balanced-image--color_inherit', () => {
            expect(wrapper.hasClass('balanced-image--color_inherit')).toBe(true)
        })
    })

    describe('will handle backgroundColor', () => {
        const wrapper = shallow(
            <BalancedImage src="" size="1em" backgroundColor="darkGray"/>
        )

        it('should have the class .balanced-image--backgroundColor_darkGray', () => {
            expect(wrapper.hasClass('balanced-image--backgroundColor_darkGray')).toBe(true)
        })
    })

    describe('will handle placeholders', () => {
        it('should use a url for placeholder', () => {
            const wrapper = shallow(
                <BalancedImage placeholder="//imgur.com/NaoylBj.png" src="" size="1em" />
            )
            const wrapperStyle = wrapper.prop('style')
            expect(wrapperStyle.backgroundImage).toBe('url(\'//imgur.com/NaoylBj.png\')')
        })

        it('should use a Node for placeholder', () => {
            const wrapper = shallow(
                <BalancedImage placeholder={<Icon type="plus" />} src="" size="1em" />
            )
            const wrapperChild = wrapper.childAt(0)
            expect(wrapperChild.matchesElement(<Icon type="plus" />)).toBe(true)
        })
    })

    describe('will image loading', () => {
        it('should use a url for placeholder', () => {
            const wrapper = shallow(
                <BalancedImage placeholder="//imgur.com/NaoylBj.png" src="" size="1em" />
            )
            const wrapperStyle = wrapper.prop('style')
            expect(wrapperStyle.backgroundImage).toBe('url(\'//imgur.com/NaoylBj.png\')')
        })

        it('should use a Node for placeholder', () => {
            const wrapper = shallow(
                <BalancedImage placeholder={<Icon type="plus" />} src="" size="1em" />
            )
            const wrapperChild = wrapper.childAt(0)
            expect(wrapperChild.matchesElement(<Icon type="plus" />)).toBe(true)
        })

        it('should resize with horizontal aspect on load', () => {
            const wrapper = shallow(
                <BalancedImage placeholder="//imgur.com/NaoylBj.png" src="fake-img-src" size="111px" />
            )
            wrapper.setState({imageLoaded: false, width: 'fake-width', height: 'fake-height'})
            wrapper.instance().handleImageLoad({target: {clientWidth: 500, clientHeight: 300}})
            expect(wrapper.state('imageLoaded')).toBe(true)
            expect(wrapper.state('width')).toBe(null)
            expect(wrapper.state('height')).toBe('111px')
        })

        it('should resize with vertical aspect on load', () => {
            const wrapper = shallow(
                <BalancedImage placeholder="//imgur.com/NaoylBj.png" src="fake-img-src" size="111px" />
            )
            wrapper.setState({imageLoaded: false, width: 'fake-width', height: 'fake-height'})
            wrapper.instance().handleImageLoad({target: {clientWidth: 300, clientHeight: 500}})
            expect(wrapper.state('imageLoaded')).toBe(true)
            expect(wrapper.state('width')).toBe('111px')
            expect(wrapper.state('height')).toBe(null)
        })

        it('should not resize on load without an image passed', () => {
            const wrapper = shallow(
                <BalancedImage placeholder="//imgur.com/NaoylBj.png" src="fake-img-src" size="111px" />
            )
            wrapper.setState({imageLoaded: true, width: 'fake-width', height: 'fake-height'})
            wrapper.instance().handleImageLoad({})
            expect(wrapper.state('imageLoaded')).toBe(false)
            expect(wrapper.state('width')).toBe(null)
            expect(wrapper.state('height')).toBe(null)
        })
    })
})
