import React, {Component} from 'react'
import PropTypes from 'prop-types'
import isString from 'lodash/isString'

export const colorList = ['darkGray']

export default class BalancedImage extends Component {
    constructor(props) {
        super(props)

        this.state = {
            imageLoaded: false,
            containerWidth: props.size,
            containerHeight: props.size,
        }
        this.handleImageLoad = this.handleImageLoad.bind(this)
    }

    handleImageLoad({target: img}) {
        let width = null
        let height = null
        let imageLoaded = true

        if (img && img.clientWidth && img.clientHeight) {
            if (img.clientWidth < img.clientHeight) {
                width = this.props.size
            } else {
                height = this.props.size
            }
        } else {
            imageLoaded = false
        }

        this.setState({
            imageLoaded,
            width,
            height,
        })
    }

    buildClasses(props) {
        const classes = ['balanced-image']

        if (props.round) {
            classes.push('balanced-image--rounded')
        }

        if (props.hasBorder) {
            classes.push('balanced-image--hasBorder')
        }

        if (props.inheritColor) {
            classes.push('balanced-image--color_inherit')
        }

        if (props.className) {
            classes.push(props.className)
        }

        if (props.backgroundColor) {
            classes.push(`balanced-image--backgroundColor_${props.backgroundColor}`)
        }

        return classes.join(' ').trim()
    }

    render() {
        // eslint-disable-next-line no-unused-vars
        const {style, className, src, size, placeholder, round, hasBorder, inheritColor, backgroundColor, alt, ...remain} = this.props
        const placeholderIsString = isString(placeholder)
        const showPlaceholder = (!this.state.imageLoaded || !src) && placeholder

        const backgroundImage =  showPlaceholder && placeholderIsString ? `url('${placeholder}')` : 'none'

        const containerStyle = {
            width: this.state.containerWidth,
            height: this.state.containerHeight,
            maxWidth: size,
            maxHeight: size,
            backgroundImage,
            ...style,
        }

        const imageStyle = {
            width: this.state.width,
            height: this.state.height,
            visibility: this.state.imageLoaded || this.state.width || this.state.height ? undefined : 'hidden',
        }

        const containerClassNames = this.buildClasses(this.props)

        return (
            <div
                className={containerClassNames}
                style={containerStyle}
                data-abc-id="balancedImage"
                {...remain}
            >
                {showPlaceholder && !placeholderIsString && placeholder}
                <img style={imageStyle} src={src} onLoad={this.handleImageLoad} alt={alt} />
            </div>
        )
    }
}

BalancedImage.propTypes = {
    hasBorder: PropTypes.bool,
    inheritColor: PropTypes.bool,
    src: PropTypes.string.isRequired,
    size: PropTypes.string.isRequired,
    style: PropTypes.object,
    className: PropTypes.string,
    placeholder: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.node,
    ]),
    round: PropTypes.bool,
    backgroundColor: PropTypes.oneOf(colorList),
    alt: PropTypes.string,
}

BalancedImage.defaultProps = {
    hasBorder: false,
    inheritColor: false,
}
