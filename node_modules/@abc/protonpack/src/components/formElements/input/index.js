import React, {Component} from 'react'
import PropTypes from 'prop-types'
import Icon from '@abc/quarkicons'
import classnames from 'classnames'

export default class Input extends Component {
    constructor(props) {
        super(props)

        this.state = {
            focused: false,
        }

        this.handleInputRef = this.handleInputRef.bind(this)
        this.handleInputFocus = this.handleInputFocus.bind(this)
        this.handleInputBlur = this.handleInputBlur.bind(this)
        this.handleIconGroupMouseDown = this.handleIconGroupMouseDown.bind(this)
    }

    componentDidMount() {
        this.input && this.props.autoFocus && this.input.focus()
    }

    componentDidUpdate(prevProps) {
        if (!this.props.value && prevProps.value && !this.state.focused) {
            this.props.onClear && this.props.onClear()
        }
    }

    buildClasses() {
        const {statusMessage, styleType, type, size, noBorder, className} = this.props
        const classes = []

        if (type === 'file') {
            classes.push('form-control-file')
        } else if (type === 'radio') {
            classes.push('form-check-input')
        } else {
            classes.push('form-control')
            if (styleType) {
                console.warn('The "styleType" property has been deprecated!')
            }
        }

        if (size) {
            classes.push(`form-control-${size}`)
        }

        if (statusMessage && statusMessage.status) {
            classes.push(`form-control-${statusMessage.status}`)
        }

        if (noBorder) {
            classes.push('noBorder-input')
        }

        if (className) {
            classes.push(className)
        }

        return classes.join(' ')
    }

    buildIconClasses() {
        const {icon: {position, className, onClick}, disabled, readOnly} = this.props
        const iconClasses = ['input-group-addon', 'input-group-icon', `icon-${position}`]

        if (className) {
            iconClasses.push(className)
        }
        if (onClick && !(disabled || readOnly)) {
            iconClasses.push('icon-click')
        }

        return iconClasses.join(' ')
    }

    handleInputRef(input) {
        if (input && input !== this.input) {
            this.input = input
            this.props.autoFocus && input.focus()
        }
    }

    handleInputFocus(e) {
        this.setState({focused: true})
        this.props.onFocus && this.props.onFocus(e)
    }

    handleInputBlur(e) {
        this.setState({focused: false})
        this.props.onBlur && this.props.onBlur(e)
    }

    handleIconGroupMouseDown(e) {
        e.preventDefault()
        if (!this.state.focused && !this.props.disabled) {
            this.setState({focused: true})
        }
    }

    renderIcon() {
        const {icon: {type, id, onClick}, disabled, readOnly} = this.props
        const onClickFunction = !(disabled || readOnly) && onClick

        return (
            <div className={this.buildIconClasses()}>
                <Icon type={type} id={id} onClick={onClickFunction} />
            </div>
        )
    }

    renderInputGroup(classes, abcId, remain) {
        const {icon: {position}, disabled, readOnly, inputGroupClassName} = this.props

        const inputGroupClasses = classnames(
            'input-group',
            {'input-group-focus': this.state.focused},
            {'input-group-disabled': disabled || readOnly},
            {noBorder: this.props.noBorder},
            inputGroupClassName,
        )

        return (
            <div
                className={inputGroupClasses}
                onMouseDown={this.handleIconGroupMouseDown}
            >
                {position === 'left' && this.renderIcon()}
                {this.renderInput(classes, abcId, remain)}
                {position === 'right' && this.renderIcon()}
            </div>
        )
    }

    renderInput(classes, abcId, remain) {
        return (
            <input
                className={classes}
                data-abc-id={abcId}
                ref={this.handleInputRef}
                onMouseDown={e => e.stopPropagation()}
                onFocus={this.handleInputFocus}
                onBlur={this.handleInputBlur}
                {...remain}
            />
        )
    }

    render() {
        const {
            statusMessage, // eslint-disable-line no-unused-vars
            styleType, // eslint-disable-line no-unused-vars
            size, // eslint-disable-line no-unused-vars
            className, // eslint-disable-line no-unused-vars
            inputGroupClassName, // eslint-disable-line no-unused-vars
            onFocus, // eslint-disable-line no-unused-vars
            onBlur, // eslint-disable-line no-unused-vars
            onClear, // eslint-disable-line no-unused-vars
            noBorder, // eslint-disable-line no-unused-vars
            ['data-abc-id']: dataAbcId,
            icon,
            ...formGroup
        } = this.props

        // eslint-disable-next-line no-unused-vars
        const {normalize, validate, onValidationFieldInitialized, onValidationFieldFailure, onValidationFieldSuccess, ...remain} = formGroup

        const classes = this.buildClasses()
        const abcId = dataAbcId || `${this.props.type}Input`

        return (icon && icon.type) ? this.renderInputGroup(classes, abcId, remain) : this.renderInput(classes, abcId, remain)
    }
}

Input.propTypes = {
    autoFocus: PropTypes.bool,
    value: PropTypes.string,
    className: PropTypes.string,
    inputGroupClassName: PropTypes.string,
    type: PropTypes.string.isRequired,
    statusMessage: PropTypes.object,
    size: PropTypes.string,
    styleType: PropTypes.string,
    disabled: PropTypes.bool,
    readOnly: PropTypes.bool,
    onFocus: PropTypes.func,
    onBlur: PropTypes.func,
    onClear: PropTypes.func,
    icon: PropTypes.shape({
        type: PropTypes.string.isRequired,
        position: PropTypes.oneOf(['left', 'right']).isRequired,
        className: PropTypes.string,
        id: PropTypes.string,
        onClick: PropTypes.func,
    }),
    noBorder: PropTypes.bool,
}