import React from 'react'
import {shallow, mount} from 'enzyme'
import Input from './'
import Icon from '@abc/quarkicons'

describe('Input', () => {
    describe('render a text input', () => {
        const input = shallow(
            <Input type="text" name="hubert" />
        )

        const inputElm = input.find('input')

        it('should be an input', () => {
            expect(inputElm.matchesElement(<input type="text" />)).toBe(true)
        })

        it('should have the class .form-control', () => {
            expect(inputElm.hasClass('form-control')).toBe(true)
        })

        it('should have the data-abc-id textInput', () => {
            expect(inputElm.prop('data-abc-id')).toBe('textInput')
        })

        it('should have the name hubert', () => {
            expect(inputElm.prop('name')).toBe('hubert')
        })
    })

    describe('render text input w/ placeholder', () => {
        const input = shallow(
            <Input type="text" name="hubert" placeholder="farnsworth" />
        )

        const inputElm = input.find('input')

        it('should be an input', () => {
            expect(inputElm.matchesElement(<input type="text" />)).toBe(true)
        })

        it('should have the class .form-control', () => {
            expect(inputElm.hasClass('form-control')).toBe(true)
        })

        it('should have the data-abc-id textInput', () => {
            expect(inputElm.prop('data-abc-id')).toBe('textInput')
        })

        it('should have the name hubert', () => {
            expect(inputElm.prop('name')).toBe('hubert')
        })

        it('should have the placeholder farnsworth', () => {
            expect(inputElm.prop('placeholder')).toBe('farnsworth')
        })
    })

    describe('render text input w/ noBorder', () => {
        const input = shallow(
            <Input type="text" name="hubert" placeholder="farnsworth" noBorder />
        )

        const inputElm = input.find('input')

        it('should have the class noBorder-input', () => {
            expect(inputElm.hasClass('noBorder-input')).toBe(true)
        })
    })

    describe('render a file input', () => {
        const input = shallow(
            <Input type="file" />
        )

        const inputElm = input.find('input')

        it('should be an input', () => {
            expect(inputElm.matchesElement(<input type="file" />)).toBe(true)
        })

        it('should have the class .form-control', () => {
            expect(inputElm.hasClass('form-control')).toBe(false)
        })

        it('should have the class .form-control-file', () => {
            expect(inputElm.hasClass('form-control-file')).toBe(true)
        })

        it('should have the data-abc-id fileInput', () => {
            expect(inputElm.prop('data-abc-id')).toBe('fileInput')
        })
    })


    describe('render a large input', () => {
        const input = shallow(
            <Input type="text" size="lg" />
        )

        const inputElm = input.find('input')

        it('should be an input', () => {
            expect(inputElm.matchesElement(<input type="text" />)).toBe(true)
        })

        it('should have the class .form-control', () => {
            expect(inputElm.hasClass('form-control')).toBe(true)
        })

        it('should have the class .form-control-lg', () => {
            expect(inputElm.hasClass('form-control-lg')).toBe(true)
        })

        it('should have the data-abc-id textInput', () => {
            expect(inputElm.prop('data-abc-id')).toBe('textInput')
        })
    })

    describe('render a text input with a StatusMessage', () => {
        const input = shallow(
            <Input type="text" statusMessage={{status:'danger',text:'ALL GLORY TO THE HYPNOTOAD'}} />
        )

        const inputElm = input.find('input')

        it('should be an input', () => {
            expect(inputElm.matchesElement(<input type="text" />)).toBe(true)
        })

        it('should have the class .form-control', () => {
            expect(inputElm.hasClass('form-control')).toBe(true)
        })

        it('should have the class .form-control-danger', () => {
            expect(inputElm.hasClass('form-control-danger')).toBe(true)
        })

        it('should have the data-abc-id textInput', () => {
            expect(inputElm.prop('data-abc-id')).toBe('textInput')
        })
    })

    describe('render with extra classNames', () => {
        const input = shallow(
            <Input type="text" className="123 xyz abc"/>
        )

        const inputElm = input.find('input')

        it('should be an input', () => {
            expect(inputElm.matchesElement(<input type="text" />)).toBe(true)
        })

        it('should have the class .form-control', () => {
            expect(inputElm.hasClass('form-control')).toBe(true)
        })

        it('should have the class .123', () => {
            expect(inputElm.hasClass('123')).toBe(true)
        })

        it('should have the class .xyz', () => {
            expect(inputElm.hasClass('xyz')).toBe(true)
        })

        it('should have the class .abc', () => {
            expect(inputElm.hasClass('abc')).toBe(true)
        })

        it('should have the data-abc-id textInput', () => {
            expect(inputElm.prop('data-abc-id')).toBe('textInput')
        })
    })

    describe('render with new data-abc-id', () => {
        const input = shallow(
            <Input type="text" data-abc-id="prettyNeat" />
        )

        it('should be have a data-abc-id of prettyNeat', () => {
            expect(input.prop('data-abc-id')).toBe('prettyNeat')
        })
    })

    describe('render with an icon', () => {
        const input = shallow(
            <Input
                type="text"
                icon={{type: 'eye', position: 'right', className: 'xyz'}}
                inputGroupClassName="test-input-group-class"
            />
        )

        const inputGroup = input.find('.input-group')
        it('should have an input group div', () => {
            expect(inputGroup.type()).toBe('div')
        })
        it('should have an input as the first child of the icon group', () => {
            expect(inputGroup.childAt(0).type()).toBe('input')
        })
        it('should add the inputGroupClassName to the input group', () => {
            expect(inputGroup.hasClass('test-input-group-class')).toBe(true)
        })

        const inputGroupIcon = inputGroup.childAt(1)
        it('should have an input group icon div as the second child of the icon group', () => {
            expect(inputGroupIcon.type()).toBe('div')
        })
        it('should have an icon in the input group icon with the icon-right class', () => {
            expect(inputGroupIcon.hasClass('icon-right')).toBe(true)
        })
        it('should have an icon in the input group icon', () => {
            expect(inputGroupIcon.childAt(0).type()).toBe(Icon)
        })
        it('should NOT have an icon in the input group icon with the icon-click class', () => {
            expect(inputGroupIcon.hasClass('icon-click')).toBe(false)
        })
    })

    describe('render with an icon on the left', () => {
        const input = shallow(
            <Input type="text" icon={{type: 'eye', position: 'left'}} />
        )

        const inputGroupIcon = input.find('.input-group-icon')

        it('should have an icon in the input group icon with the icon-left class', () => {
            expect(inputGroupIcon.hasClass('icon-left')).toBe(true)
        })
    })

    describe('render input group w/ noBorder', () => {
        const input = shallow(
            <Input type="text" icon={{type: 'eye', position: 'left'}} noBorder />
        )

        const inputElm = input.find('.input-group')

        it('should have the class noBorder', () => {
            expect(inputElm.hasClass('noBorder')).toBe(true)
        })
    })

    describe('render with an icon that reacts to focus/blur events', () => {
        const input = mount(
            <Input
                type="text"
                icon={{type: 'eye', position: 'right'}}
                onFocus={() => { /* do nothing */ }}
                onBlur={() => { /* do nothing */ }}
            />
        )

        const inputGroup = input.find('.input-group')
        const inputGroupInput = inputGroup.childAt(0)
        const inputGroupIcon = inputGroup.childAt(1)

        it('should add the class input-group-focus to input group on focus', () => {
            inputGroupInput.simulate('focus')
            expect(inputGroup.hasClass('input-group-focus')).toBe(true)
        })

        it('should remove the class input-group-focus from input group on blur', () => {
            inputGroupInput.simulate('blur')
            expect(inputGroup.hasClass('input-group-focus')).toBe(false)
        })

        it('should add the class input-group-focus to input group on icon mouse down', () => {
            inputGroupIcon.simulate('mouseDown')
            expect(inputGroup.hasClass('input-group-focus')).toBe(true)
        })
    })

    describe('render with an icon that has an onClick', () => {
        let clickCount = 0
        const handleClick = () => clickCount += 1

        const input = mount(
            <Input
                type="text"
                icon={{type: 'eye', position: 'right', onClick: handleClick}}
            />
        )

        const inputGroupIconContainer = input.find('.input-group-icon')
        const inputGroupIcon = inputGroupIconContainer.childAt(0)
        inputGroupIcon.simulate('click')

        it('should call prop onClick on icon click', () => {
            expect(clickCount).toBe(1)
        })

        it('should have the class icon-click when onClick method is provided', () => {
            expect(inputGroupIconContainer.hasClass('icon-click')).toBe(true)
        })
    })

    describe('render with a disabled icon when input is disabled', () => {
        let clickCount = 0
        const handleClick = () => clickCount += 1

        const disabledInput = mount(
            <Input type="text" icon={{type: 'eye', position: 'right', onClick: handleClick}} disabled />
        )

        const disabledInputGroup = disabledInput.find('.input-group')
        const disabledIconContainer = disabledInputGroup.childAt(1)
        const disabledIcon = disabledIconContainer.childAt(0)
        disabledIcon.simulate('click')

        it('input group should have the input group disabled class', () => {
            expect(disabledInputGroup.hasClass('input-group-disabled')).toBe(true)
        })
        it('should NOT call prop onClick on icon click', () => {
            expect(clickCount).toBe(0)
        })
        it('should NOT have the class icon-click when onClick method is provided', () => {
            expect(disabledIconContainer.hasClass('icon-click')).toBe(false)
        })
    })

    describe('render with a disabled icon when input is read only', () => {
        let clickCount = 0
        const handleClick = () => clickCount += 1

        const readOnlyInput = mount(
            <Input type="text" icon={{type: 'eye', position: 'right', onClick: handleClick}} readOnly />
        )

        const readOnlyInputGroup = readOnlyInput.find('.input-group')
        const readOnlyIconContainer = readOnlyInputGroup.childAt(1)
        const readOnlyIcon = readOnlyIconContainer.childAt(0)
        readOnlyIcon.simulate('click')

        it('input group should have the input group disabled class', () => {
            expect(readOnlyInputGroup.hasClass('input-group-disabled')).toBe(true)
        })
        it('Should NOT call prop onClick on icon click', () => {
            expect(clickCount).toBe(0)
        })
        it('should NOT have the class icon-click when onClick method is provided', () => {
            expect(readOnlyIconContainer.hasClass('icon-click')).toBe(false)
        })
    })
})