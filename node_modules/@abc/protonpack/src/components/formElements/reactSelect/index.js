import React, {Component} from 'react'
import PropTypes from 'prop-types'
import Select from 'react-select'
import {Input} from '../export'

export default class ReactSelect extends Component {
    constructor(props) {
        super(props)

        const option = props.options ? props.options.find(data => data.value === props.value) : null
        this.state = {
            options: props.options,
            selectedValue: props.value,
            editableLabel: (option && option.label) ? option.label : props.value,
        }

        this.updateSelectedValue = this.updateSelectedValue.bind(this)
        this.valueRenderer = this.valueRenderer.bind(this)

        this.updateSelectedValue(props.value)
    }

    componentWillReceiveProps(props) {
        this.setState({
            options: props.options,
        })

        this.updateSelectedValue(props.value)
    }

    buildClasses() {
        const {className, size, styleType} = this.props
        const classes = ['form-control']

        if (size) {
            classes.push(`Select--${size}`)
        }
        if (styleType) {
            console.warn('The "styleType" property has been deprecated!')
        }
        if (className) {
            classes.push(className)
        }

        return classes.join(' ')
    }

    updateSelectedValue(newValue, callback = null) {
        if (newValue === this.state.selectedValue) {
            return newValue
        }

        const option = this.state.options.find(data => data.value === newValue)
        if (!option && !this.props.multi) {
            this.setState({
                options: [
                    {label: newValue, value: newValue},
                    ...this.state.options,
                ],
            })
        }

        this.setState({
            selectedValue: newValue,
            editableLabel: (option && option.label) ? option.label : newValue,
        })

        callback && callback(newValue)

        return newValue
    }

    /**
     * Render editable input instead of span element on enabled editable property
     * @param {Object} option Selected value for rendering
     * @param {string} option.value option value for rendering
     * @param {string} option.label option label for rendering
     * @returns {Input}
     */
    // eslint-disable-next-line no-unused-vars
    valueRenderer(option) {
        const {onChange} = this.props

        return (
            <Input
                data-abc-id='editable-selected-value'
                type='text'
                noBorder
                value={this.state.editableLabel}
                onChange={event => this.setState({editableLabel: event.target.value})}
                onBlur={event => this.updateSelectedValue(event.target.value, onChange)}
            />
        )
    }

    render() {
        // eslint-disable-next-line no-unused-vars
        const {value, options, valueRenderer, onChange, onBlur, className, styleType, statusMessage, ['data-abc-id']: dataAbcId, creatable, editable, ...formGroup} = this.props
        const classes = this.buildClasses()
        const abcId = dataAbcId || 'react-select'
        const SelectComponent = creatable ? Select.Creatable : Select

        // eslint-disable-next-line no-unused-vars
        const {normalize, validate, onValidationFieldInitialized, onValidationFieldFailure, onValidationFieldSuccess, ...remain} = formGroup

        const editableProps = {
            ...((editable && !this.props.disabled) && {
                backspaceRemoves: false,
                deleteRemoves: false,
                clearable: false,
                multi: false,
                creatable: false,
                valueRenderer: this.valueRenderer,
            }),
        }

        return (
            <div data-abc-id={abcId}>
                <SelectComponent
                    className={classes}
                    value={this.state.selectedValue}
                    options={this.state.options}
                    onChange={newValue => this.updateSelectedValue(newValue, onChange)}
                    onBlur={() => onBlur && onBlur(this.state.selectedValue)}
                    {...editableProps}
                    {...remain}
                />
            </div>
        )
    }
}

ReactSelect.propTypes = {
    value: PropTypes.oneOfType([PropTypes.string, PropTypes.array, PropTypes.object]),
    onChange: PropTypes.func,
    onBlur: PropTypes.func,
    className: PropTypes.string,
    styleType: PropTypes.oneOf(['material']),
    multi: PropTypes.bool,
    simpleValue: PropTypes.bool,
    statusMessage: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),
    size: PropTypes.oneOf(['sm']),
    creatable: PropTypes.bool,
    editable: PropTypes.bool,
    disabled: PropTypes.bool,
    valueRenderer: PropTypes.func,
    clearable: PropTypes.bool,
    backspaceRemoves: PropTypes.bool,
    deleteRemoves: PropTypes.bool,
    options: PropTypes.arrayOf(PropTypes.shape({
        value: PropTypes.string,
        label: PropTypes.string,
    })),
}

ReactSelect.defaultProps = {
    multi: false,
    simpleValue: true,
    creatable: false,
    editable: false,
    clearable: false,
    backspaceRemoves: false,
    deleteRemoves: false,
}
