import React from 'react'
import {mount} from 'enzyme'
import sinon from 'sinon'
import ReactSelect from './'

describe('ReactSelect', () => {
    describe('render without any passed in properties', () => {
        const wrapper = mount(<ReactSelect />)

        it('should have the correct classes on the child element', () => {
            expect(wrapper.childAt(0).hasClass('Select')).toBe(true)
            expect(wrapper.childAt(0).hasClass('form-control')).toBe(true)
        })

        it('should have the default data-abc-id', () => {
            expect(wrapper.html().includes('<div data-abc-id="react-select">')).toBe(true)
        })
    })

    describe('should allow extra classes', () => {
        const wrapper = mount(<ReactSelect className="123 xyz abc" />)
        const selectElement = wrapper.childAt(0)

        it('should have the correct classes on the parent element', () => {
            expect(selectElement.hasClass('Select')).toBe(true)
            expect(selectElement.hasClass('form-control')).toBe(true)
        })

        it('should have the classes .123 .xyz .abc', () => {
            expect(selectElement.hasClass('123')).toBe(true)
            expect(selectElement.hasClass('xyz')).toBe(true)
            expect(selectElement.hasClass('abc')).toBe(true)
        })
    })

    describe('render with custom data-abc-id', () => {
        const wrapper = mount(<ReactSelect data-abc-id="test" />)

        it('should have the passed in data-abc-id', () => {
            expect(wrapper.prop('data-abc-id')).toBe('test')
        })
    })

    describe('should allow value to be changed', () => {
        const dummyData = [
            {value: 'professor', label: 'Professor Farnsworth'},
            {value: 'cubert', label: 'Cubert Farnsworth'},
            {value: 'philo', label: 'Philo Farnsworth'},
            {value: 'david', label: 'David Farnsworth'},
            {value: 'floyd', label: 'Floyd Farnsworth'},
            {value: 'ned', label: 'Ned Farnsworth'},
            {value: 'velma', label: 'Velma Farnsworth'},
            {value: 'fry', label: 'Phillip J. Fry'},
            {value: 'igner', label: 'Igner'},
        ]

        const value = 'fry'
        const handleOnChange = sinon.spy()
        const handleOnBlur = sinon.spy()

        const wrapper = mount(<ReactSelect value={value} onChange={handleOnChange} onBlur={handleOnBlur} options={dummyData} />)
        const wrapperInput = wrapper.find('.Select-input input')

        const valueLabel = wrapper.find('.Select-value-label')

        it('should have the default value of Phillip J. Fry', () => {
            expect(valueLabel.text()).toBe('Phillip J. Fry')
        })  

        it('should have handle onBlur', () => {
            wrapperInput.simulate('blur') 
            expect(handleOnBlur.called).toBe(true)
        })  

        it('should handle change', () => {
            wrapperInput.simulate('change') 
            wrapper.find('.Select-option')
                .first()
                .simulate('mouseEnter')
                .simulate('mouseDown')

            expect(handleOnChange.called).toBe(true)
        })
    })

    describe('should allow multi select', () => {
        const wrapper = mount(<ReactSelect multi />)

        it('should have the correct classes on the child element', () => {
            expect(wrapper.childAt(0).hasClass('Select')).toBe(true)
            expect(wrapper.childAt(0).hasClass('Select--multi')).toBe(true)
        })
    })
})