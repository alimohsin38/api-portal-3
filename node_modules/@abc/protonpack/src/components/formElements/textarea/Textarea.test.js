import React from 'react'
import {shallow} from 'enzyme'
import Textarea from './'

describe('Textarea', () => {
    describe('render a textarea', () => {
        const textarea = shallow(
            <Textarea />
        ) 

        const textareaElm = textarea.find('textarea')

        it('should be an textarea', () => {
            expect(textareaElm.matchesElement(<textarea></textarea>)).toBe(true)
        })

        it('should have the class .form-control', () => {
            expect(textareaElm.hasClass('form-control')).toBe(true)
        })

        it('should have the data-abc-id textarea', () => {
            expect(textareaElm.prop('data-abc-id')).toBe('textarea')
        })
    })

    describe('render textarea w/ placeholder', () => {
        const textarea = shallow(
            <Textarea placeholder="farnsworth" />
        ) 

        const textareaElm = textarea.find('textarea')

        it('should be an textarea', () => {
            expect(textareaElm.matchesElement(<textarea></textarea>)).toBe(true)
        })

        it('should have the class .form-control', () => {
            expect(textareaElm.hasClass('form-control')).toBe(true)
        })

        it('should have the data-abc-id textarea', () => {
            expect(textareaElm.prop('data-abc-id')).toBe('textarea')
        })

        it('should have the placeholder farnsworth', () => {
            expect(textareaElm.prop('placeholder')).toBe('farnsworth')
        })
    })

    describe('render a large textarea', () => {
        const textarea = shallow(
            <Textarea size="lg" />
        ) 

        const textareaElm = textarea.find('textarea')

        it('should be an textarea', () => {
            expect(textareaElm.matchesElement(<textarea></textarea>)).toBe(true)
        })

        it('should have the class .form-control', () => {
            expect(textareaElm.hasClass('form-control')).toBe(true)
        })

        it('should have the class .form-control-lg', () => {
            expect(textareaElm.hasClass('form-control-lg')).toBe(true)
        })

        it('should have the data-abc-id textarea', () => {
            expect(textareaElm.prop('data-abc-id')).toBe('textarea')
        })
    })

    describe('render a textarea with a StatusMessage', () => {
        const textarea = shallow(
            <Textarea statusMessage={{status:'danger',text:'ALL GLORY TO THE HYPNOTOAD'}} />
        ) 

        const textareaElm = textarea.find('textarea')

        it('should be an textarea', () => {
            expect(textareaElm.matchesElement(<textarea></textarea>)).toBe(true)
        })

        it('should have the class .form-control', () => {
            expect(textareaElm.hasClass('form-control')).toBe(true)
        })

        it('should have the data-abc-id textarea', () => {
            expect(textareaElm.prop('data-abc-id')).toBe('textarea')
        })

        it('should have the class .form-control-danger', () => {
            expect(textareaElm.hasClass('form-control-danger')).toBe(true)
        })
    })

    describe('render a textarea with extra classNames', () => {
        const textarea = shallow(
            <Textarea className="123 xyz abc" />
        )

        const textareaElm = textarea.find('textarea')

        it('should be an textarea', () => {
            expect(textareaElm.matchesElement(<textarea></textarea>)).toBe(true)
        })

        it('should have the class .form-control', () => {
            expect(textareaElm.hasClass('form-control')).toBe(true)
        })

        it('should have the data-abc-id textarea', () => {
            expect(textareaElm.prop('data-abc-id')).toBe('textarea')
        })

        it('should have the class .123', () => {
            expect(textareaElm.hasClass('123')).toBe(true)
        })

        it('should have the class .xyz', () => {
            expect(textareaElm.hasClass('xyz')).toBe(true)
        })

        it('should have the class .abc', () => {
            expect(textareaElm.hasClass('abc')).toBe(true)
        })
    })

    describe('render a textarea with new data-abc-id', () => {
        const textarea = shallow(
            <Textarea data-abc-id="prettyNeat" />
        )

        it('should be have a data-abc-id of prettyNeat', () => {
            expect(textarea.prop('data-abc-id')).toBe('prettyNeat')
        })
    })
})