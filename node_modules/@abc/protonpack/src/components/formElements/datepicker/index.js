import React, {Component} from 'react'
import PropTypes from 'prop-types'
import moment from 'moment'
import {SingleDatePicker} from 'react-dates'
import Icon from '@abc/quarkicons'
import castArray from 'lodash/castArray'
import isString from 'lodash/isString'
import Indicator from 'components/indicator'
import classnames from 'classnames'
import grid from 'styles/config/_grid.scss'

const iconTypeChildren = (props, propName) => {
    const node = castArray(props[propName])
    if (node.length > 1 && !node.every((child => child && (child.type === Icon || child.type === Indicator)))) {
        return new Error('DatePicker accepts a single \'Icon\' or \'Indicator\' component for the \'icon\' prop')
    }
    return null
}

export default class DatePicker extends Component {
    constructor(props) {
        super(props)

        this.state = {
            focused: false,
            anchorDirection: null,
        }

        this.handleFocusChange = this.handleFocusChange.bind(this)
        this.handleMobileMediaQueryTrigger = this.handleMobileMediaQueryTrigger.bind(this)
        this.formatDisplayDate = this.formatDisplayDate.bind(this)
        this.handleOutsideTouch = this.handleOutsideTouch.bind(this)
        this.mouseEnterPicker = this.mouseEnterPicker.bind(this)
        this.mouseLeavePicker = this.mouseLeavePicker.bind(this)
    }

    componentDidMount() {
        document.addEventListener('touchstart', this.handleOutsideTouch)
        this.mediaQuery = window.matchMedia(`(min-width: ${grid.gridBreakPointSM})`)
        this.setState({
            anchorDirection: this.mediaQuery.matches ? null : 'right',
        })
        this.mediaQuery && this.mediaQuery.addListener(this.handleMobileMediaQueryTrigger)
    }

    componentWillUnmount() {
        document.removeEventListener('touchstart', this.handleOutsideTouch)
        this.mediaQuery && this.mediaQuery.removeListener(this.handleMobileMediaQueryTrigger)
        delete this.mediaQuery
    }

    handleMobileMediaQueryTrigger(mediaQuery) {
        this.setState({
            anchorDirection: mediaQuery.matches ? null : 'right',
        })
    }

    handleOutsideTouch(e) {
        if (this.wrapper && !this.wrapper.contains(e.target)) {
            this.setState({focused: false})
        }
    }

    handleFocusChange({focused}) {
        const {onFocusChange} = this.props

        if (onFocusChange) {
            onFocusChange(focused)
        } else {
            this.setState({focused})
        }
    }

    mouseEnterPicker() {
        this.setState({
            insidePicker: true,
        })
    }

    mouseLeavePicker() {
        this.setState({
            insidePicker: false,
        })
        setTimeout(() => {
            this.setState({
                focused: this.state.insidePicker,
            })
        }, 300)
    }

    formatDisplayDate() {
        const {date, relativeDayNames} = this.props
        const today = moment().startOf('day')
            .hour(12)
        const daysAway = date.startOf('day').hour(12)
            .diff(today, 'days')

        let format = ''

        switch (daysAway) {
            case -1:
                format = `[${relativeDayNames.yesterday}]`
                break
            case 0:
                format = `[${relativeDayNames.today}]`
                break
            case 1:
                format = `[${relativeDayNames.tomorrow}]`
                break
            default:
                format = 'll'
        }

        return format
    }

    render() {
        const {
            focused,
            readOnly,
            display: displayDatePicker,
            allowPastDates,
            onFocusChange, // eslint-disable-line no-unused-vars
            className,
            relativeDayNames, // eslint-disable-line no-unused-vars
            hideDisplayText,
            popoverAlign,
            icon,
            ['data-abc-id']: dataAbcId,
            ...formGroup
        } = this.props

        // eslint-disable-next-line no-unused-vars
        const {normalize, validate, onValidationFieldInitialized, onValidationFieldFailure, onValidationFieldSuccess, ...remain} = formGroup

        const isFocused = focused !== undefined ? focused : this.state.focused
        const classes = {
            displayDatePicker,
            hideDisplayText,
        }
        const testId = dataAbcId || 'datePicker'
        const iconNode = isString(icon) ? (<Icon type={icon} />) : icon

        if (allowPastDates) {
            remain.isOutsideRange = () => false
        }

        this.formatDisplayDate(remain.date)

        return (
            <div
                className={classnames(classes, className, popoverAlign)}
                data-abc-id={testId}
                ref={wrapper => this.wrapper = wrapper}
                onMouseLeave={this.mouseLeavePicker}
                onMouseEnter={this.mouseEnterPicker}
            >
                <SingleDatePicker
                    focused={isFocused}
                    onFocusChange={this.handleFocusChange}
                    numberOfMonths={1}
                    inputIconPosition="after"
                    hideKeyboardShortcutsPanel
                    customInputIcon={iconNode}
                    navPrev={<Icon type="chevron-left" />}
                    navNext={<Icon type="chevron-right" />}
                    readOnly={readOnly || displayDatePicker}
                    displayFormat={this.formatDisplayDate}
                    anchorDirection={this.state.anchorDirection}
                    {...remain}
                />
            </div>
        )
    }
}

DatePicker.propTypes = {
    className: PropTypes.string,
    focused: PropTypes.bool,
    readOnly: PropTypes.bool,
    display: PropTypes.bool,
    icon: PropTypes.oneOfType([
        PropTypes.string,
        iconTypeChildren,
    ]),
    onFocusChange: PropTypes.func,
    allowPastDates: PropTypes.bool,
    hideDisplayText: PropTypes.bool,
    relativeDayNames: PropTypes.object,
    date: PropTypes.object.isRequired,
    onDateChange: PropTypes.func.isRequired,
    popoverAlign: PropTypes.oneOf(['center', 'left', 'right']),
}

DatePicker.defaultProps = {
    icon: 'chevron-down-heavy',
    relativeDayNames: {
        yesterday: 'Yesterday',
        today: 'Today',
        tomorrow: 'Tomorrow',
    },
}