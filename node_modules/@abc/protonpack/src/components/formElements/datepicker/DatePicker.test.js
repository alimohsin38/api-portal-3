import React from 'react'
import {shallow, mount} from 'enzyme'
import moment from 'moment'
import DatePicker from './'

const today = moment()
const tomorrow = today.clone().add(1, 'days')
const yesterday = today.clone().subtract(1, 'days')
const mockHandleDateChange = () => {}

describe('<DatePicker />', () => {
    describe('Test basic render', () => {
        let changeCount = 0
        const handleDateChange = () => changeCount += 1

        const datePicker = mount(
            <DatePicker
                date={today}
                onDateChange={handleDateChange}
            />
        )

        const singleDatePicker = datePicker.children()
        const singleDatePickerProps = singleDatePicker.props()
        const displayText = datePicker.find('.DateInput__display-text')
        const input = datePicker.find('.DateInput__input')

        it('Should render closed', () => {
            expect(datePicker.find('.DateInput--with-caret').length).toBe(0)
        })
        it('Should open when focused', () => {
            input.simulate('focus')
            expect(datePicker.find('.DateInput--with-caret').length).toBe(1)
        })
        it('Should display "Today"', () => {
            expect(displayText.text()).toEqual('Today')
        })
        it('Should display one month panel', () => {
            expect(singleDatePickerProps.numberOfMonths).toBe(1)
        })
        it('Should have chevron-down-heavy input icon', () => {
            expect(singleDatePickerProps.customInputIcon.props.type).toBe('chevron-down-heavy')
        })
        it('Should display input icon after date', () => {
            expect(singleDatePickerProps.inputIconPosition).toBe('after')
        })
        it('Should hide the keyboard shortcuts panel', () => {
            expect(singleDatePickerProps.hideKeyboardShortcutsPanel).toBe(true)
        })
        it('Should have chevron-left nav previous icon', () => {
            expect(singleDatePickerProps.navPrev.props.type).toBe('chevron-left')
        })
        it('Should have chevron-right nav next icon', () => {
            expect(singleDatePickerProps.navNext.props.type).toBe('chevron-right')
        })
        it('Should call prop onDateChange', () => {
            input.simulate('change')
            expect(changeCount).toBe(1)
        })
    })

    describe('Test custom class', () => {
        const datePicker = shallow(
            <DatePicker
                date={today}
                onDateChange={mockHandleDateChange}
                className="testClass"
            />
        )

        it('Should have passed in class', () => {
            expect(datePicker.hasClass('testClass')).toBe(true)
        })
    })

    describe('Test display prop', () => {
        const datePicker = mount(
            <DatePicker
                date={today}
                onDateChange={mockHandleDateChange}
                display
            />
        )

        const input = datePicker.find('.DateInput__input')

        it('Should have "displayDatePicker" class', () => {
            expect(datePicker.hasClass('displayDatePicker')).toBe(true)
        })
        it('Should be readonly', () => {
            expect(input.props().readOnly).toBe(true)
        })
    })

    describe('Test custom focus control', () => {
        let focused = false
        const onFocusChange = () => focused = !focused

        const datePicker = mount(
            <DatePicker
                date={today}
                onDateChange={mockHandleDateChange}
                focused={focused}
                onFocusChange={onFocusChange}
            />
        )

        const input = datePicker.find('.DateInput__input')

        it('Should be closed when "focused" is false', () => {
            expect(datePicker.find('.DateInput--with-caret').length).toBe(0)
        })
        it('Should change "focused" to true when focused', () => {
            input.simulate('focus')
            expect(focused).toBe(true)
        })
        it('Should be open when "focused" is true', () => {
            datePicker.setProps({focused})
            expect(datePicker.find('.DateInput--with-caret').length).toBe(1)
        })
        it('Should change "focused" to false when blur event occurs', () => {
            input.simulate('change')
            expect(focused).toBe(false)
        })
    })

    describe('Test display date formatting', () => {
        const previousFormattedDate = today.clone().subtract(2, 'days')
        const nextFormattedDate = today.clone().add(2, 'days')

        const datePicker = mount(
            <DatePicker
                date={today}
                onDateChange={mockHandleDateChange}
            />
        )

        const displayText = datePicker.find('.DateInput__display-text')

        it('Should display "Today"', () => {
            expect(displayText.text()).toEqual('Today')
        })
        it('Should display "Yesterday"', () => {
            datePicker.setProps({date: yesterday})
            expect(datePicker.find('.DateInput__display-text').text()).toEqual('Yesterday')
        })
        it('Should display "Tomorrow"', () => {
            datePicker.setProps({date: tomorrow})
            expect(displayText.text()).toEqual('Tomorrow')
        })
        it('Should use "ll" format for previous dates before "Yesterday"', () => {
            datePicker.setProps({date: previousFormattedDate})
            expect(displayText.text()).toEqual(previousFormattedDate.clone().format('ll'))
        })
        it('Should use "ll" format for future dates after "Tomorrow"', () => {
            datePicker.setProps({date: nextFormattedDate})
            expect(displayText.text()).toEqual(nextFormattedDate.clone().format('ll'))
        })
    })

    describe('Test allowPastDates prop', () => {
        const datePicker = shallow(
            <DatePicker
                date={today}
                onDateChange={mockHandleDateChange}
                allowPastDates
            />
        )

        const singleDatePicker = datePicker.children()

        it('Should add "isOutsideRange" prop that always returns false', () => {
            expect(singleDatePicker.props().isOutsideRange()).toBe(false)
            expect(singleDatePicker.props().isOutsideRange(today)).toBe(false)
        })
    })

    describe('Test hideDisplayText prop', () => {
        const datePicker = shallow(
            <DatePicker
                date={today}
                onDateChange={mockHandleDateChange}
                hideDisplayText
            />
        )

        it('should have "hideDisplayText" class', () => {
            expect(datePicker.hasClass('hideDisplayText')).toBe(true)
        })
    })

    describe('Test popoverAlign prop', () => {
        let datePicker

        beforeEach(() => {
            datePicker = shallow(
                <DatePicker
                    date={today}
                    onDateChange={mockHandleDateChange}
                />
            )
        })

        it('should have "center" class', () => {
            datePicker.setProps({popoverAlign: 'center'})
            expect(datePicker.hasClass('center')).toBe(true)
        })

        it('should have "left" class', () => {
            datePicker.setProps({popoverAlign: 'left'})
            expect(datePicker.hasClass('left')).toBe(true)
        })

        it('should have "right" class', () => {
            datePicker.setProps({popoverAlign: 'right'})
            expect(datePicker.hasClass('right')).toBe(true)
        })
    })

    describe('Test custom "relativeDayNames"', () => {
        const testRelativeDayNames = {
            yesterday: 'Test Today',
            today: 'Test Yesterday',
            tomorrow: 'Test Tomorrow',
        }

        const datePicker = mount(
            <DatePicker
                date={today}
                onDateChange={mockHandleDateChange}
                relativeDayNames={testRelativeDayNames}
            />
        )

        const displayText = datePicker.find('.DateInput__display-text')

        it('Should display "Test Today"', () => {
            expect(displayText.text()).toEqual(testRelativeDayNames.today)
        })
        it('Should display "Test Yesterday"', () => {
            datePicker.setProps({date: yesterday})
            expect(datePicker.find('.DateInput__display-text').text()).toEqual(testRelativeDayNames.yesterday)
        })
        it('Should display "Test Tomorrow"', () => {
            datePicker.setProps({date: tomorrow})
            expect(displayText.text()).toEqual(testRelativeDayNames.tomorrow)
        })
    })
})