import React from 'react'
import {shallow, mount} from 'enzyme'
import LabelGroup from './'
import Input from '../input'

describe('Test render of a basic label group', () => {
    const labelGroup = shallow(
        <LabelGroup label="Input" id="labelGroup">
            <Input type="text" name="test" />
        </LabelGroup>
    )

    it('Should render to a basic label group element', () => {
        expect(labelGroup.html()).toBe(
            '<div class="label-group" data-abc-id="labelGroup">' +
                '<label class="form-control-label label-placeholder" for="labelGroup">Input</label>' +
                '<input type="text" class="form-control" data-abc-id="textInput" name="test" id="labelGroup"/>' +
             '</div>'
        )
    })
})

describe('Test label group child focus', () => {
    const labelGroup = shallow(
        <LabelGroup label="Input" id="labelGroup">
            <Input type="text"/>
        </LabelGroup>
    )

    labelGroup.find('.label-group > Input').simulate('focus')

    it('Should render raised label', () => {
        expect(labelGroup.find('.label-group > Label').hasClass('label-raised')).toBe(true)
    })
})

describe('Test label group child blur', () => {
    const labelGroup = mount(
        <LabelGroup label="Input" id="labelGroup">
            <Input type="text"/>
        </LabelGroup>
    )

    const input = labelGroup.find('.label-group .form-control')
    input.simulate('focus')
    input.simulate('blur')

    it('Should return label to placeholder', () => {
        expect(labelGroup.find('.label-group .form-control-label').hasClass('label-placeholder')).toBe(true)
    })
})

describe('Test label group with a disabled or read only child', () => {
    const disabledLabelGroup = mount(
        <LabelGroup label="Input" id="labelGroup">
            <Input type="text" disabled />
        </LabelGroup>
    )
    const readOnlyLabelGroup = mount(
        <LabelGroup label="Input" id="labelGroup">
            <Input type="text" readOnly />
        </LabelGroup>
    )

    const disabledLabelGroupElement = disabledLabelGroup.find('.label-group')
    it('Should render label group with the label-disabled class if input is disabled', () => {
        expect(disabledLabelGroupElement.hasClass('label-disabled')).toBe(true)
    })

    const readOnlyLabelGroupElement = readOnlyLabelGroup.find('.label-group')
    it('Should render label group with the label-disabled class if input is read only', () => {
        expect(readOnlyLabelGroupElement.hasClass('label-disabled')).toBe(true)
    })
})

describe('Test label group child with value', () => {
    const labelGroup = shallow(
        <LabelGroup label="Input" id="labelGroup">
            <Input value="123" onChange={() => 1} type="text" />
        </LabelGroup>
    )

    it('Should render raised label with value', () => {
        expect(labelGroup.find('.label-group > Label').hasClass('label-raised')).toBe(true)
    })
})

describe('Test label group child with placeholder', () => {
    const labelGroup = shallow(
        <LabelGroup label="Input" id="labelGroup">
            <Input placeholder="test" name="test" type="text" />
        </LabelGroup>
    )

    const input = labelGroup.find('.label-group > Input')
    it('Should not render placeholder if label is in input', () => {
        expect(input.html()).toBe('<input type="text" class="form-control" data-abc-id="textInput" placeholder="" name="test" id="labelGroup"/>')
    })

    const standaloneLabelGroup = shallow(
        <LabelGroup label="Input" standaloneLabel id="labelGroup">
            <Input placeholder="test" name="test" type="text" />
        </LabelGroup>
    )

    const outsideLabelInput = standaloneLabelGroup.find('.label-group > Input')
    it('Should render placeholder if label is outside of input', () => {
        expect(outsideLabelInput.html()).toBe(
            '<input type="text" class="form-control" data-abc-id="textInput" placeholder="test" name="test" id="labelGroup"/>'
        )
    })

    const hiddenLabelGroup = shallow(
        <LabelGroup label="Input" hideLabel id="labelGroup">
            <Input placeholder="test" name="test" type="text" />
        </LabelGroup>
    )

    const hiddenLabelInput = hiddenLabelGroup.find('.label-group > Input')
    it('Should render placeholder if label is hidden', () => {
        expect(hiddenLabelInput.html()).toBe(
            '<input type="text" class="form-control" data-abc-id="textInput" placeholder="test" name="test" id="labelGroup"/>'
        )
    })
})

describe('Test label group onFocus prop', () => {
    let focusCount = 0
    const handleFocus = () => focusCount += 1

    const labelGroup = shallow(
        <LabelGroup label="Input" id="labelGroup" onFocus={handleFocus}>
            <Input type="text" />
        </LabelGroup>
    )

    labelGroup.find('.label-group > #labelGroup').simulate('focus')

    it('Should render raised label on focus with prop onFocus', () => {
        expect(labelGroup.find('.label-group > Label').hasClass('label-raised')).toBe(true)
    })
    it('Should call prop onFocus', () => {
        expect(focusCount).toBe(1)
    })
})

describe('Test label group onBlur prop', () => {
    let blurCount = 0
    const handleBlur = () => blurCount += 1

    const labelGroup = mount(
        <LabelGroup label="Input" id="labelGroup" onBlur={handleBlur}>
            <Input type="text" />
        </LabelGroup>
    )

    const input = labelGroup.find('.label-group .form-control')
    input.simulate('focus')
    input.simulate('blur')

    it('Should render placeholder label on blur with prop onBlur', () => {
        expect(labelGroup.find('.label-group > Label').hasClass('label-placeholder')).toBe(true)
    })
    it('Should call prop onBlur', () => {
        expect(blurCount).toBe(1)
    })
})

describe('Test label group child onFocus prop', () => {
    let focusCount = 0
    const handleFocus = () => focusCount += 1

    const labelGroup = shallow(
        <LabelGroup label="Input" id="labelGroup">
            <Input onFocus={handleFocus} type="text" />
        </LabelGroup>
    )

    const input = labelGroup.find('.label-group > Input')
    input.simulate('focus')

    it('Should render raised label on focus with prop onFocus', () => {
        expect(labelGroup.find('.label-group > Label').hasClass('label-raised')).toBe(true)
    })
    it('Should call prop onFocus', () => {
        expect(focusCount).toBe(1)
    })
})

describe('Test label group child onBlur prop', () => {
    let blurCount = 0
    const handleBlur = () => blurCount += 1

    const labelGroup = mount(
        <LabelGroup label="Input" id="labelGroup">
            <Input onBlur={handleBlur} type="text" />
        </LabelGroup>
    )

    const input = labelGroup.find('.label-group .form-control')
    input.simulate('focus')
    input.simulate('blur')

    it('Should render placeholder label on blur with prop onBlur', () => {
        expect(labelGroup.find('.label-group > Label').hasClass('label-placeholder')).toBe(true)
    })
    it('Should call prop onBlur', () => {
        expect(blurCount).toBe(1)
    })
})

describe('Test label group hidden label', () => {
    const labelGroup = shallow(
        <LabelGroup label="Input" hideLabel id="labelGroup">
            <Input type="text" />
        </LabelGroup>
    )

    const label = labelGroup.find('.label-group > Label')
    it('Should render label as screen reader only', () => {
        expect(label.html()).toBe('<label class="form-control-label label-placeholder sr-only" for="labelGroup">Input</label>')
    })
})

describe('Test add class to label', () => {
    const labelGroup = shallow(
        <LabelGroup label="Input" className="test-class" standaloneLabel id="labelGroup">
            <Input type="text" />
        </LabelGroup>
    )

    const container = labelGroup.find('.label-group')
    it('Should render a label with the provided classname', () => {
        expect(container.html()).toBe(
            '<div class="label-group test-class" data-abc-id="labelGroup">' +
                '<label class="form-control-label" for="labelGroup">Input</label>' +
                '<input type="text" class="form-control" data-abc-id="textInput" id="labelGroup"/>' +
            '</div>'
        )
    })
})