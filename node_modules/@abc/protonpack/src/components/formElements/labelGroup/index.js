import React, {Component} from 'react'
import PropTypes from 'prop-types'
import Label from '../label'
import Textarea from '../textarea'

export default class LabelGroup extends Component {
    constructor(props) {
        super(props)

        const {children} = this.props
        const labelClass = (children.props.value || children.props.defaultValue) ? 'label-raised' : 'label-placeholder'
        this.state = {labelClass}

        this.handleFocus = this.handleFocus.bind(this)
        this.handleBlur = this.handleBlur.bind(this)
        this.handleClear = this.handleClear.bind(this)
    }

    handleBlur(e) {
        const {children} = this.props

        if (!e || (e.hasOwnProperty('target') && !e.target.value)) {
            this.setState({labelClass: 'label-placeholder'})
        }

        children.props.onBlur && children.props.onBlur(e)
        this.props.onBlur && this.props.onBlur(e)
    }

    handleFocus(e) {
        const {children} = this.props
        this.setState({labelClass: 'label-raised'})

        children.props.onFocus && children.props.onFocus(e)
        this.props.onFocus && this.props.onFocus(e)
    }

    handleClear() {
        const {children, onClear} = this.props
        this.setState({labelClass: 'label-placeholder'})

        children.props.onClear && children.props.onClear()
        onClear && onClear()
    }

    buildClasses() {
        const {inline, className, children} = this.props
        const classes = ['label-group']

        if (inline) {
            if (inline === 'reverse') {
                classes.push('label-inline-reverse')
            } else {
                classes.push('label-inline')
            }
        }
        if (children.props.disabled || children.props.readOnly) {
            classes.push('label-disabled')
        }
        if (children.type === Textarea) {
            classes.push('label-textarea')
        }
        if (className) {
            classes.push(className)
        }

        return classes.join(' ')
    }

    render() {
        // eslint-disable-next-line no-unused-vars
        const {label, hideLabel, standaloneLabel, onBlur, onFocus, check, inline, children, className, ...remain} = this.props
        const childProps = {...children.props}
        !standaloneLabel && (remain.onClear = this.handleClear)

        if (!hideLabel && !standaloneLabel) {
            if (childProps.placeholder) {
                childProps.placeholder = ''
            }
        }

        return (
            <div className={this.buildClasses()} data-abc-id="labelGroup">
                <Label
                    htmlFor={this.props.id}
                    className={!standaloneLabel ? this.state.labelClass : ''}
                    srOnly={hideLabel}
                    check={check}
                >
                    {label}
                </Label>

                {React.cloneElement(
                    children,
                    {
                        ...childProps,
                        onFocus: this.handleFocus,
                        onBlur: this.handleBlur,
                        ...remain,
                    }
                )}
            </div>
        )
    }
}

LabelGroup.propTypes = {
    onClear: PropTypes.func,
    onBlur: PropTypes.func,
    onFocus: PropTypes.func,
    label: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.node,
    ]).isRequired,
    standaloneLabel: PropTypes.bool,
    hideLabel: PropTypes.bool,
    check: PropTypes.bool,
    inline: PropTypes.oneOfType([
        PropTypes.oneOf(['reverse']),
        PropTypes.bool,
    ]),
    children: PropTypes.object,
    id: PropTypes.string,
    className: PropTypes.string,
}