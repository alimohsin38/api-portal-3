import React, {Component} from 'react'
import PropTypes from 'prop-types'
import colClasses from '../../../utils/colClasses'

export default class Label extends Component {
    buildClasses(alignments, className, isCheck, srOnly) {
        let classes = []

        for (const alignment in alignments) {
            if (typeof alignments[alignment] !== 'undefined') {
                classes = classes.concat(colClasses(alignments))
                classes.push('col-form-label')
                break
            }
        }

        if (isCheck) {
            classes.push('form-check-label')
        } else {
            classes.push('form-control-label') 
        }

        if (className) {
            classes.push(className)
        }

        if (srOnly) {
            classes.push('sr-only')
        }

        return classes.join(' ')
    }

    render() {
        const {xs, sm, md, lg, xl, className, srOnly, check, radio, statusMessage, ...formGroup} = this.props // eslint-disable-line no-unused-vars

        // eslint-disable-next-line no-unused-vars
        const {normalize, validate, onValidationFieldInitialized, onValidationFieldFailure, onValidationFieldSuccess, ...remain} = formGroup

        const alignments = {xs, sm, md, lg, xl}
        const isCheck = check || radio

        return (
            <label className={this.buildClasses(alignments, className, isCheck, srOnly)} {...remain} >
                {this.props.children}
            </label>
        )
    }
}

Label.propTypes = {
    children: PropTypes.node.isRequired,
    className: PropTypes.string,
    statusMessage: PropTypes.object,
    srOnly: PropTypes.bool,
    check: PropTypes.bool,
    radio: PropTypes.bool,
    xs: PropTypes.oneOfType([
        PropTypes.bool,
        PropTypes.object,
        PropTypes.number,
    ]),
    sm: PropTypes.oneOfType([
        PropTypes.bool,
        PropTypes.object,
        PropTypes.number,
    ]),
    md: PropTypes.oneOfType([
        PropTypes.bool,
        PropTypes.object,
        PropTypes.number,
    ]),
    lg: PropTypes.oneOfType([
        PropTypes.bool,
        PropTypes.object,
        PropTypes.number,
    ]),
    xl: PropTypes.oneOfType([
        PropTypes.bool,
        PropTypes.object,
        PropTypes.number,
    ]),
}