import React from 'react'
import {shallow} from 'enzyme'
import Label from './'

describe('Label', () => {
    describe('render a basic label', () => {
        const label = shallow(
            <Label>xyz</Label>
        ) 

        const labelElm = label.find('label')

        it('should be a label', () => {
            expect(labelElm.matchesElement(<label>xyz</label>)).toBe(true)
        })

        it('should be have the class .form-control-label', () => {
            expect(labelElm.hasClass('form-control-label')).toBe(true)
        })
    })

    describe('render a basic label with srOnly', () => {
        const label = shallow(
            <Label srOnly>xyz</Label>
        ) 

        const labelElm = label.find('label')

        it('should be a label', () => {
            expect(labelElm.matchesElement(<label>xyz</label>)).toBe(true)
        })

        it('should be have the class .form-control-label', () => {
            expect(labelElm.hasClass('form-control-label')).toBe(true)
        })

        it('should be have the class .sr-only', () => {
            expect(labelElm.hasClass('sr-only')).toBe(true)
        })
    })

    describe('render a basic label for checkboxes', () => {
        const label = shallow(
            <Label check>xyz</Label>
        ) 

        const labelElm = label.find('label')

        it('should be a label', () => {
            expect(labelElm.matchesElement(<label>xyz</label>)).toBe(true)
        })

        it('should be have the class .form-control-label', () => {
            expect(labelElm.hasClass('form-control-label')).toBe(false)
        })

        it('should be have the class .form-check-label', () => {
            expect(labelElm.hasClass('form-check-label')).toBe(true)
        })
    })

    describe('render a label for radio groups', () => {
        const label = shallow(
            <Label radio>xyz</Label>
        ) 

        const labelElm = label.find('label')

        it('should be a label', () => {
            expect(labelElm.matchesElement(<label>xyz</label>)).toBe(true)
        })

        it('should be have the class .form-control-label', () => {
            expect(labelElm.hasClass('form-control-label')).toBe(false)
        })

        it('should be have the class .form-check-label', () => {
            expect(labelElm.hasClass('form-check-label')).toBe(true)
        })
    })

    describe('render a label as an xs column', () => {
        const label = shallow(
            <Label xs>xyz</Label>
        ) 

        const labelElm = label.find('label')

        it('should be a label', () => {
            expect(labelElm.matchesElement(<label>xyz</label>)).toBe(true)
        })

        it('should be have the class .form-control-label', () => {
            expect(labelElm.hasClass('form-control-label')).toBe(true)
        })

        it('should be have the class .col', () => {
            expect(labelElm.hasClass('col')).toBe(true)
        })

        it('should be have the class .col-form-label', () => {
            expect(labelElm.hasClass('col-form-label')).toBe(true)
        })
    })

    describe('render a label as an xs=3 column', () => {
        const label = shallow(
            <Label xs={3}>xyz</Label>
        ) 

        const labelElm = label.find('label')

        it('should be a label', () => {
            expect(labelElm.matchesElement(<label>xyz</label>)).toBe(true)
        })

        it('should be have the class .form-control-label', () => {
            expect(labelElm.hasClass('form-control-label')).toBe(true)
        })

        it('should be have the class .col', () => {
            expect(labelElm.hasClass('col-3')).toBe(true)
        })

        it('should be have the class .col-form-label', () => {
            expect(labelElm.hasClass('col-form-label')).toBe(true)
        })
    })

    describe('render a label as an xs column with an offset of 3', () => {
        const label = shallow(
            <Label xs={{col: 3, offset: 3}}>xyz</Label>
        ) 

        const labelElm = label.find('label')

        it('should be a label', () => {
            expect(labelElm.matchesElement(<label>xyz</label>)).toBe(true)
        })

        it('should be have the class .form-control-label', () => {
            expect(labelElm.hasClass('form-control-label')).toBe(true)
        })

        it('should be have the class .col', () => {
            expect(labelElm.hasClass('col-3')).toBe(true)
        })

        it('should be have the class .offset', () => {
            expect(labelElm.hasClass('offset-3')).toBe(true)
        })

        it('should be have the class .col-form-label', () => {
            expect(labelElm.hasClass('col-form-label')).toBe(true)
        })
    })

    describe('render a label with extra classNames', () => {
        const label = shallow(
            <Label className="xyz 123 abc">xyz</Label>
        ) 

        const labelElm = label.find('label')

        it('should be a label', () => {
            expect(labelElm.matchesElement(<label>xyz</label>)).toBe(true)
        })

        it('should be have the class .form-control-label', () => {
            expect(labelElm.hasClass('form-control-label')).toBe(true)
        })

        it('should be have the class .123', () => {
            expect(labelElm.hasClass('123')).toBe(true)
        })

        it('should be have the class .xyz', () => {
            expect(labelElm.hasClass('xyz')).toBe(true)
        })

        it('should be have the class .abc', () => {
            expect(labelElm.hasClass('abc')).toBe(true)
        })
    })
})