import React, {Component} from 'react'
import PropTypes from 'prop-types'
import makeClassnames from '../../../utils/bem'
import classnames from 'classnames'

const prefix = ''

export default class ToggleButton extends Component {
    constructor(props) {
        super(props)

        this.setInputRef = this.setInputRef.bind(this)
        this.handleBlur = this.handleBlur.bind(this)
        this.handleChange = this.handleChange.bind(this)
        this.handleFocus = this.handleFocus.bind(this)

        this.state = {
            focused: false,
        }
    }

    get elementName() {
        return 'toggle-button'
    }

    setInputRef(input) {
        this.input = input
    }

    buildClasses() {
        const {btnStyle, size, checked, className, disabled, flat, round, outline} = this.props

        const block = 'form-element'
        const focused = this.state.focused
        const style = btnStyle ? btnStyle : undefined

        const classes = {
            wrapper: {
                ...makeClassnames({
                    prefix,
                    block,
                    element: this.elementName,
                    modifiers: {
                        block: {
                            disabled,
                            size,
                        },
                        element: {
                            checked,
                            flat,
                            outline,
                            round,
                            style,
                            focused,
                        },
                    },
                }),
            },
            input: {
                ...makeClassnames({
                    prefix,
                    block: this.elementName,
                    element: 'input',
                }),
            },
            content: {
                ...makeClassnames({
                    prefix,
                    block: this.elementName,
                    element: 'content',
                }),
            },
        }

        if (className) {
            classes.wrapper[className] = true
        }

        return classes
    }

    handleBlur() {
        this.setState({focused:false})
        this.props.onBlur && this.props.onBlur()
    }

    handleFocus() {
        this.setState({focused:true})
        this.props.onFocus && this.props.onFocus()
    }

    handleChange() {
        if (!this.props.disabled) {
            this.props.onChange && this.props.onChange(!this.props.checked)
            return false
        }
    }

    render() {
        // eslint-disable-next-line no-unused-vars
        const {btnStyle, checked, children, className, disabled, ['data-abc-id']: dataAbcId, flat, round, outline, onChange, onBlur, onFocus, ...remain} = this.props

        const classes = this.buildClasses()

        const abcId = dataAbcId || 'toggle-button'

        return (
            <div
                className={classnames(classes.wrapper)}
                data-abc-id={abcId}
                onClick={this.handleChange}
                {...remain}
            >
                <input
                    ref={this.setInputRef}
                    checked={checked}
                    className={classnames(classes.input)}
                    onBlur={this.handleBlur}
                    onFocus={this.handleFocus}
                    type="checkbox"
                    disabled={disabled}
                    readOnly
                />
                <div className={classnames(classes.content)}>
                    {children}
                </div>
            </div>
        )
    }
}

ToggleButton.propTypes = {
    btnStyle: PropTypes.oneOf([
        'danger',
        'disabled',
        'info',
        'primary',
        'secondary',
        'success',
        'warning',
    ]),
    checked: PropTypes.bool,
    children: PropTypes.node,
    className: PropTypes.string,
    disabled: PropTypes.bool,
    flat: PropTypes.bool,
    outline: PropTypes.bool,
    round: PropTypes.bool,
    onBlur: PropTypes.func,
    onChange: PropTypes.func,
    onFocus: PropTypes.func,
    size:  PropTypes.oneOf([
        'xs',
        'sm',
        'md',
        'lg',
        'xl',
        'xxl',
    ]),
}
