import React from 'react'
import {mount, shallow} from 'enzyme'
import ToggleButton from './'

const prefix = ''

const defaultState = {
    focused: false,
}

describe('ToggleButton', () => {
    describe('default component', () => {
        const toggleButton = mount(
            <ToggleButton className="fake-class-name"><p>xyz</p></ToggleButton>
        )
        const content = toggleButton.find(`.${prefix}content`)

        it('should be a p in the content', () => {
            expect(content.containsMatchingElement(<p>xyz</p>)).toBe(true)
        })

        it('should have the class .fake-class-name', () => {
            expect(toggleButton.hasClass('fake-class-name')).toBe(true)
        })

        it(`should have the class .${prefix}toggle-button`, () => {
            expect(toggleButton.hasClass(`${prefix}toggle-button`)).toBe(true)
        })

        it(`should have the class .${prefix}form-element__toggle-button`, () => {
            expect(toggleButton.hasClass(`${prefix}form-element__toggle-button`)).toBe(true)
        })
    })

    describe('will handle btnStyle prop', () => {
        const styles = [
            'danger',
            'disabled',
            'info',
            'primary',
            'secondary',
            'success',
            'warning',
        ]

        styles.forEach((style) => {
            const toggleButton = shallow(
                <ToggleButton btnStyle={style}><p>xyz</p></ToggleButton>
            )
            it(`should have the class .${prefix}toggle-button--style_${style}`, () => {
                expect(toggleButton.hasClass(`${prefix}toggle-button--style_${style}`)).toBe(true)
            })
        })
    })

    describe('will handle size prop', () => {
        const styles = [
            'xs',
            'sm',
            'md',
            'lg',
            'xl',
            'xxl',
        ]

        styles.forEach((style) => {
            const toggleButton = shallow(
                <ToggleButton size={style}><p>xyz</p></ToggleButton>
            )
            it(`should have the class .${prefix}form-element--size_${style}`, () => {
                expect(toggleButton.hasClass(`${prefix}form-element--size_${style}`)).toBe(true)
            })
        })
    })

    describe('will handle boolean states', () => {
        const toggleButton = shallow(
            <ToggleButton checked disabled flat outline round><p>xyz</p></ToggleButton>
        )

        it('should handle the disabled state', () => {
            expect(toggleButton.hasClass(`${prefix}form-element--disabled`)).toBe(true)
        })

        it('should handle the checked state', () => {
            expect(toggleButton.hasClass(`${prefix}toggle-button--checked`)).toBe(true)
        })

        it('should handle the flat state', () => {
            expect(toggleButton.hasClass(`${prefix}toggle-button--flat`)).toBe(true)
        })

        it('should handle the round state', () => {
            expect(toggleButton.hasClass(`${prefix}toggle-button--round`)).toBe(true)
        })

        it('should handle the outline state', () => {
            expect(toggleButton.hasClass(`${prefix}toggle-button--outline`)).toBe(true)
        })
    })

    describe('will handle events', () => {
        let toggleButton
        let onChangeTest
        let onFocusTest
        let onBlurTest
        let checkbox

        beforeEach(() => {
            onChangeTest = jest.fn()
            onFocusTest = jest.fn()
            onBlurTest = jest.fn()
            toggleButton = shallow(
                <ToggleButton className="fake-class-name" onChange={onChangeTest} onFocus={onFocusTest} onBlur={onBlurTest}><p>xyz</p></ToggleButton>
            )
            toggleButton.setState(defaultState)
            checkbox = toggleButton.find('input')
        })

        it('should trigger onChange if container is clicked', () => {
            toggleButton.simulate('click')
            expect(onChangeTest).toHaveBeenCalled()
        })

        it('should not trigger onChange if container is clicked and button is disabled', () => {
            toggleButton.setProps({disabled: true})
            toggleButton.simulate('click')
            expect(onChangeTest).not.toHaveBeenCalled()
        })

        it('should trigger onFocus if checkbox gains focus', () => {
            checkbox.simulate('focus')
            expect(onFocusTest).toHaveBeenCalled()
        })

        it('should trigger onBlur if checkbox loses focus', () => {
            checkbox.simulate('blur')
            expect(onBlurTest).toHaveBeenCalled()
        })

        it('should set focused state to true if checkbox gains focus', () => {
            checkbox.simulate('focus')
            expect(toggleButton.state('focused')).toEqual(true)
        })

        it('should set focused state to false if checkbox loses focus', () => {
            toggleButton.setState({focused: true})
            checkbox.simulate('blur')
            expect(toggleButton.state('focused')).toEqual(false)
        })
    })
})