import React, {Component} from 'react'
import PropTypes from 'prop-types'

const validationProps = new WeakMap()

export default class FormGroup extends Component {
    constructor(props) {
        super(props)

        this.handleValidationFieldInitialized = this.handleValidationFieldInitialized.bind(this)
        this.handleValidationFieldFailure = this.handleValidationFieldFailure.bind(this)
        this.handleValidationFieldNormalize = this.handleValidationFieldNormalize.bind(this)
        this.handleValidationFieldSuccess = this.handleValidationFieldSuccess.bind(this)
        this.handleValidationFieldValidate = this.handleValidationFieldValidate.bind(this)

        this.state = {}
    }

    componentWillReceiveProps({statusMessage}) {
        if (statusMessage && this.state.statusMessage) {
            this.setState({
                statusMessage: null,
            })
        }
    }

    handleValidationFieldInitialized(props) {
        validationProps.set(this, props)
    }

    handleValidationFieldNormalize() {
        const validationField = validationProps.get(this)
        return validationField.normalize(...arguments)
    }

    handleValidationFieldValidate() {
        const validationField = validationProps.get(this)
        return validationField.validate(...arguments)
    }

    handleValidationFieldFailure(error) {
        if (!this.state.statusMessage || this.state.statusMessage.text !== error) {
            this.setState({
                statusMessage: {
                    status: 'danger',
                    text: error,
                },
            })
        }
    }

    handleValidationFieldSuccess() {
        if (this.state.statusMessage) {
            this.setState({
                statusMessage: null,
            })
        }
    }

    buildClasses() {
        const {statusMessage = this.state.statusMessage, row, check, radio, className, size} = this.props
        const classes = ['form-group']

        if (size) {
            classes.push(`form-group-${size}`)
        }

        if (check || radio) {
            classes.push('form-check')
        }

        if (row) {
            classes.push('row')
        }

        if (statusMessage) {
            if (statusMessage.status) {
                classes.push(`has-${statusMessage.status}`)
            }
            if (statusMessage.text) {
                classes.push('has-feedback')
            }
        }

        if (className) {
            classes.push(className)
        }

        return classes.join(' ')
    }

    getChildrenWithStatus() {
        const {children, statusMessage = this.state.statusMessage} = this.props

        return React.Children.map(children, (child) => {
            if (child) {
                return React.cloneElement(child, {
                    statusMessage,
                    normalize: this.handleValidationFieldNormalize,
                    validate: this.handleValidationFieldValidate,
                    onValidationFieldInitialized: this.handleValidationFieldInitialized,
                    onValidationFieldFailure: this.handleValidationFieldFailure,
                    onValidationFieldSuccess: this.handleValidationFieldSuccess,
                })
            }
        })
    }

    render() {
        // eslint-disable-next-line no-unused-vars
        const {statusMessage = this.state.statusMessage, row, check, radio, className, size, children, ...remain} = this.props

        return (
            <div {...remain} className={this.buildClasses()} data-abc-id="formGroup">
                {this.getChildrenWithStatus()}
                {statusMessage && <div className="form-control-feedback">{statusMessage.text}</div>}
            </div>
        )
    }
}

FormGroup.propTypes = {
    children: PropTypes.node.isRequired,
    className: PropTypes.string,
    check: PropTypes.bool,
    radio: PropTypes.bool,
    row: PropTypes.bool,
    statusMessage: PropTypes.object,
    size: PropTypes.string,
}