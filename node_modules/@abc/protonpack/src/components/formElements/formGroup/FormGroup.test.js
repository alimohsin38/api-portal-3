import React from 'react'
import {mount, shallow, render} from 'enzyme'
import FormGroup from './'
import Label from '../label'

const TestValidationInput = (options) => {
    const {onValidationFieldInitialized, onValidationFieldFailure, onValidationFieldSuccess, normalize, validate} = options
    return (
        <input
            onBlur={() => onValidationFieldFailure('fake-validation-field-failure-error')}
            onFocus={onValidationFieldSuccess}
            onChange={onValidationFieldInitialized}
            onKeyPress={normalize}
            onKeyDown={validate}
        />
    )
}

describe('Test render of a basic form group', () => {
    const formGroup = shallow(
        <FormGroup><Label>xyz</Label></FormGroup>
    )

    it('Will render to a basic form group element', () => {
        expect(formGroup.html()).toBe('<div class="form-group" data-abc-id="formGroup"><label class="form-control-label">xyz</label></div>')
    })
})

describe('Test render of a basic form group with a null child', () => {
    const formGroup = shallow(
        <FormGroup children={[null]}></FormGroup>
    )

    it('Will render to a basic form group element without the null child', () => {
        expect(formGroup.html()).toBe('<div class="form-group" data-abc-id="formGroup"></div>')
    })
})

describe('Test render of a basic form group with a row', () => {
    const formGroup = shallow(
        <FormGroup row><Label>xyz</Label></FormGroup>
    )

    it('Will render to a basic form group element with the row class', () => {
        expect(formGroup.is('.form-group')).toBe(true)
        expect(formGroup.is('.row')).toBe(true)
    })
})

describe('Test render of a basic form group with a checkbox', () => {
    const formGroup = shallow(
        <FormGroup check><Label>xyz</Label></FormGroup>
    )

    it('Will render to a basic form group element with the form-check class', () => {
        expect(formGroup.is('.form-group')).toBe(true)
        expect(formGroup.is('.form-check')).toBe(true)
    })
})

describe('Test render of a basic form group with a radio', () => {
    const formGroup = shallow(
        <FormGroup radio><Label>xyz</Label></FormGroup>
    )

    it('Will render to a basic form group element with the radio with a form-check class', () => {
        expect(formGroup.is('.form-group')).toBe(true)
        expect(formGroup.is('.form-check')).toBe(true)
    })
})

describe('Test render of a form group with a Status Message', () => {
    const formGroup = render(
        <FormGroup statusMessage={{status:'danger', text:'ALL GLORY TO THE HYPNOTOAD'}}><Label>xyz</Label></FormGroup>
    )

    it('Will render a form group element with a statusMessage', () => {
        expect(formGroup.find('div').hasClass('form-group')).toBe(true)
        expect(formGroup.find('div').hasClass('has-feedback')).toBe(true)

        const errDiv = formGroup.find('div.form-group > div')

        expect(errDiv.hasClass('form-control-feedback')).toBe(true)
        expect(errDiv.text()).toBe('ALL GLORY TO THE HYPNOTOAD')
    })
})

describe('Test render of a basic form group with a size', () => {
    const formGroup = shallow(
        <FormGroup size="lg"><Label>xyz</Label></FormGroup>
    )

    it('Will render to a basic form group with extra classes', () => {
        expect(formGroup.is('.form-group-lg')).toBe(true)
    })
})

describe('Test render of a basic form group with extra classes', () => {
    const formGroup = shallow(
        <FormGroup className="xyz 123"><Label>xyz</Label></FormGroup>
    )

    it('Will render to a basic form group with extra classes', () => {
        expect(formGroup.is('.form-group')).toBe(true)
        expect(formGroup.is('.xyz')).toBe(true)
        expect(formGroup.is('.123')).toBe(true)
    })
})

describe('Test render of a basic form group with extra classes', () => {
    const formGroup = shallow(
        <FormGroup className="xyz 123"><Label>xyz</Label></FormGroup>
    )

    it('Will render to a basic form group with extra classes', () => {
        expect(formGroup.is('.form-group')).toBe(true)
        expect(formGroup.is('.xyz')).toBe(true)
        expect(formGroup.is('.123')).toBe(true)
    })
})

describe('Test all the possible props combined', () => {
    const formGroup = render(
        <FormGroup row statusMessage={{status:'danger', text:'ALL GLORY TO THE HYPNOTOAD'}} className="xyz 123"><Label>xyz</Label></FormGroup>
    )

    it('Will render to a basic form group with extra classes', () => {
        expect(formGroup.find('div').hasClass('form-group')).toBe(true)
        expect(formGroup.find('div').hasClass('row')).toBe(true)
        expect(formGroup.find('div').hasClass('xyz')).toBe(true)
        expect(formGroup.find('div').hasClass('123')).toBe(true)

        const errDiv = formGroup.find('div.form-group > div')

        expect(errDiv.hasClass('form-control-feedback')).toBe(true)
        expect(errDiv.text()).toBe('ALL GLORY TO THE HYPNOTOAD')
    })
})

describe('Test validation callbacks', () => {
    let formGroup
    let input

    beforeEach(() => {
        formGroup = mount(
            <FormGroup>
                <TestValidationInput />
            </FormGroup>
        )
        input = formGroup.find('input')
    })

    it('should not set the statusMessage to null when statusMessage is not set', () => {
        formGroup.setProps({statusMessage: {}})
        expect(formGroup.state('statusMessage')).toEqual(undefined)
    })

    it('should set the statusMessage with an error on validatonFailure', () => {
        input.simulate('blur')
        expect(formGroup.state('statusMessage')).toEqual({
            status: 'danger',
            text: 'fake-validation-field-failure-error',
        })
    })

    it('should not set the statusMessage with an error on validatonFailure if error message is the same', () => {
        formGroup.setState({
            statusMessage: {
                status: 'fake-status',
                text: 'fake-validation-field-failure-error',
            },
        })
        input.simulate('blur')
        expect(formGroup.state('statusMessage')).toEqual({
            status: 'fake-status',
            text: 'fake-validation-field-failure-error',
        })
    })

    it('should not set the statusMessage to null on validatonSuccess if statusMessage is not set', () => {
        input.simulate('focus')
        expect(formGroup.state('statusMessage')).toEqual(undefined)
    })

    it('should set the statusMessage to null on validatonSuccess', () => {
        formGroup.setState({
            statusMessage: {
                status: 'fake-status',
                text: 'fake-error',
            },
        })
        input.simulate('focus')
        expect(formGroup.state('statusMessage')).toBeNull()
    })

    it('should set the statusMessage to null when a statusMessage prop is set', () => {
        formGroup.setState({
            statusMessage: {
                status: 'fake-status',
                text: 'fake-error',
            },
        })
        formGroup.setProps({statusMessage: {}})
        expect(formGroup.state('statusMessage')).toBeNull()
    })

    it('should call the normalize callback on passed to validationInitialization', () => {
        const testNormalize = jest.fn()
        const testValidate = jest.fn()
        input.simulate('change', {
            normalize: testNormalize,
            validate: testValidate,
        })
        input.simulate('keypress')
        expect(testNormalize).toHaveBeenCalled()
        input.simulate('keydown')
        expect(testValidate).toHaveBeenCalled()
    })
})
