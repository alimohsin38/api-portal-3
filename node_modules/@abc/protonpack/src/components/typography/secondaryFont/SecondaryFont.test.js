import React from 'react'
import {shallow} from 'enzyme'
import SecondaryFont from './'

const prefix = ''

describe('SecondaryFont', () => {
    describe('default component', () => {
        const secondaryFont = shallow(
            <SecondaryFont><p>xyz</p></SecondaryFont>
        )

        it('should be a p', () => {
            expect(secondaryFont.matchesElement(<p>xyz</p>)).toBe(true)
        })

        it(`should have the class .${prefix}font-style__secondary-font`, () => {
            expect(secondaryFont.hasClass(`${prefix}font-style__secondary-font`)).toBe(true)
        })

        it(`should have the class .${prefix}secondary-font`, () => {
            expect(secondaryFont.hasClass(`${prefix}secondary-font`)).toBe(true)
        })
    })

    describe('will handle color prop', () => {
        const styles = [
            'danger',
            'gray-dark',
            'gray-light',
            'primary',
            'secondary',
            'success',
            'tertiary',
            'warning',
            'white',
        ]

        styles.forEach((style) => {
            const secondaryFont = shallow(
                <SecondaryFont color={style}><p>xyz</p></SecondaryFont>
            )
            it(`should have the class .${prefix}font-style--color_${style}`, () => {
                expect(secondaryFont.hasClass(`${prefix}font-style--color_${style}`)).toBe(true)
            })
        })
    })

    describe('will handle size prop', () => {
        const styles = [
            'xs',
            'sm',
            'md',
            'lg',
            'xl',
            'xxl',
        ]

        styles.forEach((style) => {
            const secondaryFont = shallow(
                <SecondaryFont size={style}><p>xyz</p></SecondaryFont>
            )
            it(`should have the class .${prefix}secondary-font--size_${style}`, () => {
                expect(secondaryFont.hasClass(`${prefix}secondary-font--size_${style}`)).toBe(true)
            })
        })
    })

    describe('will handle weight prop', () => {
        const styles = [
            'light',
            'normal',
            'bold',
        ]

        styles.forEach((style) => {
            const secondaryFont = shallow(
                <SecondaryFont weight={style}><p>xyz</p></SecondaryFont>
            )
            it(`should have the class .${prefix}font-style--weight_${style}`, () => {
                expect(secondaryFont.hasClass(`${prefix}font-style--weight_${style}`)).toBe(true)
            })
        })
    })

    describe('will handle alpha prop', () => {
        const secondaryFont = shallow(
            <SecondaryFont alpha={0.4}><p style={{background: 'red'}}>xyz</p></SecondaryFont>
        )

        it('should have a 40% opacity', () => {
            expect(secondaryFont.props().style.opacity).toBe(0.40)
            expect(secondaryFont.props().style.background).toBe('red')
        })
    })

    describe('will handle static text', () => {
        const secondaryFont = shallow(
            <SecondaryFont isStatic><p>xyz</p></SecondaryFont>
        )

        it(`should have the class .${prefix}secondary-font--isStatic`, () => {
            expect(secondaryFont.hasClass(`${prefix}secondary-font--isStatic`)).toBe(true)
        })
    })

    describe('will handle mixed case text', () => {
        const secondaryFont = shallow(
            <SecondaryFont mixedCase><p>xyz</p></SecondaryFont>
        )

        it(`should have the style .${prefix}secondary-font--mixedCase`, () => {
            expect(secondaryFont.hasClass(`${prefix}secondary-font--mixedCase`)).toBe(true)
        })
    })

    describe('will handle all flags', () => {
        const secondaryFont = shallow(
            <SecondaryFont color='gray-light' size='lg' weight='bold' isStatic alpha={0.5}><span>xyz</span></SecondaryFont>
        )

        it('should have the classes', () => {
            expect(secondaryFont.hasClass(`${prefix}font-style--color_gray-light`)).toBe(true)
            expect(secondaryFont.hasClass(`${prefix}secondary-font--size_lg`)).toBe(true)
            expect(secondaryFont.hasClass(`${prefix}secondary-font--isStatic`)).toBe(true)
            expect(secondaryFont.hasClass(`${prefix}font-style--weight_bold`)).toBe(true)
            expect(secondaryFont.props().style.opacity).toBe(0.50)
        })
    })

    describe('will keep child className', () => {
        const secondaryFont = shallow(
            <SecondaryFont color='gray-light' size='lg' alpha={0.65}><span className='test'>xyz</span></SecondaryFont>
        )

        it('should have the className of the child', () => {
            expect(secondaryFont.hasClass(`${prefix}font-style--color_gray-light`)).toBe(true)
            expect(secondaryFont.hasClass(`${prefix}secondary-font--size_lg`)).toBe(true)
            expect(secondaryFont.hasClass('test')).toBe(true)
            expect(secondaryFont.props().style.opacity).toBe(0.65)
        })
    })
})