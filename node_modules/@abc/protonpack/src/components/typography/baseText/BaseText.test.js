import React from 'react'
import {shallow} from 'enzyme'
import BaseText from './'

const prefix = ''

describe('BaseText', () => {
    describe('default component', () => {
        const baseText = shallow(
            <BaseText><p>xyz</p></BaseText>
        )

        it('should be a p', () => {
            expect(baseText.matchesElement(<p>xyz</p>)).toBe(true)
        })

        it(`should have the class .${prefix}font-style__base-font`, () => {
            expect(baseText.hasClass(`${prefix}font-style__base-font`)).toBe(true)
        })

        it(`should have the class .${prefix}base-font`, () => {
            expect(baseText.hasClass(`${prefix}base-font`)).toBe(true)
        })
    })

    describe('will handle color prop', () => {
        const styles = [
            'primary',
            'secondary',
            'tertiary',
            'gray-lightest',
            'gray-lighter',
            'gray-light',
            'gray-dark',
            'white',
            'success',
            'danger',
            'warning',
        ]

        styles.forEach((style) => {
            const baseText = shallow(
                <BaseText color={style}><p>xyz</p></BaseText>
            )
            it(`should have the class .${prefix}font-style--color_${style}`, () => {
                expect(baseText.hasClass(`${prefix}font-style--color_${style}`)).toBe(true)
            })
        })
    })

    describe('will handle size prop', () => {
        const styles = [
            'xs',
            'sm',
            'md',
            'lg',
            'xl',
            'xxl',
        ]

        styles.forEach((style) => {
            const baseText = shallow(
                <BaseText size={style}><p>xyz</p></BaseText>
            )
            it(`should have the class .${prefix}base-font--size_${style}`, () => {
                expect(baseText.hasClass(`${prefix}base-font--size_${style}`)).toBe(true)
            })
        })
    })

    describe('will handle weight prop', () => {
        const styles = [
            'light',
            'normal',
            'medium',
            'bold',
        ]

        styles.forEach((style) => {
            const baseText = shallow(
                <BaseText weight={style}><p>xyz</p></BaseText>
            )
            it(`should have the class .${prefix}font-style--weight_${style}`, () => {
                expect(baseText.hasClass(`${prefix}font-style--weight_${style}`)).toBe(true)
            })
        })
    })

    describe('will handle alpha prop', () => {
        const baseText = shallow(
            <BaseText alpha={0.4}><span style={{background:'red'}}>xyz</span></BaseText>
        )

        it('should have a 40% opacity', () => {
            expect(baseText.props().style.opacity).toBe(0.40)
            expect(baseText.props().style.background).toBe('red')
        })
    })

    describe('will handle all flags', () => {
        const baseText = shallow(
            <BaseText color='gray-light' size='lg' weight='bold' alpha={0.5}><span>xyz</span></BaseText>
        )

        it('should have the classes', () => {
            expect(baseText.hasClass(`${prefix}font-style--color_gray-light`)).toBe(true)
            expect(baseText.hasClass(`${prefix}base-font--size_lg`)).toBe(true)
            expect(baseText.hasClass(`${prefix}font-style--weight_bold`)).toBe(true)
            expect(baseText.props().style.opacity).toBe(0.50)
        })
    })

    describe('will keep child className', () => {
        const baseText = shallow(
            <BaseText color='gray-light' size='lg' alpha={0.65}><span className='test'>xyz</span></BaseText>
        )

        it('should have the className of the child', () => {
            expect(baseText.hasClass(`${prefix}font-style--color_gray-light`)).toBe(true)
            expect(baseText.hasClass(`${prefix}base-font--size_lg`)).toBe(true)
            expect(baseText.hasClass('test')).toBe(true)
            expect(baseText.props().style.opacity).toBe(0.65)
        })
    })
})