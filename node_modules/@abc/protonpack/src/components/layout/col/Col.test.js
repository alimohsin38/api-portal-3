import React from 'react'
import {shallow} from 'enzyme'
import Col from './'

describe('Test render of Col with no passed in attributes', () => {
    const col = shallow(
        <Col>xyz</Col>
    )

    it('Will render to a basic default element with a col-md-auto class', () => {
        expect(col.html()).toBe('<div class="col-md">xyz</div>')
    })
})

describe('Test render of Col with passed in html attributes', () => {
    const col = shallow(
        <Col role='delivery' data-robot='bender' aria-labelledby='planet express'>xyz</Col>
    )

    it('Will render to a basic default and pass along attributes', () => {
        expect(col.html()).toBe('<div role="delivery" data-robot="bender" aria-labelledby="planet express" class="col-md">xyz</div>')
    })
})

describe('Test className', () => {
    const col = shallow(
        <Col className="zoidberg">xyz</Col>
    )

    it('Will it support extra class names passed in', () => {
        expect(col.containsMatchingElement(<div>xyz</div>)).toBe(true)
        expect(col.is('.col-md')).toBe(true)
        expect(col.is('.zoidberg')).toBe(true)
    })
})

describe('Test render of Cols with different widths', () => {
    it('Will be a Resonsive with single values', () => {
        const col = shallow(
            <Col xs={12} sm={11} md={10} lg={9} xl={8} >xyz</Col>
        )

        expect(col.containsMatchingElement(<div>xyz</div>)).toBe(true)
        expect(col.is('.col-12')).toBe(true)
        expect(col.is('.col-sm-11')).toBe(true)
        expect(col.is('.col-md-10')).toBe(true)
        expect(col.is('.col-lg-9')).toBe(true)
        expect(col.is('.col-xl-8')).toBe(true)
    })

    it('Will be a Resonsive without values', () => {
        const col = shallow(
            <Col xs sm md lg xl>xyz</Col>
        )

        expect(col.containsMatchingElement(<div>xyz</div>)).toBe(true)
        expect(col.is('.col')).toBe(true)
        expect(col.is('.col-sm')).toBe(true)
        expect(col.is('.col-md')).toBe(true)
        expect(col.is('.col-lg')).toBe(true)
        expect(col.is('.col-xl')).toBe(true)
    })

    it('Will be a Resonsive with mixed values', () => {
        const col = shallow(
            <Col xs={12} sm md={10} lg={9} xl >xyz</Col>
        )

        expect(col.containsMatchingElement(<div>xyz</div>)).toBe(true)
        expect(col.is('.col-12')).toBe(true)
        expect(col.is('.col-sm')).toBe(true)
        expect(col.is('.col-md-10')).toBe(true)
        expect(col.is('.col-lg-9')).toBe(true)
        expect(col.is('.col-xl')).toBe(true)
    })
})

describe('Test render of Col with offset attributes', () => {
    it('Will be a take offset parameters', () => {
        const col = shallow(
            <Col xs={{col: 1, offset: 3}} md={{offset: 5}} lg xl={6}>xyz</Col>
        )

        expect(col.containsMatchingElement(<div>xyz</div>)).toBe(true)
        expect(col.is('.offset-3')).toBe(true)
        expect(col.is('.col-1')).toBe(true)
        expect(col.is('.offset-md-5')).toBe(true)
        expect(col.is('.col-lg')).toBe(true)
        expect(col.is('.col-xl-6')).toBe(true)
    })
})

describe('Test render of Col with push/pull attributes', () => {
    it('Will be a take push parameters', () => {
        const col = shallow(
            <Col xs={{col: 1, push: 3}} md={{push: 5}} lg xl={6}>xyz</Col>
        )

        expect(col.containsMatchingElement(<div>xyz</div>)).toBe(true)
        expect(col.is('.push-3')).toBe(true)
        expect(col.is('.col-1')).toBe(true)
        expect(col.is('.push-md-5')).toBe(true)
        expect(col.is('.col-lg')).toBe(true)
        expect(col.is('.col-xl-6')).toBe(true)
    })

    it('Will be a take pull parameters', () => {
        const col = shallow(
            <Col xs={{col: 1, pull: 3}} md={{pull: 5}} lg xl={6}>xyz</Col>
        )

        expect(col.containsMatchingElement(<div>xyz</div>)).toBe(true)
        expect(col.is('.pull-3')).toBe(true)
        expect(col.is('.col-1')).toBe(true)
        expect(col.is('.pull-md-5')).toBe(true)
        expect(col.is('.col-lg')).toBe(true)
        expect(col.is('.col-xl-6')).toBe(true)
    })
})

describe('Test render of Col with vertical attributes', () => {
    it('Will allow alignSelf alignments to be passed in', () => {
        const col = shallow(
            <Col xs={{col: 2, alignSelf: 'start'}} md lg={{col: 4, alignSelf: 'center'}} xl={{col: 9, alignSelf: 'end'}}>xyz</Col>
        )

        expect(col.is('.col-2')).toBe(true)
        expect(col.is('.align-self-start')).toBe(true)
        expect(col.is('.col-md')).toBe(true)
        expect(col.is('.col-lg-4')).toBe(true)
        expect(col.is('.align-self-lg-center')).toBe(true)
        expect(col.is('.col-xl-9')).toBe(true)
        expect(col.is('.align-self-xl-end'))
    })

    it('Will allow alignItems alignments to be passed in', () => {
        const col = shallow(
            <Col xs={{col: 2, alignItems: 'start'}} md lg={{col: 4, alignItems: 'center'}} xl={{col: 9, alignItems: 'end'}}>xyz</Col>
        )

        expect(col.is('.col-2')).toBe(true)
        expect(col.is('.align-items-start')).toBe(true)
        expect(col.is('.col-md')).toBe(true)
        expect(col.is('.col-lg-4')).toBe(true)
        expect(col.is('.align-items-lg-center')).toBe(true)
        expect(col.is('.col-xl-9')).toBe(true)
        expect(col.is('.align-items-xl-end'))
    })

    it('Will allow justifyContent alignments to be passed in', () => {
        const col = shallow(
            <Col xs={{col: 2, justifyContent: 'start'}} md lg={{col: 4, justifyContent: 'center'}} xl={{col: 9, justifyContent: 'end'}}>xyz</Col>
        )

        expect(col.is('.col-2')).toBe(true)
        expect(col.is('.justify-content-start')).toBe(true)
        expect(col.is('.col-md')).toBe(true)
        expect(col.is('.col-lg-4')).toBe(true)
        expect(col.is('.justify-content-lg-center')).toBe(true)
        expect(col.is('.col-xl-9')).toBe(true)
        expect(col.is('.justify-content-xl-end'))
    })
})