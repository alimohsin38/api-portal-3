import React from 'react'
import {shallow} from 'enzyme'
import Row from './'

describe('Test render of Row with no attributes', () => {
    const row = shallow(
        <Row>xyz</Row>
    )

    it('row: Will have the class .row', () => {
        expect(row.containsMatchingElement(<div>xyz</div>)).toBe(true)
        expect(row.is('.row')).toBe(true)
    })
})

describe('Test render of Row with passed in html attributes', () => {
    const row = shallow(
        <Row role='delivery' data-robot='bender' aria-labelledby='planet express'>xyz</Row>
    )

    it('Will render to a basic default and pass along attributes', () => {
        expect(row.html()).toBe('<div role="delivery" data-robot="bender" aria-labelledby="planet express" class="row">xyz</div>')
    })
})

describe('Test className', () => {
    const row = shallow(
        <Row className="zoidberg">xyz</Row>
    )

    it('Will it support extra class names passed in', () => {
        expect(row.containsMatchingElement(<div>xyz</div>)).toBe(true)
        expect(row.is('.row')).toBe(true)
        expect(row.is('.zoidberg')).toBe(true)
    })
})

describe('Test render of Row with vertical attributes', () => {
    it('Will allow justifyContent to be passed in', () => {
        const row = shallow(
            <Row xs={{justifyContent: 'start'}} lg={{justifyContent: 'end'}}>xyz</Row>
        )

        expect(row.is('.row')).toBe(true)
        expect(row.is('.justify-content-start'))
        expect(row.is('.justify-content-lg-end'))
    })
})

describe('Test render of Row with horizontal attributes', () => {
    it('Will allow alignItems to be passed in', () => {
        const row = shallow(
            <Row xs={{alignItems: 'start'}} lg={{alignItems: 'end'}}>xyz</Row>
        )

        expect(row.is('.row')).toBe(true)
        expect(row.is('.align-items-start'))
        expect(row.is('.align-items-lg-end'))
    })
})