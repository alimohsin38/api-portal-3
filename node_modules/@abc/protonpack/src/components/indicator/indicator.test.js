import React from 'react'
import {shallow} from 'enzyme'
import Indicator from './'
import Icon from '@abc/quarkicons'

describe('Indicator', () => {
    describe('default configuration', () => {
        const indicator = shallow(
            <Indicator type='close' />
        )

        it('should be a div with the classes indicator and indicator--type_close', () => {
            expect(indicator.type()).toBe('div')
            expect(indicator.hasClass('indicator')).toBe(true)
            expect(indicator.hasClass('indicator--type_close')).toBe(true)
        })

        it('should have the default data-abc-id', () => {
            expect(indicator.prop('data-abc-id')).toBe('indicator')
        })

        it('should have <Icon type=\'x-heavy\'/> child', () => {
            expect(indicator.containsMatchingElement(<Icon type='x-heavy' />)).toBe(true)
        })
    })

    describe('should add className', () => {
        const indicator = shallow(
            <Indicator type='close' className='test' />
        )

        it('should have default classes and passed in class', () => {
            expect(indicator.hasClass('indicator')).toBe(true)
            expect(indicator.hasClass('indicator--type_close')).toBe(true)
            expect(indicator.hasClass('test')).toBe(true)
        })
    })

    describe('disabled', () => {
        const indicator = shallow(
            <Indicator type='close' disabled />
        )

        it('should be a div with the classes indicator, indicator--type_close, and indicator--disabled', () => {
            expect(indicator.type()).toBe('div')
            expect(indicator.hasClass('indicator')).toBe(true)
            expect(indicator.hasClass('indicator--type_close')).toBe(true)
            expect(indicator.hasClass('indicator--disabled')).toBe(true)
        })

        it('should have the default data-abc-id', () => {
            expect(indicator.prop('data-abc-id')).toBe('indicator')
        })

        it('should have <Icon type=\'x-heavy\'/> child', () => {
            expect(indicator.containsMatchingElement(<Icon type='x-heavy' />)).toBe(true)
        })
    })

    describe('will handle styleType prop', () => {
        const types = [
            'danger',
            'info',
            'primary',
            'success',
            'warning',
        ]

        types.forEach((type) => {
            const indicator = shallow(
                <Indicator type="close" styleType={type} />
            )
            it(`should have the class .indicator--style_${type}`, () => {
                expect(indicator.hasClass(`indicator--style_${type}`)).toBe(true)
            })
        })
    })

    describe('will handle type prop', () => {
        const types = [
            'add',
            'alert',
            'cancel',
            'close',
            'confirm',
            'error',
            'filter',
            'next',
            'select-date',
            'remove',
            'timer',
            'edit',
            'notes',
        ]

        types.forEach((type) => {
            const indicator = shallow(
                <Indicator type={type} />
            )
            it(`should have the class .indicator--type_${type}`, () => {
                expect(indicator.hasClass(`indicator--type_${type}`)).toBe(true)
            })
        })
    })

    describe('will not create Icons unless they are whitelisted', () => {
        console.error = jest.fn()

        const indicator = shallow(
            <Indicator type='fake-icon-name' />
        )

        it('should fire a console error', () => {
            expect(console.error).toHaveBeenCalled()
        })

        it('should have the class .indicator--type_fake-icon-name', () => {
            expect(indicator.hasClass('indicator--type_fake-icon-name')).toBe(true)
        })
        it('should have <Icon type="" /> child', () => {
            expect(indicator.containsMatchingElement(<Icon type="" />)).toBe(true)
        })
    })
})
