import React from 'react'
import {mount, shallow} from 'enzyme'
import ModalOrchestrator from './'
import {default as Modal} from '../'
import range from 'lodash/range'

const testChildrenCount = 6
const testChildren = range(testChildrenCount)
    .map(index => <Modal key={index} toggle={() => true}>Test Modal {index}</Modal>)

const nullChild = () => null

describe('ModalOrchestrator', () => {
    describe('Default Component', () => {
        const wrapper = shallow(
            <ModalOrchestrator isOpen={false} toggle={() => true}>
                {testChildren}
            </ModalOrchestrator>
        )

        it('should have the prop data-abc-id equal to "modal-orchestrator"', () => {
            expect(wrapper.prop('data-abc-id')).toEqual('modal-orchestrator')
        })
    })

    describe('Default component with a null child', () => {
        it('should render a modal orchestrator without a child', () => {
            const wrapper = shallow(
                <ModalOrchestrator isOpen={false} children={[null]}></ModalOrchestrator>
            )
            expect(wrapper.html()).toBe('<div data-abc-id="modal-orchestrator"></div>')
        })
    })

    describe('Test Props/State', () => {
        let wrapper

        beforeEach(() => {
            wrapper = mount(
                <ModalOrchestrator isOpen={false} currentIndex="1" toggle={() => true}>
                    {testChildren}
                </ModalOrchestrator>
            )
        })

        it('should not change state:currentIndex when props:currentIndex is negative', () => {
            wrapper.setState({currentIndex: 2})
            wrapper.setProps({currentIndex: -42})
            expect(wrapper.state('currentIndex')).toEqual(2)
        })

        it('should change state:currentIndex to new length of children when props:children changes to fewer children than currentIndex', () => {
            wrapper.setProps({children: (<Modal toggle={() => true} />)})
            expect(wrapper.state('currentIndex')).toEqual(0)
        })

        it('should change state:currentIndex to -1 when props:children changes to null', () => {
            wrapper.setProps({children: null})
            expect(wrapper.state('currentIndex')).toEqual(-1)
        })

        it('should change state:currentIndex to -1 when props:children is passed a null child', () => {
            wrapper.setProps({children: nullChild})
            expect(wrapper.state('currentIndex')).toEqual(-1)
        })
    })
})
