import React, {Component} from 'react'
import PropTypes from 'prop-types'
import {transitionDirections as modalTransitionDirections, transitionTypes as modalTransitionTypes} from '../.'

export default class ModalOrchestrator extends Component {
    constructor(props) {
        super(props)

        this.state = {
            currentIndex: Math.min(Math.floor(parseInt(props.currentIndex, 10)), React.Children.count(props.children) - 1),
        }
    }

    componentWillReceiveProps({children, currentIndex}) {
        let numberOfChildren = React.Children.count(children)
        const newState = {}

        if (children) {
            numberOfChildren = React.Children.count(children)

            if (this.state.currentIndex >= numberOfChildren) {
                newState.currentIndex = numberOfChildren - 1
            }
        }

        if (parseInt(currentIndex, 10) >= 0) {
            newState.currentIndex = Math.min(numberOfChildren - 1, Math.floor(parseInt(currentIndex, 10)))
        }

        this.setState(newState)
    }

    componentDidUpdate() {
        const {isOpen} = this.props
        document.body.classList.toggle('modal-orchestrator-open', isOpen)
    }

    orchestrateChildren() {
        const {
            children,
            isOpen,
            toggle,
            transitionDirection,
            transitionType,
        } = this.props
        return React.Children.map(children, (child, index) => {
            if (child) {
                const isContainerOpen = this.state.currentIndex >= index && isOpen
                return React.cloneElement(child, {
                    key: `modal-orchestrator-child-${index}`,
                    isOpen: isContainerOpen,
                    toggle,
                    transitionDirection,
                    transitionType,
                })
            }
        })
    }

    render() {
        const {['data-abc-id']: dataAbcId} = this.props
        const abcId = dataAbcId || 'modal-orchestrator'

        return (
            <div data-abc-id={abcId}>
                {this.orchestrateChildren()}
            </div>
        )
    }
}

ModalOrchestrator.propTypes = {
    children: PropTypes.oneOfType([
        PropTypes.node,
        PropTypes.arrayOf(PropTypes.node),
    ]),
    currentIndex: PropTypes.oneOfType([
        PropTypes.number,
        PropTypes.string,
    ]),
    isOpen: PropTypes.bool.isRequired,
    toggle: PropTypes.func.isRequired,
    transitionType: PropTypes.oneOf(
        Object.keys(modalTransitionTypes).map(
            key => modalTransitionTypes[key]
        )
    ),
    transitionDirection: PropTypes.oneOf(
        Object.keys(modalTransitionDirections)
            .map(key => modalTransitionDirections[key])
    ),
}

ModalOrchestrator.defaultProps = {
    transitionDirection: 'left',
    transitionType: 'flip',
}
