import React, {Component} from 'react'
import PropTypes from 'prop-types'
import {Button, Modal, ModalOrchestrator} from '../../../../export'

export default class ModalOrchestratorExample extends Component {
    constructor(props) {
        super(props)

        this.state = {
            currentIndex: 0,
            isOpen: false,
            modals: [],
            modalComponents: [],
        }

        this.addModal = this.addModal.bind(this)
        this.toggleOpen = this.toggleOpen.bind(this)
        this.buildModals = this.buildModals.bind(this)
        this.handleModalClosed = this.handleModalClosed.bind(this)
        this.handleModalOpened = this.handleModalOpened.bind(this)
    }

    handleModalClosed(modalIndex) {
        const isOpen = this.state.modals.length > 1 && this.state.isOpen
        if (!this.state.isOpen || modalIndex > this.state.modals.length - 2) {
            this.setState({
                currentIndex: isOpen ? Math.floor(this.state.modals.length - 2, this.state.currentIndex) : 0,
                isOpen: isOpen ? this.state.modals.length > 1 : false,
                modals: isOpen ? [
                    ...this.state.modals.slice(0, modalIndex),
                ] : [],
                modalComponents: isOpen ? [
                    ...this.state.modalComponents.slice(0, modalIndex),
                ] : [],
            })
        }
    }

    handleModalOpened() {

    }

    goBack() {
        this.setState({
            currentIndex: this.state.currentIndex - 1,
            isOpen: this.state.currentIndex > 0,
        })
    }

    addModal() {
        const modals = [
            ...this.state.modals,
            {title: `Modal ${this.state.modals.length} Title`},
        ]
        this.setState({
            currentIndex: modals.length - 1,
            isOpen: true,
            modals,
            modalComponents: this.buildModals(modals),
        })
    }

    shouldComponentUpdate(nextProps, nextState) {
        let shouldUpdate = true
        if (nextState.modals.length < this.state.modals.length || nextState.modalComponents.length < this.state.modalComponents.length) {
            shouldUpdate = false
        }
        return shouldUpdate
    }

    buildModals(modals) {
        const modalComponents = [...this.state.modalComponents]
        modals.forEach((modalProps, modalIndex) => {
            if (modalProps && modalIndex >= modalComponents.length) {
                modalComponents.push((
                    <Modal
                        key={`modal_${modalIndex}`}
                        banner={{
                            title: `Dynamic Modal ${modalIndex}`,
                            indicator: 'filter',
                        }}
                        buttons={[
                            {
                                text: 'Back',
                                props: {
                                    btnStyle: 'primary',
                                    onClick: () => this.goBack(),
                                },
                            },
                            {
                                text: 'Add Another Modal',
                                props: {
                                    onClick: this.addModal,
                                },
                            },
                        ]}
                        toggle={() => 'This toggle will be overwritten'}
                        {...modalProps}
                        onClosed={() => this.handleModalClosed(modalIndex)}
                        onOpened={() => this.handleModalOpened(modalIndex)}
                    >
                        <div>Validate modal is not regenerated based on random number</div>
                        <div>{Math.random()}</div>
                    </Modal>
                ))
            }
        })
        return modalComponents
    }

    toggleOpen() {
        if (this.state.isOpen) {
            this.setState({
                isOpen: false,
            })
        } else {
            this.addModal()
        }
    }

    render() {
        const props = {
            children: this.state.modalComponents,
            currentIndex: this.state.currentIndex,
            isOpen: this.state.isOpen,
            toggle: this.toggleOpen,
            transitionType: 'flip',
        }

        return (
            <div>
                <Button
                    btnStyle="primary"
                    block
                    onClick={() => this.addModal()}
                >
                    Dynamic Modal Orchestrator
                </Button>
                <ModalOrchestrator {...props} />
            </div>
        )
    }
}

ModalOrchestratorExample.propTypes = {
    className: PropTypes.string,
}