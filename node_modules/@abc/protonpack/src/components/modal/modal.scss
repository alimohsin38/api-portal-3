@import '../../styles/config/_grid.scss';

$modalContentPadding: 2rem;
$modalTransitionDuration: 300ms;
$modalAnimationDuration: 600ms;
$modalBodyPaddingTopBottom: 2rem;

:export {
    // sass-lint:disable-block no-misspelled-properties
    modalAnimationDuration: $modalAnimationDuration;
    modalTransitionDuration: $modalTransitionDuration;
}

body.modal-open,
body.modal-orchestrator-open {
    overflow: hidden;
    padding-left: 0 !important;
    padding-right: var(--scrollbarWidth) !important;

    &[dir="rtl"] {
        padding-left: var(--scrollbarWidth) !important;
        padding-right: 0 !important;
    }

    > .modal-wrapper {
        position: static !important;
        overflow: hidden;

        .modal-backdrop {
            display: none;
        }
    }
}

// Modal Fade Animation

$modalFade_modalDialogOpacityHide: 0;
$modalFade_modalDialogOpacityShow: 1;
$modalFade_modalDialogTransformHide: translate(0, 0);
$modalFade_modalDialogTransformShow: translate(0, 0);
$modalFade_modalDialogTransitionDelayShow: $modalTransitionDuration, 0ms;
$modalFade_modalDialogTransitionDelayHide: 0ms, $modalTransitionDuration;
$modalFade_modalDialogTransitionDuration: $modalTransitionDuration, 0ms;
$modalFade_modalDialogTransitionProperties: opacity, visibility;
$modalFade_modalDialogTransitionTimingIn: ease-out, linear;
$modalFade_modalDialogTransitionTimingOut: ease-in, linear;

@mixin modalFade() {
    --modalDialogOpacityHide: $modalFade_modalDialogOpacityHide;
    --modalDialogOpacityShow: $modalFade_modalDialogOpacityShow;
    --modalDialogTransformHide: $modalFade_modalDialogTransformHide;
    --modalDialogTransformShow: $modalFade_modalDialogTransformShow;
    --modalDialogTransitionDelayHide: $modalFade_modalDialogTransitionDelayHide;
    --modalDialogTransitionDelayShow: $modalFade_modalDialogTransitionDelayShow;
    --modalDialogTransitionDuration: $modalFade_modalDialogTransitionDuration;
    --modalDialogTransitionProperties: $modalFade_modalDialogTransitionProperties;
    --modalDialogTransitionTimingIn: $modalFade_modalDialogTransitionTimingIn;
    --modalDialogTransitionTimingOut: $modalFade_modalDialogTransitionTimingOut;
}

// Modal Flip Animation

$modalFlip_modalDialogOpacityHide: 1;
$modalFlip_modalDialogOpacityShow: 1;
$modalFlip_modalDialogTransformHide_Left: rotateY(90deg);
$modalFlip_modalDialogTransformHide_Right: rotateY(-90deg);
$modalFlip_modalDialogTransformShow: rotateY(0deg);
$modalFlip_modalDialogTransitionDelayHide: 0ms, $modalTransitionDuration;
$modalFlip_modalDialogTransitionDelayShow: $modalTransitionDuration, 0ms;
$modalFlip_modalDialogTransitionDuration: $modalTransitionDuration, 0ms;
$modalFlip_modalDialogTransitionProperties: transform, visibility;
$modalFlip_modalDialogTransitionTimingIn: cubic-bezier(.25, 0, 1, 1), linear;
$modalFlip_modalDialogTransitionTimingOut: cubic-bezier(0, 0, .75, 1), linear;

@mixin modalFlip() {
    --modalDialogOpacityHide: $modalFlip_modalDialogOpacityHide;
    --modalDialogOpacityShow: $modalFlip_modalDialogOpacityShow;
    --modalDialogTransformHide: $modalFlip_modalDialogTransformHide_Left;
    --modalDialogTransformShow: $modalFlip_modalDialogTransformShow;
    --modalDialogTransitionDelayHide: $modalFlip_modalDialogTransitionDelayHide;
    --modalDialogTransitionDelayShow: $modalFlip_modalDialogTransitionDelayShow;
    --modalDialogTransitionDuration: $modalFlip_modalDialogTransitionDuration;
    --modalDialogTransitionProperties: $modalFlip_modalDialogTransitionProperties;
    --modalDialogTransitionTimingIn: $modalFlip_modalDialogTransitionTimingIn;
    --modalDialogTransitionTimingOut: $modalFlip_modalDialogTransitionTimingOut;
}

@mixin modalFlipLeft() {
    --modalDialogTransformHide: $modalFlip_modalDialogTransformHide_Left;
}

@mixin modalFlipRight() {
    --modalDialogTransformHide: $modalFlip_modalDialogTransformHide_Right;
    --modalDialogTransitionTimingIn: $modalFlip_modalDialogTransitionTimingOut;
    --modalDialogTransitionTimingOut: $modalFlip_modalDialogTransitionTimingIn;
}

// Modal Slide Animation

$modalSlide_modalDialogOpacityHide: 1;
$modalSlide_modalDialogOpacityShow: 1;
$modalSlide_modalDialogTransformHide_Left: translate(100%, 0%);
$modalSlide_modalDialogTransformHide_Right: translate(-100%, 0%);
$modalSlide_modalDialogTransformShow: translate(0%, 0%);
$modalSlide_modalDialogTransitionDelayShow: $modalTransitionDuration, 0ms;
$modalSlide_modalDialogTransitionDelayHide: 0ms, $modalTransitionDuration;
$modalSlide_modalDialogTransitionDuration: $modalTransitionDuration, 0ms;
$modalSlide_modalDialogTransitionProperties: transform, visibility;
$modalSlide_modalDialogTransitionTimingIn: ease-in, linear;
$modalSlide_modalDialogTransitionTimingOut: ease-out, linear;

@mixin modalSlide() {
    --modalDialogOpacityHide: $modalSlide_modalDialogOpacityHide;
    --modalDialogOpacityShow: $modalSlide_modalDialogOpacityShow;
    --modalDialogTransformHide: $modalSlide_modalDialogTransformHide_Left;
    --modalDialogTransformShow: $modalSlide_modalDialogTransformShow;
    --modalDialogTransitionDelayHide: $modalSlide_modalDialogTransitionDelayHide;
    --modalDialogTransitionDelayShow: $modalSlide_modalDialogTransitionDelayShow;
    --modalDialogTransitionDuration: $modalSlide_modalDialogTransitionDuration;
    --modalDialogTransitionProperties: $modalSlide_modalDialogTransitionProperties;
    --modalDialogTransitionTimingIn: $modalSlide_modalDialogTransitionTimingIn;
    --modalDialogTransitionTimingOut: $modalSlide_modalDialogTransitionTimingOut;
}

@mixin modalSlideLeft() {
    --modalDialogTransformHide: $modalSlide_modalDialogTransformHide_Left;
}

@mixin modalSlideRight() {
    --modalDialogTransformHide: $modalSlide_modalDialogTransformHide_Right;
    --modalDialogTransitionTimingIn: $modalSlide_modalDialogTransitionTimingOut;
    --modalDialogTransitionTimingOut: $modalSlide_modalDialogTransitionTimingIn;
}

.modal.fade .modal-dialog {
    // This prevents the slide transition from doing a vertical slide on enter
    transform: translate(100%, 0);

    @media screen and (min-width: map-get($grid-breakpoints, 'md')) {
        // This prevents the flip transition from doing an extra flip on enter
        transform: translate(0, 0) rotateY(90deg);
    }
}

.modal-wrapper {
    @include modalSlide()
    @include modalSlideLeft();

    &.opened {
        @include modalSlideRight();
    }

    @media screen and (min-width: map-get($grid-breakpoints, 'md')) {
        @include modalFade();

        &.opened {
            @include modalFade();
        }
    }

    .modal {
        background-color: transparent;
        display: block;
        opacity: 1;
        overflow: hidden;
        perspective: 150vw;
        transition-delay: 0ms, $modalTransitionDuration;
        transition-duration: $modalTransitionDuration, 0ms;
        transition-property: background-color, visibility;
        transition-timing-function: ease-in-out;
        visibility: hidden;

        @media screen and (min-width: map-get($grid-breakpoints, 'md')) {
            background-color: rgba(0, 0, 0, 0);
            visibility: hidden;
        }

        .modal-backdrop {
            background-color: rgba(255, 255, 255, 0);
            transition-duration: 0;
        }

        .modal-dialog {
            align-items: flex-start;
            backface-visibility: hidden;
            background: none;
            bottom: 0;
            color: var(--modalText);
            display: flex;
            justify-content: start;
            left: 0;
            margin: 0;
            max-height: 100%;
            max-width: 100%;
            opacity: var(--modalDialogOpacityHide);
            position: absolute;
            right: 0;
            top: 0;
            transform-style: preserve-3d;
            transform: var(--modalDialogTransformHide);
            transition-delay: var(--modalDialogTransitionDelayHide);
            transition-duration: var(--modalDialogTransitionDuration);
            transition-property: var(--modalDialogTransitionProperties);
            transition-timing-function: var(--modalDialogTransitionTimingOut);
            width: 100%;
            visibility: hidden;

            > * {
                pointer-events: auto;
            }
        }

        .modal-content {
            backface-visibility: hidden;
            background: var(--modalBackground);
            box-shadow: 0 2px 10px 0 var(--modalShadow);
            border-radius: var(--modalBorderRadius);
            border: 0;
            display: flex;
            left: 50%;
            max-width: 100vw;
            max-height: 100vh;
            min-width: 100vw;
            min-height: 100vh;
            overflow: inherit;
            top: 50%;
            transform: translate(-50%, -50%);
            transform-style: preserve-3d;
            width: auto;

            @media screen and (min-width: map-get($grid-breakpoints, 'md')) {
                max-width: 46.25rem;
                min-width: 0;
                min-height: 25vh;
            }

            @media screen and (min-height: 36.25em) {
                max-height: 36.25rem;
            }
        }

        .modal-body {
            align-items: center;
            display: flex;
            flex: 1 1 auto;
            flex-direction: column;
            justify-content: flex-start;
            padding: 0 $modalContentPadding;
            position: relative;
            overflow: visible;

            &__scrollable-content {
                outline: none;
                overflow-x: hidden;
                overflow-y: auto;
                -ms-overflow-style: none;

                &::-webkit-scrollbar {
                    display: none;
                }

                &:focus {
                    outline: none;
                }
            }

            &::after {
                background-attachment: scroll, scroll;
                background-image: linear-gradient(rgba(0, 0, 0, 0), rgba(0, 0, 0, 0)), linear-gradient(rgba(0, 0, 0, 0), rgba(0, 0, 0, 0));
                background-position: 0 0, 0 100%;
                background-repeat: no-repeat, no-repeat;
                background-size: 100% .25rem, 100% .125rem;
                bottom: 0;
                content: '';
                left: 0;
                pointer-events: none;
                position: absolute;
                right: 0;
                top: 0;
                transition: background-image 500ms ease-in-out, background-size 500ms ease-in-out;
            }

            &__header {
                padding-top: 0;
            }
        }

        .modal-header,
        .modal-footer {
            flex: 0 0 auto;
            border: 0;
        }

        .modal-header {
            align-items: flex-start;
            flex-direction: row;
            justify-content: flex-end;
            padding: 1.5rem $modalContentPadding .3125rem;

            @media not all and (hover: none) {
                > i:hover {
                    cursor: pointer;
                }
            }

            &--overlay {
                left: 0;
                position: absolute;
                right: 0;
                top: 0;
                z-index: 10;
            }
        }

        .modal-footer {
            align-items: flex-end;
            justify-content: center;
            padding: 0 $modalContentPadding 2.5rem;
            flex-wrap: wrap;
        }

        .modal--basic__footer {
            display: flex;
            padding-bottom: 1.25rem;
            min-width: 1.25rem;
            margin-top: 1.4375rem;

            & > :first-child {
                margin-right: .5rem;
            }

            & > :last-child {
                margin-top: 0;
                margin-left: .5rem;
            }
        }

        .modal-body--scrollable {
            background-color: var(--modalBackground);
            padding: 0;

            &::after {
                background-image: linear-gradient(var(--modalInnerShadow), rgba(0, 0, 0, 0)), linear-gradient(rgba(0, 0, 0, 0), var(--modalInnerShadow));
            }

            > .modal-body__scrollable-content {
                align-self: stretch;
                box-sizing: content-box;
                overflow-y: scroll;
                width: 100%;
            }
        }
    }

    &.opening,
    &.opened {
        .modal {
            @media screen and (min-width: map-get($grid-breakpoints, 'md')) {
                background-color: rgba(0, 0, 0, .5);
                transition-delay: 0ms, 0ms;
                visibility: visible;
            }

            .modal-dialog {
                opacity: var(--modalDialogOpacityShow);
                transform: var(--modalDialogTransformShow);
                transition-delay: 0s, 0s;
                transition-timing-function: var(--modalDialogTransitionTimingOut);
                visibility: visible;
            }
        }
    }

    &:last-child {
        @include modalSlideLeft();

        &.opened {
            @include modalSlideLeft();

            .modal {
                .modal-dialog {
                    transition-timing-function: var(--modalDialogTransitionTimingIn);
                }
            }
        }

        @media screen and (min-width: map-get($grid-breakpoints, 'md')) {
            @include modalFade();

            &.opened {
                @include modalFade();
            }
        }

        &.closing {
            .modal {
                .modal-dialog {
                    transition-delay: var(--modalDialogTransitionDelayHide);
                    transition-timing-function: var(--modalDialogTransitionTimingIn);
                }
            }
        }
    }

    &:not(:last-child) {
        @include modalSlideRight();

        .modal {
            .modal-dialog {
                opacity: var(--modalDialogOpacityHide);
                transform: var(--modalDialogTransformHide);
            }
        }

        &.closing {
            .modal {
                transition-delay: 0s, $modalTransitionDuration !important;

                .modal-dialog {
                    transition-delay: 0s, 0s !important;
                }
            }
        }
    }

    ~ .modal-wrapper {
        @include modalSlideLeft();

        &.opened {
            @include modalSlideLeft();
        }

        @media screen and (min-width: map-get($grid-breakpoints, 'md')) {
            @include modalFade();

            &.opened {
                @include modalFade();
            }
        }

        .modal {
            background-color: transparent !important;
            transition-duration: 0ms;
        }

        &:last-child {
            &.opening {
                .modal {
                    .modal-dialog {
                        transition-delay: var(--modalDialogTransitionDelayShow);
                    }
                }
            }
        }

        &:not(:last-child) {
            @include modalSlideRight();

            .modal {
                visibility: hidden;
            }
        }
    }

    &.modal-transition-type-fade {
        @media screen and (min-width: map-get($grid-breakpoints, 'md')) {
            @include modalFade();

            ~ .modal-wrapper {
                @include modalFade();
            }
        }
    }

    // Modal Flip Animation

    &.modal-transition-type-flip {
        @media screen and (min-width: map-get($grid-breakpoints, 'md')) {
            @include modalFade();

            &.opened {
                @include modalFlip();
            }

            ~ .modal-wrapper {
                @include modalFlip();

                &.closing {
                    @include modalFlip();
                }
            }
        }

        &.modal-transition-direction-left {
            @media screen and (min-width: map-get($grid-breakpoints, 'md')) {
                @include modalFlipLeft();

                &.opened {
                    @include modalFlipRight();
                }

                &:not(:last-child) {
                    &.opened {
                        @include modalFlipRight();
                    }
                }

                ~ .modal-wrapper {
                    @include modalFlipLeft();

                    &.closing {
                        @include modalFlip();
                        @include modalFlipLeft();
                    }

                    &.opened {
                        @include modalFlipRight();
                    }
                }

                &.closing {
                    @include modalFade();

                    ~ .modal-wrapper {

                        &.closing {
                            @include modalFade();
                        }
                    }
                }
            }
        }

        &.modal-transition-direction-right {
            @media screen and (min-width: map-get($grid-breakpoints, 'md')) {
                @include modalFlipRight();

                &.opened {
                    @include modalFlipLeft();
                }

                &:not(:last-child) {
                    &.opened {
                        @include modalFlipLeft();
                    }
                }

                ~ .modal-wrapper {
                    @include modalFlipRight();

                    &.closing {
                        @include modalFlip();
                        @include modalFlipRight();
                    }

                    &.opened {
                        @include modalFlipLeft();
                    }
                }

                &.closing {
                    @include modalFade();

                    ~ .modal-wrapper {

                        &.closing {
                            @include modalFade();
                        }
                    }
                }
            }
        }
    }

    // Modal Slide Animation

    &.modal-transition-type-slide {
        @media screen and (min-width: map-get($grid-breakpoints, 'md')) {
            @include modalFade();

            &.opened {
                @include modalSlide();
            }

            ~ .modal-wrapper {
                @include modalSlide();

                &.closing {
                    @include modalSlide();
                }
            }
        }

        &.modal-transition-direction-left {
            @media screen and (min-width: map-get($grid-breakpoints, 'md')) {
                @include modalSlideLeft();

                &.opened {
                    @include modalSlideRight();
                }

                &:not(:last-child) {
                    &.opened {
                        @include modalSlideRight();
                    }
                }

                ~ .modal-wrapper {
                    @include modalSlideLeft();

                    &.closing {
                        @include modalSlide();
                        @include modalSlideLeft();
                    }

                    &.opened {
                        @include modalSlideRight();
                    }
                }

                &.closing {
                    @include modalFade();

                    ~ .modal-wrapper {

                        &.closing {
                            @include modalFade();
                        }
                    }
                }
            }
        }

        &.modal-transition-direction-right {
            @media screen and (min-width: map-get($grid-breakpoints, 'md')) {
                @include modalSlideRight();

                &.opened {
                    @include modalSlideLeft();
                }

                &:not(:last-child) {
                    &.opened {
                        @include modalSlideLeft();
                    }
                }

                ~ .modal-wrapper {
                    @include modalSlideRight();

                    &.closing {
                        @include modalSlide();
                        @include modalSlideRight();
                    }

                    &.opened {
                        @include modalSlideLeft();
                    }
                }

                &.closing {
                    @include modalFade();

                    ~ .modal-wrapper {

                        &.closing {
                            @include modalFade();
                        }
                    }
                }
            }
        }
    }
}
