import React from 'react'
import {shallow} from 'enzyme'
import {Divider} from './'
import Col from '../layout/col'

describe('Divider', () => {
    describe('Default', () => {
        const divider = shallow(<Divider />)

        it('should be a Row', () => {
            expect(divider.name()).toEqual('Row')
        })
        it('should contain a Col', () => {
            expect(divider.contains(<Col />))
        })
        it('should contain an hr', () => {
            expect(divider.contains(<hr className="divider-border divider-border--direction_horizontal divider-border--color_gray-lighter" data-abc-id="borderDivider"/>)).toBe(true)
        })
        it('should have data-abc-id equal to divider', () => {
            expect(divider.find('hr').prop('data-abc-id')).toBe('borderDivider')
        })
    })

    describe('Col props', () => {
        const divider = shallow(<Divider sm={3} xs={2} lg={12} md={4}/>)

        it('should pass any props down to the Col', () => {
            expect(divider.find(Col).props().sm).toBe(3)
            expect(divider.find(Col).props().xs).toBe(2)
            expect(divider.find(Col).props().md).toBe(4)
            expect(divider.find(Col).props().lg).toBe(12)
        })
    })

    describe('FullWidthDivider', () => {
        const divider = shallow(<Divider fullWidth />)

        it('should be a hr', () => {
            expect(divider.contains(<hr className="divider-border divider-border--direction_horizontal divider-border--color_gray-lighter divider-border--fullWidth" data-abc-id="borderDivider"/>)).toBe(true)
        })
        it('should have data-abc-id equal to divider', () => {
            expect(divider.find('hr').prop('data-abc-id')).toBe('borderDivider')
        })
    })

    describe('VerticalDivider', () => {
        const divider = shallow(<Divider direction='vertical' />)

        it('should be a span', () => {
            expect(divider.name()).toEqual('span')
        })
        it('should have data-abc-id equal to divider', () => {
            expect(divider.prop('data-abc-id')).toBe('borderDivider')
        })
    })

    describe('TextDivider', () => {
        const divider = shallow(
            <Divider type='text'>ok</Divider>
        )

        it('should be a div', () => {
            expect(divider.type()).toBe('div')
        })

        it('should have the class .divider-text', () => {
            expect(divider.hasClass('divider-text')).toBe(true)
        })

        it('should have the default data-abc-id', () => {
            expect(divider.prop('data-abc-id')).toBe('textDivider')
        })

        it('should have the content "OK"', () => {
            expect(divider.text()).toBe('ok')
        })
    })

    describe('will handle color prop', () => {
        const colors = [
            'primary',
            'secondary',
            'tertiary',
            'gray-lighter',
            'gray-light',
            'gray-dark',
            'white',
            'success',
            'danger',
            'warning',
        ]

        colors.forEach((color) => {
            const divider = shallow(
                <Divider color={color}>xyz</Divider>
            )
            const textDivider = shallow(
                <Divider type='text' color={color}>zyx</Divider>
            )
            it(`should have the class .divider-{type}--color_${color}`, () => {
                expect(textDivider.hasClass(`divider-text--color_${color}`)).toBe(true)
                expect(divider.find('hr').hasClass(`divider-border--color_${color}`)).toBe(true)
            })
        })
    })

    describe('will keep className prop', () => {
        const divider = shallow(
            <Divider className='test'>xyz</Divider>
        )

        it('should have the className', () => {
            expect(divider.find('hr').hasClass('test')).toBe(true)
        })
    })
})