import bem from './'

describe('makeClassnames', () => {
    describe('block', () => {
        it('should output correct classnames for block', () => {
            expect(bem({
                block: 'fake-block',
            })).toEqual({
                'fake-block': true,
            })
        })

        it('should output correct classnames for prefixed block', () => {
            expect(bem({
                prefix: 'fake-prefix-',
                block: 'fake-block',
            })).toEqual({
                'fake-prefix-fake-block': true,
            })
        })

        it('should output correct classnames for boolean block modifiers', () => {
            expect(bem({
                block: 'fake-block',
                modifiers: {
                    block: {
                        'boolean-modifier': true,
                    },
                },
            })).toEqual({
                'fake-block': true,
                'fake-block--boolean-modifier': true,
            })
        })

        it('should output correct classnames for value block modifiers', () => {
            expect(bem({
                block: 'fake-block',
                modifiers: {
                    block: {
                        'value-modifier': 'fake-value',
                    },
                },
            })).toEqual({
                'fake-block': true,
                'fake-block--value-modifier_fake-value': true,
            })
        })
    })

    describe('element', () => {
        it('should output correct classnames for element', () => {
            expect(bem({
                element: 'fake-element',
            })).toEqual({
                'fake-element': true,
            })
        })

        it('should output correct classnames for prefixed element', () => {
            expect(bem({
                prefix: 'fake-prefix-',
                element: 'fake-element',
            })).toEqual({
                'fake-prefix-fake-element': true,
            })
        })

        it('should output correct classnames for boolean element modifiers', () => {
            expect(bem({
                element: 'fake-element',
                modifiers: {
                    element: {
                        'boolean-modifier': true,
                    },
                },
            })).toEqual({
                'fake-element': true,
                'fake-element--boolean-modifier': true,
            })
        })

        it('should output correct classnames for value element modifiers', () => {
            expect(bem({
                element: 'fake-element',
                modifiers: {
                    element: {
                        'value-modifier': 'fake-value',
                    },
                },
            })).toEqual({
                'fake-element': true,
                'fake-element--value-modifier_fake-value': true,
            })
        })
    })

    describe('block + element', () => {
        it('should output correct classnames for block + element', () => {
            expect(bem({
                block: 'fake-block',
                element: 'fake-element',
            })).toEqual({
                'fake-block__fake-element': true,
                'fake-element': true,
            })
        })

        it('should output correct classnames for prefixed block + element', () => {
            expect(bem({
                prefix: 'fake-prefix-',
                block: 'fake-block',
                element: 'fake-element',
            })).toEqual({
                'fake-prefix-fake-block__fake-element': true,
                'fake-prefix-fake-element': true,
            })
        })

        it('should output correct classnames for boolean block + element modifiers', () => {
            expect(bem({
                block: 'fake-block',
                element: 'fake-element',
                modifiers: {
                    block: {
                        'boolean-block-modifier': true,
                    },
                    element: {
                        'boolean-element-modifier': true,
                    },
                },
            })).toEqual({
                'fake-block__fake-element': true,
                'fake-block--boolean-block-modifier': true,
                'fake-block--boolean-block-modifier__fake-element': true,
                'fake-element': true,
                'fake-element--boolean-element-modifier': true,
                'fake-block__fake-element--boolean-element-modifier': true,
            })
        })

        it('should output correct classnames for value block + element modifiers', () => {
            expect(bem({
                block: 'fake-block',
                element: 'fake-element',
                modifiers: {
                    block: {
                        'value-block-modifier': 'fake-block-value',
                    },
                    element: {
                        'value-element-modifier': 'fake-element-value',
                    },
                },
            })).toEqual({
                'fake-block__fake-element': true,
                'fake-block--value-block-modifier_fake-block-value': true,
                'fake-block--value-block-modifier_fake-block-value__fake-element': true,
                'fake-element': true,
                'fake-element--value-element-modifier_fake-element-value': true,
                'fake-block__fake-element--value-element-modifier_fake-element-value': true,
            })
        })
    })

    it('should ignore all false and undefined modifiers', () => {
        expect(bem({
            block: 'fake-block',
            element: 'fake-element',
            modifiers: {
                block: {
                    'boolean-block-modifier': false,
                },
                element: {
                    'boolean-element-modifier': undefined,
                },
            },
        })).toEqual({
            'fake-block__fake-element': true,
            'fake-element': true,
        })
    })

    it('should format all values to strings and hyphenate spaces', () => {
        const modifierObject = {fakeAttribute: 'fake-value'}
        expect(bem({
            block: {},
            element: [1,2,3],
            modifiers: {
                block: {
                    'block   modifierWith  SpAcEs': true,
                },
                element: {
                    [modifierObject]: 'element    modifier   wSpaces',
                },
            },
        })).toEqual({
            '-object-Object-__1-2-3': true,
            '-object-Object---block-modifierWith-SpAcEs': true,
            '-object-Object---block-modifierWith-SpAcEs__1-2-3': true,
            '1-2-3': true,
            '1-2-3---object-Object-_element-modifier-wSpaces': true,
            '-object-Object-__1-2-3---object-Object-_element-modifier-wSpaces': true,
        })
    })

    it('should throw an error if neither block or element are passed', () => {
        expect(() => bem({
            modifiers: {
                block: {
                    'boolean-block-modifier': true,
                },
                element: {
                    'boolean-element-modifier': true,
                },
            },
        })).toThrow()
    })
})