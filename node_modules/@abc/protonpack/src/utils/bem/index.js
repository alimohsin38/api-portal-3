import mapKeys from  'lodash/mapKeys'

const makeClassnames = ({block, element, modifiers = {}, prefix = ''}) => {
    if (!block && !element) {
        throw new Error('You must specify a block or an element when using BEM syntax')
    }

    const classes = {}
    const classPrefix = prefix ? prefix.replace(/^['"]/, '').replace(/['"]$/, '') : ''

    if (block) {
        if (!element) {
            classes[`${classPrefix}${block}`] = true
        } else {
            classes[`${classPrefix}${block}__${element}`] = true
        }

        const blockModifierKeys = modifiers.block ? Object.keys(modifiers.block) : []

        blockModifierKeys.forEach((key) => {
            const value = modifiers.block[key]
            const isBoolean = value === undefined || value === !!value
            if (isBoolean) {
                if (value) {
                    const className = `${classPrefix}${block}--${key}`
                    classes[className] = true
                    if (element) {
                        classes[`${className}__${element}`] = true
                    }
                }
            } else {
                const className = `${classPrefix}${block}--${key}_${value}`
                classes[className] = true
                if (element) {
                    classes[`${className}__${element}`] = true
                }
            }
        })
    }
    if (element) {
        classes[`${classPrefix}${element}`] = true

        const elementModifierKeys = modifiers.element ? Object.keys(modifiers.element) : []

        elementModifierKeys.forEach((key) => {
            const value = modifiers.element[key]
            const isBoolean = value === undefined || value === !!value
            if (isBoolean) {
                if (value) {
                    classes[`${classPrefix}${element}--${key}`] = true
                    if (block) {
                        classes[`${classPrefix}${block}__${element}--${key}`] = true
                    }
                }
            } else {
                classes[`${classPrefix}${element}--${key}_${value}`] = true
                if (block) {
                    classes[`${classPrefix}${block}__${element}--${key}_${value}`] = true
                }
            }
        })
    }

    return mapKeys(classes, (value, className) => className
        .toString()
        .replace(/\s\s+/g, '-')
        .replace(/[\s!"#$%&'()*+,./:;<=>?@[\\\]^`{|}~]/g, '-'))
}

export default makeClassnames
