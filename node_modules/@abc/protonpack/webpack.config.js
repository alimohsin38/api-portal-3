const path = require('path')
const devConfig = require('./webpack.dev.config')
const prodConfig = require('./webpack.prod.config')
const demoConfig = require('./webpack.demo.config')

let webpackConfig = devConfig

if (process.env.NODE_ENV === 'production') {
    webpackConfig = prodConfig
} else if (process.env.NODE_ENV === 'demo') {
    webpackConfig = demoConfig
}

const baseLoaders = [
    {
        test: /\.(woff(2)?)(\?[a-z0-9=&.]+)?$/,
        loader: 'file-loader',
        options: {
            limit: 50000,
            name: './fonts/[hash].[ext]',
            publicPath: path.join(__dirname, 'dist', 'fonts'),
        },
    },
    {
        test: /\.(png|jpg|svg)$/,
        include: path.join(__dirname, 'src', 'images'),
        loader: 'file-loader?limit=2000000&name=./images/[name].[ext]',
    },
]

module.exports = {
    bail: webpackConfig.bail,
    entry: webpackConfig.entry,
    output: webpackConfig.output,
    resolve: {
        modules: [
            path.join(__dirname, 'src'),
            'node_modules',
        ],
        alias: {
            components: path.resolve(__dirname, 'src/components'),
            formElements: path.resolve(__dirname, 'src/components/formElements'),
            layout: path.resolve(__dirname, 'src/components/layout'),
            styles: path.resolve(__dirname, 'src/styles'),
            utils: path.resolve(__dirname, 'src/utils'),
            src: path.resolve(__dirname, 'src'),
        },
    },
    module: {
        rules: [
            ...webpackConfig.rules,
            ...baseLoaders,
        ],
    },
    externals: webpackConfig.externals,
    devServer: webpackConfig.devServer,
    plugins: webpackConfig.plugins,
    devtool: webpackConfig.devtool,
}
