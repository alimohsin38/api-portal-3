(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("bunyan"), require("fs"));
	else if(typeof define === 'function' && define.amd)
		define(["bunyan", "fs"], factory);
	else if(typeof exports === 'object')
		exports["npm-boiler"] = factory(require("bunyan"), require("fs"));
	else
		root["npm-boiler"] = factory(root["bunyan"], root["fs"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_2__, __WEBPACK_EXTERNAL_MODULE_3__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var loggers = {};
	var log = module.exports;

	log.createLogger = function (options, setDefault) {
	    var logger = __webpack_require__(1).default(options);
	    setDefault && (loggers['default'] = logger);
	    loggers[options.name] = logger;
	    return logger;
	};

	log.getLogger = function (name) {
	    var logger = void 0;
	    if (!name) {
	        logger = loggers['default'];
	    } else if (Object.keys(loggers).includes(name)) {
	        logger = loggers[name];
	    } else {
	        logger = log.createLogger({ name: name });
	    }
	    return logger;
	};

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _bunyan = __webpack_require__(2);

	var _bunyan2 = _interopRequireDefault(_bunyan);

	var _fs = __webpack_require__(3);

	var _fs2 = _interopRequireDefault(_fs);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var logDir = process.env.LOG_DIR || 'logs';
	var logLevel = process.env.LOG_LEVEL || 'trace';
	!_fs2.default.existsSync(logDir) && _fs2.default.mkdirSync(logDir);

	var getStreams = function getStreams(options) {
	    var level = options.level || logLevel;
	    return [{ type: 'rotating-file', path: logDir + '/' + options.name + '.log', level: level }, { stream: process.stdout, level: level }];
	};

	exports.default = function (options) {
	    if (!options || !options.name) throw Error('options.name is required');
	    options.name = options.name || 'DEFAULT - SET A NAME';
	    options.serializers = options.serializers || _bunyan2.default.stdSerializers;
	    options.streams = options.streams || getStreams(options);
	    return _bunyan2.default.createLogger(options);
	};

/***/ },
/* 2 */
/***/ function(module, exports) {

	module.exports = require("bunyan");

/***/ },
/* 3 */
/***/ function(module, exports) {

	module.exports = require("fs");

/***/ }
/******/ ])
});
;