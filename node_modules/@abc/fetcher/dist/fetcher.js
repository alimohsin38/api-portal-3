(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("isomorphic-fetch"), require("deepmerge"));
	else if(typeof define === 'function' && define.amd)
		define(["isomorphic-fetch", "deepmerge"], factory);
	else if(typeof exports === 'object')
		exports["fetcher"] = factory(require("isomorphic-fetch"), require("deepmerge"));
	else
		root["fetcher"] = factory(root["isomorphic-fetch"], root["deepmerge"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_1__, __WEBPACK_EXTERNAL_MODULE_2__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	__webpack_require__(1);
	var deepmerge = __webpack_require__(2);
	
	var Fetcher = function () {
	    function Fetcher() {
	        _classCallCheck(this, Fetcher);
	
	        this.defaultOpts = {
	            cache: 'no-cache',
	            headers: {
	                'Content-Type': 'application/json'
	            }
	        };
	
	        this.jsonOpts = {
	            headers: {
	                Accept: 'application/json'
	            }
	        };
	
	        this.textOpts = {
	            headers: {
	                Accept: 'text/*'
	            }
	        };
	        this.locationHeaderKey = 'ABCFS-LOCATION-ID';
	        this.organizationHeaderKey = 'ABCFS-ORGANIZATION-ID';
	    }
	
	    _createClass(Fetcher, [{
	        key: 'setCsrf',
	        value: function setCsrf(token) {
	            this.defaultOpts.headers['X-CSRF-TOKEN'] = token;
	        }
	    }, {
	        key: 'setAuth',
	        value: function setAuth(token) {
	            this.defaultOpts.headers.Authorization = token;
	        }
	    }, {
	        key: 'setLocation',
	        value: function setLocation(locationId) {
	            this.defaultOpts.headers[this.locationHeaderKey] = locationId;
	        }
	    }, {
	        key: 'setOrganization',
	        value: function setOrganization(organizationId) {
	            this.defaultOpts.headers[this.organizationHeaderKey] = organizationId;
	        }
	    }, {
	        key: 'clearAuth',
	        value: function clearAuth() {
	            delete this.defaultOpts.headers.Authorization;
	        }
	    }, {
	        key: 'clearLocation',
	        value: function clearLocation() {
	            delete this.defaultOpts.headers[this.locationHeaderKey];
	        }
	    }, {
	        key: 'clearOrganization',
	        value: function clearOrganization() {
	            delete this.defaultOpts.headers[this.organizationHeaderKey];
	        }
	    }, {
	        key: 'setErrorCallback',
	        value: function setErrorCallback(callback) {
	            this.errorCallback = callback;
	        }
	    }, {
	        key: 'get',
	        value: function get(url) {
	            var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	
	            return this._buildFetch(url, null, opts, 'GET');
	        }
	    }, {
	        key: 'head',
	        value: function head(url, data) {
	            var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
	
	            return this._buildFetch(url, data, opts, 'HEAD');
	        }
	    }, {
	        key: 'post',
	        value: function post(url, data) {
	            var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
	
	            return this._buildFetch(url, data, opts, 'POST');
	        }
	    }, {
	        key: 'put',
	        value: function put(url, data) {
	            var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
	
	            return this._buildFetch(url, data, opts, 'PUT');
	        }
	    }, {
	        key: 'del',
	        value: function del(url, data) {
	            var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
	
	            return this._buildFetch(url, data, opts, 'DELETE');
	        }
	
	        // ---- Private Methods
	
	    }, {
	        key: '_buildFetch',
	        value: function _buildFetch(url, data, opts, method) {
	            var _this = this;
	
	            var _buildOpts = deepmerge(this.defaultOpts, opts);
	            _buildOpts.method = method;
	
	            if (data !== null) {
	                _buildOpts.body = (typeof data === 'undefined' ? 'undefined' : _typeof(data)) === 'object' ? JSON.stringify(data) : data;
	            }
	
	            return {
	                then: function then(fn) {
	                    return _this._fetch(url, _buildOpts).then(function (res) {
	                        return fn(res);
	                    }).catch(function (err) {
	                        return _this._catchThrowErrors(err);
	                    });
	                },
	                json: function json(fn) {
	                    return _this._fetchJson(url, _buildOpts).then(function (res) {
	                        return fn(res);
	                    }).catch(function (err) {
	                        return _this._catchThrowErrors(err);
	                    });
	                },
	                text: function text(fn) {
	                    return _this._fetchText(url, _buildOpts).then(function (res) {
	                        return fn(res);
	                    }).catch(function (err) {
	                        return _this._catchThrowErrors(err);
	                    });
	                },
	                noResponse: function noResponse() {
	                    return _this._fetch(url, _buildOpts);
	                }
	            };
	        }
	    }, {
	        key: '_catchThrowErrors',
	        value: function _catchThrowErrors(err) {
	            if (this.errorCallback) {
	                this.errorCallback(err);
	            } else {
	                throw err;
	            }
	        }
	    }, {
	        key: '_checkResponse',
	        value: function _checkResponse(res) {
	            if (res.status >= 200 && res.status < 300) {
	                return res;
	            }
	
	            var _err = new Error(res.statusText);
	            _err.response = res;
	            throw _err;
	            // we are throwing an error, so no need to return a response
	        }
	    }, {
	        key: '_fetch',
	        value: function _fetch(url, opts) {
	            var _this2 = this;
	
	            return fetch(url, opts).then(function (res) {
	                return _this2._checkResponse(res);
	            });
	        }
	    }, {
	        key: '_fetchJson',
	        value: function _fetchJson(url, opts) {
	            var _opts = deepmerge(this.jsonOpts, opts);
	
	            return this._fetch(url, _opts).then(function (res) {
	                return res.json();
	            });
	        }
	    }, {
	        key: '_fetchText',
	        value: function _fetchText(url, opts) {
	            var _opts = deepmerge(this.textOpts, opts);
	
	            return this._fetch(url, _opts).then(function (res) {
	                return res.text();
	            });
	        }
	    }]);
	
	    return Fetcher;
	}();
	
	module.exports = new Fetcher();

/***/ }),
/* 1 */
/***/ (function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_1__;

/***/ }),
/* 2 */
/***/ (function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_2__;

/***/ })
/******/ ])
});
;
//# sourceMappingURL=fetcher.js.map