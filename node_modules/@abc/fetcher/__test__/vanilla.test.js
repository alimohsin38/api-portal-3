import fetcher from '../src/fetcher';
import helper from './__mocks__/mockhelper';

describe('Vanilla Fetch API Successful Promises', () => {

    beforeEach(() => {
        global.fetch = jest.fn().mockImplementationOnce((url, data) =>
            Promise.resolve(helper.mockJsonResponse(url, data, '{"planet":"express"}')));
    });

    it('Should get the correct HEAD response', () => {

        return fetcher.head(helper.url, helper.dummyData)
            .then(res => {
                expect(res.status).toBe(200);
                expect(res.statusText).toBe('OK');
                expect(res.headers.get('Content-Type')).toBe('application/json');
            });
    });

    it('Should get the correct GET response', () => {

        return fetcher.get(helper.url)
            .then(res => {
                expect(res.status).toBe(200);
                expect(res.statusText).toBe('OK');
                expect(res.headers.get('Content-Type')).toBe('application/json');
                expect(res.url).toBe(helper.url);
                return res.json();
            })
            .then(json => {
                expect(typeof json).toBe('object');
                expect(json.planet).toBe('express');
            });
    });

    it('Should get the correct POST response', () => {

        return fetcher.post(helper.url, helper.dummyData)
            .then(res => {
                expect(res.status).toBe(200);
                expect(res.statusText).toBe('OK');
                expect(res.headers.get('Content-Type')).toBe('application/json');
                expect(res.url).toBe(helper.url);
                return res.json();
            })
            .then(json => {
                expect(typeof json).toBe('object');
                expect(json.fry).toBe('phillip');
            });
    });

    it('Should get the correct PUT response', () => {

        return fetcher.put(helper.url, helper.dummyData)
            .then(res => {
                expect(res.status).toBe(200);
                expect(res.statusText).toBe('OK');
                expect(res.headers.get('Content-Type')).toBe('application/json');
                expect(res.url).toBe(helper.url);
                return res.json();
            })
            .then(json => {
                expect(typeof json).toBe('object');
                expect(json.fry).toBe('phillip');
            });
    });

    it('Should get the correct DEL response', () => {

        return fetcher.del(helper.url, helper.dummyData)
            .then(res => {
                expect(res.status).toBe(200);
                expect(res.statusText).toBe('OK');
                expect(res.headers.get('Content-Type')).toBe('application/json');
                expect(res.url).toBe(helper.url);
                return res.json();
            })
            .then(json => {
                expect(typeof json).toBe('object');
                expect(json.fry).toBe('phillip');
            });
    });


    it('Should get the correct POST response with string data', () => {
        const objDummyData = JSON.parse(helper.dummyData)

        return fetcher.post(helper.url, objDummyData)
            .then(res => {
                expect(res.status).toBe(200);
                expect(res.statusText).toBe('OK');
                expect(res.headers.get('Content-Type')).toBe('application/json');
                expect(res.url).toBe(helper.url);
                return res.json();
            })
            .then(json => {
                expect(typeof json).toBe('object');
                expect(json.fry).toBe('phillip');
            });
    });

    it('Should perform a GET and not care about the response (mostly semantic)', () => {
        return fetcher.get(helper.url).noResponse()
    });
});