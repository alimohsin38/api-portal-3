import fetcher from '../src/fetcher';
import helper from './__mocks__/mockhelper';

describe('Error Handling', () => {

    beforeEach(() => {
        global.fetch = jest.fn().mockImplementationOnce((url, data) =>
            Promise.resolve(helper.mockJsonResponse(url, data, '{"planet":"express"}', 404, 'Not Found')));
    });

    afterEach(() => {
        global.fetch = undefined
    })

    it('Should catch 404 error on HEAD', () => {

        return fetcher.head(helper.url, helper.dummyData)
            .then(res => {
                expect(res.status).not.toBe(200);
                expect(res.statusText).not.toBe('OK');
            })
            .catch(err => {
                expect(err.response.status).toBe(404);
                expect(err.response.statusText).toBe('Not Found');
            });
    });

    it('Should catch 404 error on GET', () => {

        return fetcher.get(helper.url)
            .json(json => {
                expect(res.status).not.toBe(200);
                expect(res.statusText).not.toBe('OK');
            })
            .catch(err => {
                expect(err.response.status).toBe(404);
                expect(err.response.statusText).toBe("Not Found");
            });
    });

    it('Should catch 404 error on POST', () => {

        return fetcher.post(helper.url, helper.dummyData)
            .text(text=> {
                expect(res.status).not.toBe(200);
                expect(res.statusText).not.toBe('OK');
            })
            .catch(err => {
                expect(err.response.status).toBe(404);
                expect(err.response.statusText).toBe("Not Found");
            });
    });

    it('Should catch 404 error on PUT', () => {

        return fetcher.put(helper.url, helper.dummyData)
            .json(json => {
                expect(res.status).not.toBe(200);
                expect(res.statusText).not.toBe('OK');
            })
            .catch(err => {
                expect(err.response.status).toBe(404);
                expect(err.response.statusText).toBe("Not Found");
            });
    });

    it('Should catch 404 error on DEL', () => {

        return fetcher.del(helper.url, helper.dummyData)
            .json(json => {
                expect(res.status).not.toBe(200);
                expect(res.statusText).not.toBe('OK');
            })
            .catch(err => {
                expect(err.response.status).toBe(404);
                expect(err.response.statusText).toBe("Not Found");
            });
    });

    describe('errorCallback', () => {
        it('should not throw when a 200 is returned', () => {
            global.fetch = jest.fn().mockImplementationOnce((url, data) =>
                Promise.resolve(helper.mockJsonResponse(url, data, '{"planet":"express"}')));
            return fetcher.get(helper.url, helper.dummyData)
                .then(res => {
                    expect(res.status).toBe(200)
                    expect(res.statusText).toBe('OK')
                })
        })

        it('should throw when no errorCallback is not set', () => {

            return fetcher.get(helper.url, helper.dummyData)
                .then(() => {})
                .catch(err => {
                    expect(err.response.status).toBe(404);
                    expect(err.response.statusText).toBe("Not Found");
                });
        })

        it('should call errorCallback when one is set', () => {
            fetcher.setErrorCallback(() => {})
            const spy = jest.spyOn(fetcher, 'errorCallback')

            return fetcher.get(helper.url, helper.dummyData)
                .then(() => {})
                .catch(err => {
                    expect(err.response.status).toBe(404);
                    expect(err.response.statusText).toBe('Not Found');
                    expect(spy).toHaveBeenCalled();
                })
        })

    })
});