import fetcher from '../src/fetcher'
import helper from './__mocks__/mockhelper'

describe('Class Properties Tests', () => {

    it('Should be able to set the CSRF token', () => {
        let token = 'i8XNjC4b8KVok4uw5RftR38Wgp2BFwql'
        fetcher.setCsrf(token)

        expect(fetcher.defaultOpts.headers['X-CSRF-TOKEN']).toBe(token)
    })

    it('Should set the Authorization token', () => {
        let token = 'Basic QWxhZGRpbjpPcGVuU2VzYW1l'
        fetcher.setAuth(token)

        expect(fetcher.defaultOpts.headers['Authorization']).toBe(token)
    })

    it('Should clear the Authorization token', () => {
        let token = 'Basic QWxhZGRpbjpPcGVuU2VzYW1l'
        fetcher.setAuth(token)
        fetcher.clearAuth()

        expect(fetcher.defaultOpts.headers['Authorization']).toBe(undefined)
    })

    it('Should set the Location ID', () => {
        let locationId = 'de2113a0-dcb7-42ad-bf07-a440b19f3fd9'
        fetcher.setLocation(locationId)

        expect(fetcher.defaultOpts.headers['ABCFS-LOCATION-ID']).toBe(locationId)
    })

    it('Should clear the Location ID', () => {
        let locationId = 'de2113a0-dcb7-42ad-bf07-a440b19f3fd9'
        fetcher.setLocation(locationId)
        fetcher.clearLocation()

        expect(fetcher.defaultOpts.headers['ABCFS-LOCATION-ID']).toBe(undefined)
    })

    it('Should set the Org ID', () => {
        let orgId = '646a287f-71da-4dac-b5fe-02cfffb3aef3'
        fetcher.setOrganization(orgId)

        expect(fetcher.defaultOpts.headers['ABCFS-ORGANIZATION-ID']).toBe(orgId)
    })

    it('Should clear the Org ID', () => {
        let orgId = '646a287f-71da-4dac-b5fe-02cfffb3aef3'
        fetcher.setOrganization(orgId)
        fetcher.clearOrganization()

        expect(fetcher.defaultOpts.headers['ABCFS-ORGANIZATION-ID']).toBe(undefined)
    })

    it('Should have Default Options', () => {
        expect(fetcher.defaultOpts.cache).toBe('no-cache');
        expect(fetcher.defaultOpts.headers['Content-Type']).toBe('application/json')
    })

    it('Should have Default JSON Options', () => {
        expect(fetcher.jsonOpts.headers['Accept']).toBe('application/json')
    })

    it('Should have Default Text Options', () => {
        expect(fetcher.textOpts.headers['Accept']).toBe('text/*')
    })
})