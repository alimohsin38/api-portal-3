const devConfig = require('./webpack.dev.config')
const prodConfig = require('./webpack.prod.config')
const autoprefixer = require('autoprefixer')
const path = require('path')
const demoConfig = require('./webpack.demo.config')

let webpackConfig = devConfig

if (process.env.NODE_ENV === 'production') {
    webpackConfig = prodConfig
} else if (process.env.NODE_ENV === 'demo') {
    webpackConfig = demoConfig
}

module.exports = {
    bail: webpackConfig.bail,
    entry: webpackConfig.entry,
    output: webpackConfig.output,
    module: {
        loaders: [
            {
                test: /\.js$/,
                exclude: /node_modules/,
                loader: 'babel-loader',
                query: {
                    presets: ['es2015', 'react'],
                    plugins: ['transform-object-rest-spread'],
                },
            },
            {
                test: /\.styl$/,
                loader: 'style-loader!css?modules&importLoaders=1&localIdentName=[name]-[local]__[hash:base64:5]!postcss?sourceMap=true!stylus-loader',
                exclude: /globalStyles/,
            },
            {
                test: /\.css$/,
                loader: 'style-loader!css-loader',
            },
            {
                test: /\.(woff(2)?)(\?[a-z0-9=&.]+)?$/,
                loader: 'file-loader',
                options: {
                    limit: 50000,
                    name: './fonts/[hash].[ext]',
                    publicPath: path.join(__dirname, 'dist', 'fonts'),
                },
            },
            {
                test: /\.(png|jpg|svg)$/,
                include: path.join(__dirname, 'src', 'images'),
                loader: 'file-loader?limit=2000000&name=/static/[name].[ext]',
                publicPath: '/static/',
            },
        ],
    },
    externals: webpackConfig.externals,
    devServer: webpackConfig.devServer,
    devTool: webpackConfig.devTool,
    postcss: [autoprefixer],
    resolve: {
        alias: {
            components: `${path.resolve('./src')}/components`,
            utils: `${path.resolve('./src')}/utils`,
        },
    },
    plugins: webpackConfig.plugins,
}
