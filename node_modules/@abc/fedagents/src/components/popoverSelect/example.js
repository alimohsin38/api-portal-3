import React, {Component} from 'react'
import PropTypes from 'prop-types'
import {Button, Modal, SecondaryFont} from '@abc/protonpack'
import {PopoverSelect} from '../../export'
import range from 'lodash/range'

const classOptionsCount = 16
const classOptions = range(classOptionsCount)
    .map((index) => {
        const level = ['Easy','Intermediate','Difficult'][~~(Math.random() * 2)]
        const name = `Class Name ${index}`
        const instructor = `Instructor Name ${index}`
        return {
            group: level,
            label: `${name} - ${instructor}`,
            value: `option_${index}`,
            displayText: name,

            name,
            level,
            instructor,
        }
    })

export default class PopoverSelectExample extends Component {
    constructor(props) {
        super(props)

        this.state = {
            basic: false,
        }

        this.onChangeOption = this.onChangeOption.bind(this)
        this.onChangeInlineOption = this.onChangeInlineOption.bind(this)
        this.onChangeButtonOption = this.onChangeButtonOption.bind(this)
        this.onChangeModalOption = this.onChangeModalOption.bind(this)
        this.toggleOpen = this.toggleOpen.bind(this)
    }

    onChangeOption(value) {
        this.setState({
            value,
        })
    }

    onChangeInlineOption(value) {
        this.setState({
            valueInline: value,
        })
    }

    onChangeButtonOption(value) {
        this.setState({
            valueButton: value,
        })
    }

    onChangeModalOption(value) {
        this.setState({
            valueModal: value,
        })
    }

    toggleOpen(key) {
        if (key) {
            this.setState({
                [key]: !this.state[key],
            })
        } else {
            this.setState({
                basic: false,
            })
        }
    }

    render() {
        const basicBanner = {
            title: 'Popover Select Modal',
        }

        const basicButtons = [
            {
                text: 'Ok',
                props: {
                    onClick: () => this.toggleOpen(),
                },
            },
        ]

        return (
            <div className={this.props.className}>
                <h2>Popover Select</h2>
                <div style={({textAlign: 'center'})}>
                    <SecondaryFont size="lg">
                        <PopoverSelect
                            onChange={this.onChangeOption}
                            value={this.state.value}
                            error={this.state.error}
                            align="center"
                            width="100%"
                            options={classOptions.map((option) => {
                                return {
                                    disabled: false,
                                    ...option,
                                    selected: option.value === this.state.value,
                                }
                            })}
                            optionItem={option => (
                                <div>
                                    <span className="float-right" style={{paddingLeft: '1rem'}}>{option.level}</span>
                                    <span>{option.name} - w/{option.instructor}</span>
                                </div>
                            )}
                        />
                    </SecondaryFont>
                </div>
                <h4>Inline Popover Select</h4>
                <div>
                    I would like to take <PopoverSelect
                        onChange={this.onChangeInlineOption}
                        value={this.state.valueInline}
                        placeholder="(Select a Class)"
                        error={this.state.error}
                        align="center"
                        options={classOptions.map((option) => {
                            return {
                                disabled: false,
                                ...option,
                                selected: option.value === this.state.valueInline,
                            }
                        })}
                    /> next month.
                </div>
                <h4>Popover Select w/className</h4>
                <div>
                    <PopoverSelect
                        className="btn btn-primary"
                        onChange={this.onChangeButtonOption}
                        value={this.state.valueButton}
                        placeholder="Please Select a Class"
                        error={this.state.error}
                        align="center"
                        options={classOptions.map((option) => {
                            return {
                                disabled: false,
                                ...option,
                                selected: option.value === this.state.valueButton,
                            }
                        })}
                    />
                </div>
                <h4>Popover Select inside a Modal</h4>
                <div>
                    <Button btnStyle="primary" block onClick={() => this.toggleOpen('basic')}>Open PopoverSelect Modal</Button>
                    <Modal
                        id="popoverModalTarget"
                        isOpen={this.state.basic}
                        toggle={() => this.toggleOpen('basic')}
                        banner={basicBanner}
                        buttons={basicButtons}
                        autoFocus={false}
                    >
                        <PopoverSelect
                            className="btn btn-primary"
                            container="#popoverModalTarget"
                            modifiers={{
                                preventOverflow: {
                                    boundariesElement: 'window',
                                },
                            }}
                            onChange={this.onChangeModalOption}
                            value={this.state.valueModal}
                            placeholder="Please Select a Class"
                            error={this.state.error}
                            align="center"
                            options={classOptions.map((option) => {
                                return {
                                    disabled: false,
                                    ...option,
                                    selected: option.value === this.state.valueModal,
                                }
                            })}
                        />
                    </Modal>
                </div>
            </div>
        )
    }
}

PopoverSelectExample.propTypes = {
    className: PropTypes.string,
}
