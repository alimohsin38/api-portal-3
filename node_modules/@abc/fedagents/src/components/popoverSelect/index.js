import React, {Component} from 'react'
import PropTypes from 'prop-types'
import {Popover, FullWidthDivider} from '@abc/protonpack'
import Icon from '@abc/quarkicons'
import uniqueId from 'lodash/uniqueId'
import find from 'lodash/find'
import get from 'lodash/get'
import noop from 'lodash/noop'
import styles from './popoverSelect.styl'
import classnames from 'classnames'
import PopoverSelectOption from './popoverSelectOption'
import debounce from 'lodash/debounce'

const defaultOptionItem = option => (<div>{option.label}</div>)

class PopoverSelect extends Component {
    constructor(props) {
        super(props)

        this.nativeTouched = false
        this.uniqueid = uniqueId('popover-select__')
        this.screenReaderMessageId = uniqueId('popover-select-screenreader__')
        this.state = {
            popoverOpen: false,
        }

        this.handleChange = this.handleChange.bind(this)
        this.handleToggle = this.handleToggle.bind(this)

        this.updateSelectIndex = this.updateSelectIndex.bind(this)
        this.setSelectReference = this.setSelectReference.bind(this)
    }

    componentWillReceiveProps(newProps) {
        if (newProps.value !== this.props.value) {
            this.updateSelectIndex(this.selectNode, newProps)
        }
    }

    setSelectReference(target) {
        this.selectNode = target
        this.updateSelectIndex(target, this.props)
    }

    updateSelectIndex(selectNode, {value, options}) {
        const optionExists = find(options, option => option.value === value)
        if (selectNode && !optionExists) {
            selectNode.selectedIndex = -1
        }
    }

    handleChange(value) {
        this.handleToggle(false)
        this.props.onChange(value)
    }

    handleToggle(value) {
        this.setState({
            popoverOpen: !this.props.disabled && !!value,
        })
    }

    render() {
        const {
            ['data-abc-id']: dataAbcId,
            disabled,
            modifiers,
            options,
            optionItem,
            placeholder,
            screenReaderMessage,
            value,
            width,
            container,
        } = this.props

        const abcId = dataAbcId || 'popover-select'
        const id = this.uniqueid
        const selectedOption = options.find(option => option.value === value)
        const displayText = get(selectedOption, 'displayText', get(selectedOption, 'label', placeholder))
        const lastOption = options.length - 1
        const screenReaderMessageId = screenReaderMessage ? this.screenReaderMessageId : undefined

        const isMobile = !!window.matchMedia('(hover: none)').matches

        return (
            <div data-abc-id={abcId} className={styles.wrapper}>
                <div
                    id={id}
                    className={classnames(styles.container, this.props.className)}
                    onClick={() => !isMobile && this.handleToggle(!this.state.popoverOpen)}
                >
                    <select
                        ref={this.setSelectReference}
                        aria-label={placeholder}
                        value={value && value !== '' ? value : undefined}
                        placeholder={placeholder}
                        disabled={disabled}
                        aria-describedby={screenReaderMessageId}
                        onFocus={event => this.updateSelectIndex(event.target, {options, value: event.target.value})}
                        onChange={event => !disabled && this.handleChange(event.target.value)}
                    >
                        {
                            options.map(option => (
                                <option key={option.value} value={option.value} disabled={option.disabled}>{option.label}</option>
                            ))
                        }
                    </select>
                    <span className={styles.displayText} aria-hidden="true">{displayText}</span>
                    <Icon className={styles.arrowDown} type="chevron-down-heavy"/>
                    {screenReaderMessage && (
                        <p id={this.screenReaderMessageId} className="screen-reader-only">
                            {screenReaderMessage}
                        </p>
                    )}
                </div>
                <Popover
                    className={styles.popover}
                    innerClassName={styles.popoverInner}
                    placement="bottom"
                    isOpen={this.state.popoverOpen}
                    target={id}
                    toggle={disabled ? noop : debounce(this.handleToggle)}
                    aria-hidden="true"
                    width={width}
                    container={container}
                    modifiers={modifiers}
                >
                    {
                        options.map((option, index) => (
                            <div key={option.value}>
                                <PopoverSelectOption
                                    grouped={!!option.group}
                                    disabled={option.disabled}
                                    selected={option.selected}
                                    onClick={option.disabled || disabled ? noop : () => this.handleChange(option.value)}
                                >
                                    {optionItem(option)}
                                </PopoverSelectOption>
                                {index !== lastOption && <FullWidthDivider />}
                            </div>
                        ))
                    }
                </Popover>
            </div>
        )
    }
}

PopoverSelect.propTypes = {
    className: PropTypes.string,
    onChange: PropTypes.func.isRequired,
    optionItem: PropTypes.func.isRequired,
    options: PropTypes.arrayOf(
        PropTypes.shape({
            group: PropTypes.string,
            value: PropTypes.string.isRequired,
            label: PropTypes.string.isRequired,
            displayText: PropTypes.string,
            selected: PropTypes.bool,
            disabled: PropTypes.bool,
        })
    ).isRequired,
    placeholder: PropTypes.string,
    value: PropTypes.string,
    disabled: PropTypes.bool,
    screenReaderMessage: PropTypes.string,
    width: PropTypes.string,
    modifiers: PropTypes.object,
    container: PropTypes.oneOfType([
        PropTypes.string, 
        PropTypes.func, 
        PropTypes.instanceOf(Element),
    ]),
}

PopoverSelect.defaultProps = {
    optionItem: defaultOptionItem,
    placeholder: 'Select One',
    value: '',
}

export default PopoverSelect
