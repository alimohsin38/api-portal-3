import React, {Component} from 'react'
import PropTypes from 'prop-types'
import classnames from 'classnames'
import uniqueId from 'lodash/uniqueId'
import {Input, Card, LabelGroup, FormGroup, BaseText} from '@abc/protonpack'
import {Loading} from '../../export'
import requiredIf from 'utils/requiredIf'
import styles from './inputSearch.styl'


export default class InputSearch extends Component {
    constructor(props) {
        super(props)

        this.isMobile = !!window.matchMedia('(hover: none)').matches

        this.state = {
            input: '',
            hovered: -1,
            dropdownOpen: false,
            submitted: false,
        }

        this.handleInputChange = this.handleInputChange.bind(this)
        this.handleBlur = this.handleBlur.bind(this)
        this.handleFocus = this.handleFocus.bind(this)
        this.handleKeyDown = this.handleKeyDown.bind(this)
    }

    componentDidMount() {
        this.focusInput()
    }

    componentDidUpdate() {
        if (this.activeItem) {
            this.activeItem.scrollIntoView({block: 'nearest'})
        }
        this.focusInput()
    }

    componentWillReceiveProps(nextProps) {
        const dropdownOpen = this.isDropdownOpen(nextProps)

        if (dropdownOpen !== this.state.dropdownOpen) {
            this.setState({dropdownOpen})
        }
    }

    focusInput() {
        if (this.props.focusInputOnMount) {
            this.input && this.input.focus()
        }
    }

    handleInputChange(e) {
        this.setState({
            input: e.target.value,
            hovered: -1,
        }, () => {
            if (this.props.onChange) {
                this.props.onChange(this.state.input)
            }
        })
    }

    handleBlur() {
        this.setState({
            dropdownOpen: false,
        })
    }

    handleFocus() {
        this.setState({
            input: this.state.input, // reset to put cursor at the end
            dropdownOpen: this.isDropdownOpen(this.props),
        })
    }

    handleSelect(displayData) {
        this.setState({
            input: displayData.value,
            dropdownOpen: false,
        }, () => {
            this.props.onSelect(displayData.data)
        })
    }

    handleSubmit(value) {
        const {onSubmit} = this.props

        this.setState({submitted: onSubmit(value)})
    }

    handleKeyDown(e) {
        const {displayData, live} = this.props
        const {hovered, input} = this.state

        if (displayData.length) {
            if (e.keyCode === 40 && hovered + 1 < displayData.length) {
                const nextItem = hovered + 1
                this.updateHovered(nextItem)
                this.refs[nextItem].scrollIntoView({block: 'nearest', behavior: 'smooth'})
            } else if (e.keyCode === 38 && hovered - 1 > -1) {
                const prevItem = hovered - 1
                this.updateHovered(prevItem)
                this.refs[prevItem].scrollIntoView({block: 'nearest', behavior: 'smooth'})
            } else if (e.keyCode === 13) {
                if (hovered !== -1) {
                    this.handleSelect(displayData[hovered])
                } else if (!live) {
                    this.handleSubmit(input)
                }
            }
        } else if (!live && e.keyCode === 13) {
            this.handleSubmit(input)
        }
    }

    updateHovered(index) {
        this.setState({
            hovered: index,
        })
    }

    buildDropDownClasses(className) {
        return classnames (
            styles.dropdown,
            className,
        )
    }

    isDropdownOpen(props) {
        return (props.live && (props.displayData.length > 0 ||
            props.loading ||
            this.hasNoResults(props))) ||
            (!props.live && this.state.submitted)
    }

    hasNoResults(props) {
        const {live, displayData} = props

        return displayData.length === 0 && (!live || this.state.input.length > 0)
    }

    render() {
        const {
            displayData,
            item,
            dropDownClassName,
            focusInputOnMount, // eslint-disable-line no-unused-vars
            inputClassName,
            onChange, // eslint-disable-line no-unused-vars
            onSelect, // eslint-disable-line no-unused-vars
            loading,
            loadingResultsClassName,
            noResultsClassName,
            label,
            hideLabel,
            className,
            statusMessage,
            ...remain
        } = this.props
        const currentInput = this.state.input
        const classes = className ? `${styles.container} ${className}` : styles.container

        return (
            <div className={classes}>
                <FormGroup className={styles.formGroup} statusMessage={statusMessage}>
                    <LabelGroup hideLabel={hideLabel} label={label}>
                        <Input
                            type="search"
                            ref={input => this.input = input}
                            onFocus={this.handleFocus}
                            onChange={this.handleInputChange}
                            onBlur={this.handleBlur}
                            onKeyDown={this.handleKeyDown}
                            {...remain}
                            className={inputClassName}
                            value={currentInput}
                        />
                    </LabelGroup>
                </FormGroup>
                {this.state.dropdownOpen &&
                    <Card className={this.buildDropDownClasses(dropDownClassName)}>
                        {displayData.length > 0 &&
                            displayData.map((displayItem, index) =>
                                <div
                                    key={uniqueId(displayItem.value)}
                                    onMouseEnter={() => !this.isMobile && this.updateHovered(index)}
                                    onMouseLeave={() => this.updateHovered(-1)}
                                    onMouseDown={this.handleSelect.bind(this, displayItem)}
                                    ref={index}
                                >
                                    {
                                        item({
                                            displayItem,
                                            index,
                                            query: currentInput,
                                            isSelected: displayItem.value === currentInput,
                                            isHovered: index === this.state.hovered,
                                        })
                                    }
                                </div>
                            )
                        }

                        {loading &&
                            <div className={classnames(styles.loading, loadingResultsClassName)}>
                                <Loading timeout={0} />
                            </div>
                        }

                        {this.hasNoResults(this.props) && !loading &&
                            <BaseText color="gray-light">
                                <div className={classnames(styles.noResults, noResultsClassName)}>
                                    No results found, please try again
                                </div>
                            </BaseText>
                        }
                    </Card>
                }
            </div>
        )
    }
}



InputSearch.defaultProps = {
    focusInputOnMount: false,
}

InputSearch.propTypes = {
    className: PropTypes.string,
    displayData: PropTypes.arrayOf(
        PropTypes.shape({
            value: PropTypes.string,
            data: PropTypes.oneOfType([
                PropTypes.string,
                PropTypes.number,
                PropTypes.object,
            ]),
        }),
    ),
    focusInputOnMount: PropTypes.bool,
    item: PropTypes.func.isRequired,
    dropDownClassName: PropTypes.string,
    inputClassName: PropTypes.string,
    onChange: requiredIf(PropTypes.func, props => props.live),
    onSubmit: requiredIf(PropTypes.func, props => !props.live),
    onSelect: PropTypes.func.isRequired,
    loading: PropTypes.bool,
    loadingResultsClassName: PropTypes.string,
    noResultsClassName: PropTypes.string,
    label: PropTypes.string.isRequired,
    hideLabel: PropTypes.bool,
    live: PropTypes.bool,
    statusMessage: PropTypes.shape({
        status: PropTypes.string,
        text: PropTypes.string,
    }),
}
