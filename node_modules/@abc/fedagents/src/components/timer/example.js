import React, {Component} from 'react'
import PropTypes from 'prop-types'
import moment from 'moment'
import {Row, Col, SecondaryFont} from '@abc/protonpack'
import {Timer} from '../../export'

export default class TimerExample extends Component {
    constructor(props) {
        super(props)

        this.state = {
            shortColor: 'gray-dark',
            fullColor: 'gray-dark',
            negativeColor: 'gray-dark',
        }

        this.warningCallbackShort = this.warningCallbackShort.bind(this)
        this.warningCallbackFull = this.warningCallbackFull.bind(this)
        this.dangerCallbackShort = this.dangerCallbackShort.bind(this)
        this.dangerCallbackFull = this.dangerCallbackFull.bind(this)
        this.warningCallbackNegative = this.warningCallbackNegative.bind(this)
        this.dangerCallbackNegative = this.dangerCallbackNegative.bind(this)
    }

    warningCallbackShort() {
        this.setState({
            shortColor: 'warning',
        })
    }

    dangerCallbackShort() {
        this.setState({
            shortColor: 'danger',
        })
    }

    warningCallbackFull() {
        this.setState({
            fullColor: 'warning',
        })
    }

    dangerCallbackFull() {
        this.setState({
            fullColor: 'danger',
        })
    }

    warningCallbackNegative() {
        this.setState({
            negativeColor: 'warning',
        })
    }

    dangerCallbackNegative() {
        this.setState({
            negativeColor: 'danger',
        })
    }

    render() {
        const baseTime = moment().utc()
            .format()
        const fourDays = moment(baseTime).add(4, 'days')
            .toISOString()
        const twoSeconds = moment(baseTime).add(2, 'seconds')
            .toISOString()
        const oneHourTenSeconds = moment(baseTime).add(3610, 'seconds')
            .toISOString()
        const fiveMinutes = moment(baseTime).add(5, 'minutes')
            .toISOString()
        const anHourAgo = moment(baseTime)
            .subtract(59, 'minutes')
            .subtract(55, 'seconds')
            .toISOString()

        return (
            <div className={this.props.className}>
                <h2>Timer</h2>
                <Row className={this.props.className}>
                    <Col lg={4}>
                        4 days:
                        <Timer currentTime={baseTime} endTime={fourDays} />
                    </Col>
                    <Col lg={4}>
                        2 seconds:
                        <Timer currentTime={baseTime} endTime={twoSeconds} />
                    </Col>
                    <Col lg={4}>
                        Lock timer at last hour only:
                        <Timer currentTime={baseTime} endTime={oneHourTenSeconds} oneHour />
                    </Col>
                </Row>
                <Row className={this.props.className}>
                    <Col lg={4}>
                        Do not show timer when over an hour:
                        <Timer currentTime={baseTime} endTime={oneHourTenSeconds} lastHourOnly />
                    </Col>
                    <Col lg={4}>
                        Do not show timer when past an hour:
                        <Timer currentTime={baseTime} endTime={anHourAgo} lastHourOnly />
                    </Col>
                </Row>
                <Row className={this.props.className}>
                    <Col lg={4}>
                        <div>5 minutes with a warning of 295 seconds:</div>
                        <SecondaryFont color={this.state.shortColor}>
                            <Timer
                                currentTime={baseTime}
                                endTime={fiveMinutes}
                                warning={{
                                    time: 295,
                                    callback: this.warningCallbackShort,
                                }}
                                danger={{
                                    time: 295,
                                    callback: this.dangerCallbackShort,
                                }}
                            />
                        </SecondaryFont>
                    </Col>
                    <Col lg={4}>
                        <div>5 minutes with a warning of 295 seconds and a danger of 285 seconds:</div>
                        <SecondaryFont color={this.state.fullColor}>
                            <Timer
                                currentTime={baseTime}
                                endTime={fiveMinutes}
                                warning={{
                                    time: 295,
                                    callback: this.warningCallbackFull,
                                }}
                                danger={{
                                    time: 285,
                                    callback: this.dangerCallbackFull,
                                }}
                            />
                        </SecondaryFont>
                    </Col>
                    <Col>
                        <div>10 seconds with a warning of -1 seconds and a danger of -5 seconds:</div>
                        <SecondaryFont color={this.state.negativeColor}>
                            <Timer
                                currentTime={'2017-11-18T23:00:50.749Z'}
                                endTime={'2017-11-18T23:01:00.000Z'}
                                warning={{
                                    time: -1,
                                    callback: this.warningCallbackNegative,
                                }}
                                danger={{
                                    time: -5,
                                    callback: this.dangerCallbackNegative,
                                }}
                            />
                        </SecondaryFont>
                    </Col>
                </Row>
            </div>
        )
    }
}

TimerExample.propTypes = {
    className: PropTypes.string,
}
