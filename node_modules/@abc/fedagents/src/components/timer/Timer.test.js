import React from 'react'
import {mount} from 'enzyme'
import {Indicator} from '@abc/protonpack'
import Timer from './'

describe('Timer', () => {
    describe('Test Elements/DOM', () => {
        const wrapper = mount(
            <Timer currentTime="2017-09-15T15:53:00" endTime="2017-09-15T16:53:00" />
        )

        const timer = wrapper.find(Timer)

        it('should contain a single Timer element', () => {
            expect(timer.length).toBe(1)
        })

        it('should have the time left', () => {
            expect(timer.text()).toBe('01:00:00')
        })
    })

    describe('Test Elements/DOM with classNames', () => {
        const wrapper = mount(
            <Timer currentTime="2017-09-15T15:53:00" endTime="2017-09-15T16:53:00" className="testingClass" />
        )

        const timer = wrapper.find(Timer)

        it('should have the testingClass on the component', () => {
            expect(timer.hasClass('testingClass')).toBe(true)
        })
    })

    describe('Test oneHour only', () => {
        const wrapper = mount(
            <Timer currentTime="2017-09-15T15:53:00" endTime="2018-09-15T16:53:00" oneHour />
        )

        const timer = wrapper.find(Timer)

        it('should have the time left of an hour', () => {
            expect(timer.text()).toBe('59:59')
        })
    })

    describe('Test lastHourOnly', () => {
        let testCount = 0
        const testOnHide = () => testCount++

        const wrapper = mount(
            <Timer
                currentTime="2017-09-15T15:53:00"
                endTime="2018-09-15T16:53:00"
                lastHourOnly
                onHide={testOnHide}
            />
        )

        const timer = wrapper.find(Timer)

        it('should have the vanish class', () => {
            expect(timer.hasClass('vanish')).toBe(true)
        })

        it('should call onHide when starting outside of an hour', () => {
            expect(testCount).toBe(1)
        })
    })

    describe('should not break without onHide function', () => {
        const wrapper = mount(
            <Timer
                currentTime="2017-09-15T15:53:00"
                endTime="2018-09-15T16:53:00"
                lastHourOnly
            />
        )

        const timer = wrapper.find(Timer)

        it('should have the vanish class', () => {
            expect(timer.hasClass('vanish')).toBe(true)
        })
    })

    describe('Test oneHour only with negative time', () => {
        const wrapper = mount(
            <Timer currentTime="2017-09-15T17:53:00" endTime="2017-09-15T16:53:00" oneHour />
        )

        const timer = wrapper.find(Timer)

        it('should be maxed at an hour', () => {
            expect(timer.text()).toBe('-59:59')
        })
    })

    describe('Test Correct Time Formats ', () => {
        describe('properly shows days', () => {
            const wrapper = mount(
                <Timer currentTime="2017-09-15T15:53:00" endTime="2017-09-17T15:53:00" />
            )

            const dayTimer = wrapper.find(Timer)

            it('should show days', () => {
                expect(dayTimer.text()).toBe('2:00:00')
            })
        })

        describe('properly shows hours', () => {
            const wrapper = mount(
                <Timer currentTime="2017-09-15T15:53:00" endTime="2017-09-15T17:53:00" />
            )

            const hourTimer = wrapper.find(Timer)

            it('should show hours', () => {
                expect(hourTimer.text()).toBe('02:00:00')
            })
        })

        describe('properly shows minutes', () => {
            const wrapper = mount(
                <Timer currentTime="2017-09-15T15:53:00" endTime="2017-09-15T15:55:00" />
            )

            const minuteTimer = wrapper.find(Timer)

            it('should show minutes', () => {
                expect(minuteTimer.text()).toBe('02:00')
            })
        })

        describe('properly shows seconds', () => {
            const wrapper = mount(
                <Timer currentTime="2017-09-15T15:53:00" endTime="2017-09-15T15:53:02" />
            )

            const minuteTimer = wrapper.find(Timer)

            it('should show seconds', () => {
                expect(minuteTimer.text()).toBe('00:02')
            })
        })
    })

    describe('Test indicator styleType', () => {
        describe('should set with danger', () => {
            const wrapper = mount(
                <Timer currentTime="2017-09-15T15:00:00"
                    endTime="2017-09-15T15:01:00"
                    warning={{time: 1000, callback: () => true}}
                />
            )

            const indicator = wrapper.find(Indicator)

            it('should be maxed at an hour', () => {
                expect(indicator.props().styleType).toBe('warning')
            })
        })

        describe('should set with danger', () => {
            const wrapper = mount(
                <Timer currentTime="2017-09-15T15:00:00"
                    endTime="2017-09-15T15:01:00"
                    warning={{time: 2000, callback: () => true}}
                    danger={{time: 1000, callback: () => true}}
                />
            )

            const indicator = wrapper.find(Indicator)

            it('should be maxed at an hour', () => {
                expect(indicator.props().styleType).toBe('danger')
            })
        })
    })

    describe('Test lastHourOnly ticking out of hour', () => {
        jest.useFakeTimers()
        let testCount = 0
        const testOnHide = () => testCount++

        const wrapper = mount(
            <Timer
                currentTime="2017-09-15T16:52:58"
                endTime="2017-09-15T15:53:00"
                lastHourOnly
                onHide={testOnHide}
            />
        )

        const timer = wrapper.find(Timer)

        jest.runTimersToTime(4000)

        it('should have the vanish class', () => {
            expect(timer.hasClass('vanish')).toBe(true)
        })
        it('should have called onHide once when the time crosses the hour threshold', () => {
            expect(testCount).toBe(1)
        })

        jest.clearAllTimers()
    })

    describe('Test lastHourOnly ticking out of hour and not break missing onHide', () => {
        jest.useFakeTimers()

        const wrapper = mount(
            <Timer
                currentTime="2017-09-15T16:52:58"
                endTime="2017-09-15T15:53:00"
                lastHourOnly
            />
        )

        const timer = wrapper.find(Timer)

        jest.runTimersToTime(4000)

        it('should have the vanish class', () => {
            expect(timer.hasClass('vanish')).toBe(true)
        })

        jest.clearAllTimers()
    })

    describe('Test that the time counts down', () => {
        jest.useFakeTimers()

        const wrapper = mount(
            <Timer currentTime="2017-09-15T15:53:00" endTime="2017-09-15T15:54:00" />
        )

        const timer = wrapper.find(Timer)

        jest.runTimersToTime(1000)

        it('should show 59 seconds', () => {
            expect(timer.text()).toBe('00:59')
        })

        jest.clearAllTimers()
    })

    describe('Test that the time goes into the negative', () => {
        jest.useFakeTimers()

        const wrapper = mount(
            <Timer currentTime="2017-09-15T15:53:00" endTime="2017-09-15T15:53:01" />
        )

        const timer = wrapper.find(Timer)

        jest.runTimersToTime(4000)

        it('should show -3 seconds', () => {
            expect(timer.text()).toBe('-00:03')
        })

        jest.clearAllTimers()
    })

    describe('Test oneHour countdown', () => {
        jest.useFakeTimers()

        const wrapper = mount(
            <Timer currentTime="2017-09-15T15:53:00" endTime="2018-09-15T16:53:05" oneHour />
        )

        const timer = wrapper.find(Timer)

        jest.runTimersToTime(7000)

        it('should have the time left of an hour', () => {
            expect(timer.text()).toBe('59:58')
        })

        jest.clearAllTimers()
    })

    describe('Test oneHour countdown', () => {
        jest.useFakeTimers()

        const wrapper = mount(
            <Timer currentTime="2017-09-15T16:53:00" endTime="2017-09-15T15:53:00" oneHour />
        )

        const timer = wrapper.find(Timer)

        jest.runTimersToTime(7000)

        it('should have the time left of an hour', () => {
            expect(timer.text()).toBe('-59:59')
        })

        jest.clearAllTimers()
    })

    describe('Test tick callback', () => {
        jest.useFakeTimers()

        let timeLeft = 0
        let callbackCalls = 0

        const callback = (time) => {
            timeLeft = time
            ++callbackCalls
        }

        mount(
            <Timer currentTime="2017-09-15T14:59:58" endTime="2017-09-15T15:12:56" onTick={callback} />
        )

        jest.runTimersToTime(1000)

        it('should callback the correct time left', () => {
            expect(callbackCalls).toBe(1)
            expect(timeLeft).toBe(777)
        })

        jest.clearAllTimers()
    })

    describe('Test interval unset', () => {
        it('should cancel timer interval on component unmount', () => {
            jest.useFakeTimers()

            let callbackCalls = 0

            const callback = () => {
                ++callbackCalls
            }

            const wrapper = mount(
                <Timer currentTime="2017-09-15T14:59:58" endTime="2017-09-15T15:12:56" onTick={callback} />
            )

            jest.runTimersToTime(5000)
            expect(callbackCalls).toBe(5)
            wrapper.instance().componentWillUnmount()
            jest.runTimersToTime(10000)
            expect(callbackCalls).toBe(5)

            jest.clearAllTimers()
        })
    })

    describe('Test warning callback', () => {
        jest.useFakeTimers()

        let timeLeft = 0
        let callbackCalls = 0

        const callback = (time) => {
            ++callbackCalls
            timeLeft = time
        }

        mount(
            <Timer
                currentTime="2017-09-15T14:00:00"
                endTime="2017-09-15T14:00:10"
                warning={{
                    time: 5,
                    callback,
                }}
            />
        )

        jest.runTimersToTime(5000)

        it('should callback the correct time left', () => {
            expect(callbackCalls).toBe(1)
            expect(timeLeft).toBe(5)
        })

        jest.clearAllTimers()
    })

    describe('Test warning callback on start', () => {
        jest.useFakeTimers()

        let callbackCalls = 0

        const callback = () => {
            ++callbackCalls
        }

        mount(
            <Timer
                currentTime="2017-09-15T14:00:00"
                endTime="2017-09-15T14:00:03"
                warning={{
                    time: 5,
                    callback,
                }}
            />
        )

        jest.runTimersToTime(5000)

        it('should callback the correct time left', () => {
            expect(callbackCalls).toBe(1)
        })

        jest.clearAllTimers()
    })

    describe('Test danger callback on start', () => {
        jest.useFakeTimers()

        let callbackCalls = 0

        const callback = () => {
            ++callbackCalls
        }

        mount(
            <Timer
                currentTime="2017-09-15T14:00:00"
                endTime="2017-09-15T14:00:03"
                danger={{
                    time: 5,
                    callback,
                }}
            />
        )

        jest.runTimersToTime(5000)

        it('should callback the correct time left', () => {
            expect(callbackCalls).toBe(1)
        })

        jest.clearAllTimers()
    })

    describe('Test danger callback on start, but not warning', () => {
        jest.useFakeTimers()

        let warningTicks = 0

        const warningCallback = () => {
            ++warningTicks
        }

        let dangerTicks = 0

        const dangerCallback = () => {
            ++dangerTicks
        }

        mount(
            <Timer
                currentTime="2017-09-15T14:00:00"
                endTime="2017-09-15T14:00:03"
                warning={{
                    time: 10,
                    callback: warningCallback,
                }}
                danger={{
                    time: 5,
                    callback: dangerCallback,
                }}
            />
        )

        jest.runTimersToTime(5000)

        it('should callback the correct time left', () => {
            expect(dangerTicks).toBe(1)
            expect(warningTicks).toBe(0)
        })

        jest.clearAllTimers()
    })

    describe('Test danger callback', () => {
        jest.useFakeTimers()

        let timeLeft = 0
        let callbackCalls = 0

        const callback = (time) => {
            ++callbackCalls
            timeLeft = time
        }

        mount(
            <Timer
                currentTime="2017-09-15T14:00:00"
                endTime="2017-09-15T14:00:10"
                danger={{
                    time: 5,
                    callback,
                }}
            />
        )

        jest.runTimersToTime(5000)

        it('should callback the correct time left', () => {
            expect(callbackCalls).toBe(1)
            expect(timeLeft).toBe(5)
        })

        jest.clearAllTimers()
    })

    describe('Test danger callback with fractional time', () => {
        jest.useFakeTimers()

        let timeLeft = 0
        let callbackCalls = 0

        const callback = (time) => {
            ++callbackCalls
            timeLeft = time
        }

        mount(
            <Timer
                currentTime="2017-09-15T14:00:00.777"
                endTime="2017-09-15T14:00:10.333"
                danger={{
                    time: 5,
                    callback,
                }}
            />
        )

        jest.runTimersToTime(5000)

        it('should callback the correct time left', () => {
            expect(callbackCalls).toBe(1)
            expect(timeLeft).toBe(5)
        })

        jest.clearAllTimers()
    })

    describe('Test warning callback with fractional time', () => {
        jest.useFakeTimers()

        let timeLeft = 0
        let callbackCalls = 0

        const callback = (time) => {
            ++callbackCalls
            timeLeft = time
        }

        mount(
            <Timer
                currentTime="2017-09-15T14:00:00.777"
                endTime="2017-09-15T14:00:10.333"
                warning={{
                    time: 5,
                    callback,
                }}
            />
        )

        jest.runTimersToTime(5000)

        it('should callback the correct time left', () => {
            expect(callbackCalls).toBe(1)
            expect(timeLeft).toBe(5)
        })

        jest.clearAllTimers()
    })

    describe('Test that danger takes precedence', () => {
        jest.useFakeTimers()

        let warningTicks = 0

        const warningCallback = () => {
            ++warningTicks
        }

        let dangerTicks = 0

        const dangerCallback = () => {
            ++dangerTicks
        }

        mount(
            <Timer
                currentTime="2017-09-15T14:00:00"
                endTime="2017-09-15T14:00:10"
                warning={{
                    time: 5,
                    callback: warningCallback,
                }}
                danger={{
                    time: 2,
                    callback: dangerCallback,
                }}
            />
        )

        jest.runTimersToTime(9000)

        it('should callback the correct number of times to warning', () => {
            expect(warningTicks).toBe(1)
        })

        it('should callback the correct number of times to danger', () => {
            expect(dangerTicks).toBe(1)
        })

        jest.clearAllTimers()
    })
})
