import React, {Component} from 'react'
import PropTypes from 'prop-types'
import Icon from '@abc/quarkicons'
import {Row, Col, SecondaryFont} from '@abc/protonpack'
import HoverCard from 'components/cards/hoverCard'
import styles from './quickEdit.styl'
import classnames from 'classnames'

export default class QuickEdit extends Component {
    constructor(props) {
        super(props)

        this.state = {
            initialHeight: 0,
            editHeight: 0,
        }

        this.setContainerRef = this.setContainerRef.bind(this)
    }

    setContainerRef(el) {
        this.containerRef = el
        this.setHeight(el)
    }

    componentDidUpdate(prevProps) {
        if (this.containerRef && prevProps.isEditing !== this.props.isEditing) {
            this.setHeight(this.containerRef)
        }
    }

    setHeight(el) {
        if (el) {
            if (!this.props.isEditing) {
                if (this.state.initialHeight !== el.offsetHeight) {
                    this.setState({
                        initialHeight: el.offsetHeight,
                    })
                }
            } else {
                if (this.state.editHeight !== el.offsetHeight) {
                    this.setState({
                        editHeight: el.offsetHeight,
                    })
                }
            }
        }
    }

    render() {
        const {isEditing, title, iconType, onEditClick, children, contentContainerClassName, ...remain} = this.props

        const classes = isEditing ? styles.editContainer : ''
        const actionIconType = isEditing ? 'x' : 'pencil'
        const containerStyle = {
            marginBottom: `${isEditing ? (this.state.initialHeight - this.state.editHeight) : 0}px`,
        }

        return (
            <HoverCard
                icon={actionIconType}
                data-abc-id="quickEdit"
                onIconClick={onEditClick}
                isHovered={isEditing}
                style={containerStyle}
                className={classes}
                {...remain}
            >
                <div ref={this.setContainerRef}>
                    {iconType &&
                        <Row xs={{justifyContent: 'center'}} className={styles.titleIconContainer}>
                            <Col sm={'auto'}>
                                <Icon type={iconType} className={styles.titleIcon}/>
                            </Col>
                        </Row>
                    }
                    {title &&
                        <Row xs={{justifyContent: 'center'}}>
                            <SecondaryFont size='lg' isStatic>
                                <Col sm={'auto'} className={styles.titleText}>
                                    <span>{title}</span>
                                </Col>
                            </SecondaryFont>
                        </Row>
                    }
                    <Row xs={{justifyContent: 'center'}}>
                        <Col className={classnames(styles.contentContainer, contentContainerClassName)}>
                            {children}
                        </Col>
                    </Row>
                </div>
            </HoverCard>
        )
    }
}

QuickEdit.propTypes = {
    isEditing: PropTypes.bool.isRequired,
    title: PropTypes.string,
    iconType: PropTypes.string,
    contentContainerClassName: PropTypes.string,
    onEditClick: PropTypes.func.isRequired,
    children: PropTypes.node.isRequired,
}
