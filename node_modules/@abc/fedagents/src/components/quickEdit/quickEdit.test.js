import React from 'react'
import QuickEdit from './'
import {mount, shallow} from 'enzyme'

describe('<QuickEdit />', () => {
    describe('Test basic render', () => {
        const handleEditClick = jest.fn()

        const wrapper = shallow(
            <QuickEdit
                title="fake-title"
                iconType="plus-circle"
                className="fake-class-name"
                onEditClick={handleEditClick}
                isEditing={false}
            >
                <h1>Test</h1>
            </QuickEdit>
        )

        const titleIcon = wrapper.find('.titleIconContainer .titleIcon')
        const titleTitle = wrapper.find('.titleText')

        it('should render a HoverCard', () => {
            expect(wrapper.name()).toEqual('HoverCard')
        })

        it('should have the data-abc-id \'quickEdit\'', () => {
            expect(wrapper.prop('data-abc-id')).toBe('quickEdit')
        })

        it('should have the data-abc-id \'quickEdit\'', () => {
            expect(wrapper.hasClass('fake-class-name')).toBe(true)
        })

        it('should render the children into the contentContainer', () => {
            const contentContainer = wrapper.find('.contentContainer')
            expect(contentContainer.contains(<h1>Test</h1>)).toBe(true)
        })

        it('should have an x icon when editing', () => {
            wrapper.setProps({isEditing: true})
            expect(wrapper.prop('icon')).toEqual('x')
        })

        it('should have a pencil icon when not editing', () => {
            wrapper.setProps({isEditing: false})
            expect(wrapper.prop('icon')).toEqual('pencil')
        })

        it('should render a title icon', () => {
            expect(titleIcon.prop('type')).toEqual('plus-circle')
        })

        it('should render a title', () => {
            expect(titleTitle.contains(<span>fake-title</span>)).toBe(true)
        })
    })

    describe('Test Props/State', () => {
        const handleEditClick = jest.fn()

        const wrapper = mount(
            <QuickEdit className="fake-class-name" onEditClick={handleEditClick} isEditing={false}>
                <h1>Test</h1>
            </QuickEdit>
        )

        it('should set the initialHeight when isEditing == false', () => {
            wrapper.setProps({isEditing: false})
            wrapper.instance().setHeight({offsetHeight: 'fake-offset-height'})
            expect(wrapper.state('initialHeight')).toEqual('fake-offset-height')
        })

        it('should set the editHeight when isEditing == true', () => {
            wrapper.setProps({isEditing: true})
            wrapper.instance().setHeight({offsetHeight: 'fake-offset-height'})
            expect(wrapper.state('editHeight')).toEqual('fake-offset-height')
        })

        it('should not set the editHeight when setHeight is not passed an element', () => {
            wrapper.setProps({isEditing: true})
            const uniqueTime = (new Date()).getTime()
            wrapper.setState({editHeight: uniqueTime})
            wrapper.instance().setHeight()
            expect(wrapper.state('editHeight')).toEqual(uniqueTime)
        })
    })
})