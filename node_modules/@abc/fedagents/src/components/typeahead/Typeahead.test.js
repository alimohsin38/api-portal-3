import React from 'react'
import {mount} from 'enzyme'
import {Input, Card} from '@abc/protonpack'
import {Loading} from '../../export'
import Typeahead from './'

describe('Typeahead', () => {
    const testItem = (itemProps) => {
        const {displayItem, query, index, isSelected, isHovered} = itemProps

        return (
            <div className="testClick">
                <span className="data">{displayItem.data}</span>
                <span className="query">{query}</span>
                <span className="index">{index}</span>
                <span className="selected">{isSelected}</span>
                <span className="hovered">{isHovered}</span>
            </div>
        )
    }

    const testDataArray = [
        {value: '1', data: 'test 1'},
        {value: 'two', data: 'test two'},
        {value: 'three', data: '3rd test'},
    ]

    describe('Basic Functionality', () => {
        const handleChange = jest.fn()
        const handleSubmit = jest.fn()

        const wrapper = mount(
            <Typeahead
                item={testItem}
                displayData={testDataArray}
                onChange={handleChange}
                onSubmit={handleSubmit}
                dropDownClassName="testingDropdown"
                label="test"
                hideLabel
            />
        )

        const inputElm = wrapper.find(Input)

        it('should have an input', () => {
            expect(inputElm.length).toBe(1)
        })

        describe('test further functionality', () => {
            it('renders a dropdown on focus', () => {
                inputElm.simulate('focus')

                expect(wrapper.find(Card).length).toBe(1)
                expect(wrapper.find(Card).hasClass('testingDropdown')).toBe(true)

                inputElm.simulate('blur')
                expect(wrapper.find(Card).length).toBe(0)
            })


            it('calls the handleChange function', () => {
                inputElm.find('input').simulate('change', {target: {value: 't'}})

                expect(handleChange.mock.calls.length).toBe(1)
            })

            /* it('calls the handleSubmit function', () => {
                inputElm.simulate('focus')
                const firstElement = wrapper.find('.testClick').first()
                firstElement.simulate('click')

                expect(handleSubmit.mock.calls.length).toBe(1)
            }) */

            /* it('check the index', () => {
                inputElm.simulate('focus')
                const firstElement = wrapper.find('.testClick').first()

                expect(firstElement.find('.index').text()).toBe('1')
            }) */

            /* it('check the hovered state', () => {
                inputElm.simulate('focus')

                const firstElement = wrapper.find('.testClick').first()
                firstElement.simulate('mouseEnter')

                expect(firstElement.find('.hovered').text()).toBe('true')
            }) */

            /* it('check the selected state', () => {
                inputElm.find('input').simulate('change', {target: {value: 'two'}})

                expect(firstElement.find('.selected').text()).toBe('true')
            }) */

            /* it('check down arrow works', () => {
                inputElm.simulate('focus')
                inputElm.find('input').simulate('keyDown', {target: {keyCode: 40}})

                const firstElement = wrapper.find('.testClick').first()

                expect(firstElement.find('.hovered').text()).toBe('true')
            }) */

            /* it('check up arrow works', () => {
                inputElm.simulate('focus')
                inputElm.find('input').simulate('keyDown', {target: {keyCode: 40}})
                inputElm.find('input').simulate('keyDown', {target: {keyCode: 40}})
                inputElm.find('input').simulate('keyDown', {target: {keyCode: 38}})

                const firstElement = wrapper.find('.testClick').childAt(1)

                expect(firstElement.find('.hovered').text()).toBe('true')
            }) */
        })
    })

    describe('Test is Loading', () => {
        const handleChange = jest.fn()
        const handleSubmit = jest.fn()

        const wrapper = mount(
            <Typeahead
                item={testItem}
                displayData={testDataArray}
                onChange={handleChange}
                onSubmit={handleSubmit}
                loading
                label="test"
                hideLabel
            />
        )

        it('should NOT have a loading dropdown', () => {
            expect(wrapper.find(Card).length).toBe(0)
        })

        it('should have a loading dropdown on focus', () => {
            wrapper.find(Input).simulate('focus')

            expect(wrapper.find(Card).length).toBe(1)
            expect(wrapper.find(Card).find(Loading).length).toBe(1)
        })
    })
})
