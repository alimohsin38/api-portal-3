import React, {Component} from 'react'
import PropTypes from 'prop-types'
import classnames from 'classnames'
import uniqueId from 'lodash/uniqueId'
import {Input, Card, LabelGroup, FormGroup, BaseText} from '@abc/protonpack'
import {Loading} from '../../export'
import styles from './typeahead.styl'

export default class Typeahead extends Component {
    constructor(props) {
        super(props)

        this.state = {
            input: '',
            hovered: -1,
            dropdownOpen: false,
        }

        this.handleInputChange = this.handleInputChange.bind(this)
        this.handleBlur = this.handleBlur.bind(this)
        this.handleFocus = this.handleFocus.bind(this)
        this.handleKeyDown = this.handleKeyDown.bind(this)
    }

    componentDidUpdate() {
        if (this.activeItem) {
            this.activeItem.scrollIntoView({block: 'nearest'})
        }
    }

    componentWillReceiveProps(nextProps) {
        const dropdownOpen = this.isDropdownOpen(nextProps)

        if (dropdownOpen !== this.state.dropdownOpen) {
            this.setState({dropdownOpen})
        }
    }

    handleInputChange(e) {
        this.setState(
            {
                input: e.target.value,
                hovered: -1,
            },
            () => {
                this.props.onChange(this.state.input)
            },
        )
    }

    handleBlur() {
        this.setState({
            dropdownOpen: false,
        })
    }

    handleFocus() {
        this.setState({
            input: this.state.input, // reset to put cursor at the end
            dropdownOpen: this.isDropdownOpen(this.props),
        })
    }

    handleSubmit(value, data) {
        this.setState(
            {
                input: value,
                dropdownOpen: false,
            },
            () => {
                this.props.onSubmit(value, data)
            },
        )
    }

    handleKeyDown(e) {
        const {displayData} = this.props
        const {hovered, input} = this.state

        if (displayData.length) {
            if (e.keyCode === 40 && hovered + 1 < displayData.length) {
                const nextItem = hovered + 1
                this.updateHovered(nextItem)
                this.refs[nextItem].scrollIntoView({block: 'nearest', behavior: 'smooth'})
            } else if (e.keyCode === 38 && hovered - 1 > -1) {
                const prevItem = hovered - 1
                this.updateHovered(prevItem)
                this.refs[prevItem].scrollIntoView({block: 'nearest', behavior: 'smooth'})
            } else if (e.keyCode === 13 && hovered !== -1) {
                const value = displayData[hovered].value || input
                const data = displayData[hovered].data || {}

                this.handleSubmit(value, data)
            }
        }
    }

    updateHovered(index) {
        this.setState({
            hovered: index,
        })
    }

    buildDropDownClasses(className) {
        return classnames(styles.dropdown, className)
    }

    isDropdownOpen(props) {
        return props.displayData.length > 0 || props.loading || this.hasNoResults(props)
    }

    hasNoResults(props) {
        return props.displayData.length === 0 && this.state.input.length > 0
    }

    render() {
        const {
            displayData,
            item,
            dropDownClassName,
            onChange, // eslint-disable-line no-unused-vars
            loading,
            noResultsClassName,
            label,
            hideLabel,
            className,
            inputClassName,
            statusMessage,
            ...remain
        } = this.props
        const currentInput = this.state.input
        const classes = className ? `${styles.container} ${className}` : styles.container

        return (
            <div className={classes}>
                <FormGroup className={styles.formGroup} statusMessage={statusMessage}>
                    <LabelGroup hideLabel={hideLabel} label={label}>
                        <Input
                            type="text"
                            ref={input => (this.input = input)}
                            onFocus={this.handleFocus}
                            onChange={this.handleInputChange}
                            onBlur={this.handleBlur}
                            onKeyDown={this.handleKeyDown}
                            {...remain}
                            className={inputClassName}
                            value={currentInput}
                        />
                    </LabelGroup>
                </FormGroup>
                {this.state.dropdownOpen && (
                    <Card className={this.buildDropDownClasses(dropDownClassName)}>
                        {displayData.length > 0 &&
                            displayData.map((displayItem, index) => (
                                <div
                                    key={uniqueId(displayItem.value)}
                                    onMouseEnter={() => this.updateHovered(index)}
                                    onMouseLeave={() => this.updateHovered(-1)}
                                    onMouseDown={() => this.handleSubmit(displayItem.value, displayItem.data)}
                                    ref={index}
                                >
                                    {item({
                                        displayItem,
                                        index,
                                        query: currentInput,
                                        isSelected: displayItem.value === currentInput,
                                        isHovered: index === this.state.hovered,
                                    })}
                                </div>
                            ))}
                        {loading && (
                            <div className={styles.loading}>
                                <Loading timeout={0} />
                            </div>
                        )}
                        {this.hasNoResults(this.props) && (
                            <BaseText color="gray-light">
                                <div className={classnames(styles.noResults, noResultsClassName)}>
                                    No results found, please try again
                                </div>
                            </BaseText>
                        )}
                    </Card>
                )}
            </div>
        )
    }
}

Typeahead.propTypes = {
    className: PropTypes.string,
    displayData: PropTypes.arrayOf(
        PropTypes.shape({
            value: PropTypes.string,
            data: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.object]),
        }),
    ),
    item: PropTypes.func.isRequired,
    dropDownClassName: PropTypes.string,
    inputClassName: PropTypes.string,
    onChange: PropTypes.func.isRequired,
    onSubmit: PropTypes.func.isRequired,
    loading: PropTypes.bool,
    noResultsClassName: PropTypes.string,
    label: PropTypes.string.isRequired,
    hideLabel: PropTypes.bool,
    statusMessage: PropTypes.shape({
        status: PropTypes.string,
        text: PropTypes.string,
    }),
}
