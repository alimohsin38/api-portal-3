import React, {Component} from 'react'
import PropTypes from 'prop-types'
import {Button, Input} from '@abc/protonpack'
import Icon from '@abc/quarkicons'
import styles from './pager.styl'

export default class Pager extends Component {
    constructor(props) {
        super(props)

        const {totalCount, pageSize} = this.props
        const initialPages = totalCount ? Math.ceil(totalCount / pageSize) : 0

        this.state = {totalPages: initialPages}

        // eslint-disable-next-line react/no-direct-mutation-state
        this.state.currentPage = this.parsePageNumber(props.currentPage)

        this.changePageTimeout = null
        this.onBlurHandler = this.onBlurHandler.bind(this)
    }

    componentWillReceiveProps(nextProps) {
        const totalPages = Math.ceil(nextProps.totalCount / nextProps.pageSize)
        this.setState({totalPages, currentPage: nextProps.currentPage})
    }

    onChangeHandler(e) {
        const currentValue = e.target.value

        if (currentValue && !isNaN(currentValue)) {
            const parsedValue = this.parsePageNumber(currentValue)

            this.sendChangePage(parsedValue)
            this.setState({currentPage: parsedValue})
        } else {
            clearTimeout(this.changePageTimeout)
            this.setState({currentPage: ''})
        }
    }

    onBlurHandler(e) {
        if (!e.target.value) {
            this.setState({currentPage: this.props.currentPage})
        }
    }

    changePageClickHandler(e, pageNumber) {
        e.preventDefault()
        this.sendChangePage(pageNumber, 0)
    }

    sendChangePage(pageNumber, timeout = 500) {
        clearTimeout(this.changePageTimeout)

        this.changePageTimeout = setTimeout(() => {
            this.props.changePage(pageNumber)
            this.setState({currentValue: pageNumber})
        }, timeout)
    }

    parsePageNumber(pageNumber) {
        let page = parseInt(pageNumber, 10)

        if (page < 1) {
            page = 1
        } else if (page > this.state.totalPages) {
            page = this.state.totalPages
        }

        return page
    }

    render() {
        // eslint-disable-next-line no-unused-vars
        const {currentPage, totalCount, pageSize, changePage, className, ...remain} = this.props
        const classes = className ? `${styles.inline} ${className}` : styles.inline

        const totalPages = this.state.totalPages

        return (
            <div className={classes} {...remain} data-abc-id="pager" data-total-count={totalCount}>
                <Button
                    btnStyle="link"
                    disabled={currentPage <= 1}
                    onClick={e => this.changePageClickHandler(e, currentPage - 1)}
                    data-abc-id="pagerPrevious"
                    size="sm"
                >
                    <Icon type="chevron-left-heavy" />
                </Button>

                <Input
                    type="text"
                    value={this.state.currentPage.toString()}
                    onChange={e => this.onChangeHandler(e)}
                    onBlur={this.onBlurHandler}
                    size="sm"
                    maxLength={totalPages.toString().length}
                    disabled={totalPages <= 1}
                    data-abc-id="pagerInput"/>

                <span data-abc-id="totalPages">of {totalPages}</span>

                <Button
                    btnStyle="link"
                    disabled={currentPage === totalPages || totalPages <= 1}
                    onClick={e => this.changePageClickHandler(e, currentPage + 1)}
                    data-abc-id="pagerNext"
                    size="sm"
                >
                    <Icon type="chevron-right-heavy" />
                </Button>
            </div>
        )
    }
}

Pager.propTypes = {
    totalCount: PropTypes.number.isRequired,
    pageSize: PropTypes.number.isRequired,
    changePage: PropTypes.func.isRequired,
    currentPage: PropTypes.number,
    className: PropTypes.string,
}
