import React from 'react'
import {mount} from 'enzyme'
import {Button, Input} from '@abc/protonpack'
import Icon from '@abc/quarkicons'
import Pager from './'

describe('Pager', () => {
    describe('render a basic Pager', () => {
        const changePage = () => {
            // do nothing
        }

        const wrapper = mount(<Pager
            changePage={changePage}
            totalCount={50}
            pageSize={11}
            currentPage={2}
        />)

        const wrapperElement = wrapper.find('div[data-abc-id="pager"]')

        it('should be a div', () => {
            expect(wrapperElement.type()).toBe('div')
        })

        it('should have a left button', () => {
            const button = wrapperElement.childAt(0)

            expect(button.type()).toBe(Button)
            expect(button.childAt(0).type()).toBe(Icon)
        })

        it('should print the right page number', () => {
            const pageCount = wrapperElement.find('span[data-abc-id="totalPages"]')
            expect(pageCount.text()).toBe('of 5')
        })
    })

    describe('render a basic Pager with extra classes', () => {
        const changePage = () => {
            // do nothing
        }

        const wrapper = mount(<Pager
            changePage={changePage}
            totalCount={50}
            pageSize={11}
            currentPage={2}
            className="xyz"
        />)

        const wrapperElement = wrapper.find('div[data-abc-id="pager"]')

        it('should have the classes inline and xyz', () => {
            expect(wrapperElement.hasClass('inline')).toBe(true)
            expect(wrapperElement.hasClass('xyz')).toBe(true)
        })
    })

    describe('responding to input events', () => {
        const changePage = jest.fn()

        const wrapper = mount(<Pager
            changePage={changePage}
            totalCount={50}
            pageSize={11}
            currentPage={2}
            className="xyz"
        />)

        const inputElement = wrapper.find('input')

        it('should set the state->currentPage to props->currentPage on input blur if input does not have a value or is 0', () => {
            wrapper.setState({currentPage:10})
            inputElement.simulate('change', {target: {value: 0}})
            inputElement.simulate('blur')
            expect(wrapper.state('currentPage')).toBe(2)
        })

        it('should not set the state->currentPage to props->currentPage on input blur if input has a value', () => {
            wrapper.setState({currentPage:10})
            inputElement.simulate('change', {target: {value: 5}})
            inputElement.simulate('blur')
            expect(wrapper.state('currentPage')).toBe(5)
        })
    })

    describe('render a Pager that only has one page', () => {
        const changePage = () => {
            // do nothing
        }

        const wrapper = mount(<Pager
            changePage={changePage}
            totalCount={1}
            pageSize={10}
            currentPage={1}
        />)

        const wrapperElement = wrapper.find('div[data-abc-id="pager"]')

        it('should have a disabled previous button', () => {
            const button = wrapperElement.find('button[data-abc-id="pagerPrevious"]')
            expect(button.props().disabled).toBe(true)
        })

        it('should have a disabled next button', () => {
            const button = wrapperElement.find('button[data-abc-id="pagerNext"]')
            expect(button.props().disabled).toBe(true)
        })
    })

    describe('test button disable at the page bounds', () => {
        const changePage = () => {
            // do nothing
        }

        const wrapper = mount(<Pager
            changePage={changePage}
            totalCount={10}
            pageSize={1}
            currentPage={1}
        />)

        const wrapperElement = wrapper.find('div[data-abc-id="pager"]')

        it('should have a disabled previous button on first page', () => {
            const button = wrapperElement.find('button[data-abc-id="pagerPrevious"]')
            expect(button.props().disabled).toBe(true)
        })

        it('should have a disabled next button on last page', () => {
            wrapper.setProps({currentPage: 10})

            const button = wrapperElement.find('button[data-abc-id="pagerNext"]')
            expect(button.props().disabled).toBe(true)
        })
    })

    describe('change page by buttons', () => {
        jest.useFakeTimers()
        let currentPage = 5

        const changePage = (next) => {
            currentPage = next
        }

        const wrapper = mount(<Pager
            changePage={changePage}
            totalCount={0}
            pageSize={1}
            currentPage={currentPage}
        />)

        wrapper.setProps({totalCount: 10})

        it('should render the previous page when the previous button is clicked', () => {
            const btn = wrapper.find(Button).first()
            const startingPage = currentPage

            btn.simulate('click', {preventDefault() {}})

            jest.runAllTimers()

            expect(currentPage).toBe(startingPage - 1)
        })

        it('should render the next page when the next button is clicked', () => {
            wrapper.setProps({currentPage})

            const btn = wrapper.find(Button).last()
            const startingPage = currentPage

            btn.simulate('click', {preventDefault() {}})

            jest.runAllTimers()

            expect(currentPage).toBe(startingPage + 1)
        })
    })

    describe('change page by input', () => {
        jest.useFakeTimers()
        let currentPage = 10

        const changePage = (next) => {
            currentPage = next
        }

        const wrapper = mount(<Pager
            changePage={changePage}
            totalCount={0}
            pageSize={1}
            currentPage={currentPage}
        />)

        wrapper.setProps({totalCount: 10})

        it('should render the entered page', () => {
            const input = wrapper.find(Input).last()

            input.simulate('change', {target: {value: 2}})

            jest.runAllTimers()

            expect(currentPage).toBe(2)
        })

        it('should render the last page when entered page is greater than last page', () => {
            const input = wrapper.find(Input).last()

            input.simulate('change', {target: {value: 11}})

            jest.runAllTimers()

            expect(currentPage).toBe(10)
        })

        it('should render the current page if entered page is empty', () => {
            const input = wrapper.find(Input).last()
            const expectedPage = currentPage

            input.simulate('change', {target: {value: ''}})
            input.simulate('blur')

            jest.runAllTimers()

            const inputValue = wrapper.find('input').props().value
            expect(currentPage).toBe(expectedPage)
            expect(inputValue).toBe(expectedPage.toString())
        })

        it('should render the first page when entered page is less than 1', () => {
            const input = wrapper.find(Input).last()

            input.simulate('change', {target: {value: -1}})

            jest.runAllTimers()

            expect(currentPage).toBe(1)
        }) 
    })

    describe('initial render with a current page prop that is outside of the page bounds', () => {
        const changePage = () => {
            // Do nothing
        }

        const firstPageWrapper = mount(<Pager
            changePage={changePage}
            totalCount={10}
            pageSize={1}
            currentPage={-1}
        />)

        it('should render the first page when initial current page is less than 1', () => {
            const inputValue = firstPageWrapper.find('input').props().value
            expect(inputValue).toBe('1')
        })

        const maxPageWrapper = mount(<Pager
            changePage={changePage}
            totalCount={10}
            pageSize={1}
            currentPage={11}
        />)

        it('should render the last page when initial current page is greater than last page', () => {
            const inputValue = maxPageWrapper.find('input').props().value
            expect(inputValue).toBe('10')
        })
    })
})