import React from 'react'
import {mount} from 'enzyme'
import {FormGroup, Input} from '@abc/protonpack'
import ReduxFormGroup from './'

describe('ReduxFormGroup', () => {
    describe('render a basic ReduxFormGroup', () => {
        const wrapper = mount(
            <ReduxFormGroup input={{name: 'xyz'}} meta={{submitting: false}}>
                <Input type="text" />
            </ReduxFormGroup>
        )

        const wrapperElement = wrapper.find(FormGroup)

        it('should contain a FormGroup', () => {
            expect(wrapperElement.length).toBe(1)
        })

        it('should contain an Input element', () => {
            expect(wrapperElement.childAt(0).type()).toBe(Input)
        })
    })

    describe('render a ReduxFormGroup with an error', () => {
        const wrapper = mount(
            <ReduxFormGroup input={{name: 'xyz'}} meta={{submitting: false, error: 'Lrr', touched: true}}>
                <Input type="text" />
            </ReduxFormGroup>
        )

        const wrapperElement = wrapper.find(FormGroup)

        it('should contain a FormGroup', () => {
            expect(wrapperElement.length).toBe(1)
        })

        it('should have an error on the formGroup', () => {
            expect(wrapperElement.hasClass('has-danger')).toBe(true)
            expect(wrapperElement.hasClass('has-feedback')).toBe(true)
        })

        it('should contain an Input element with an error', () => {
            const inputElement = wrapperElement.childAt(0)
            expect(inputElement.type()).toBe(Input)
            expect(inputElement.hasClass('form-control-danger')).toBe(true)
        })

        it('should have an error message', () => {
            expect(wrapperElement.childAt(1).hasClass('form-control-feedback')).toBe(true)
            expect(wrapperElement.childAt(1).text('Lrr'))
        })
    })

    describe('Input', () => {
        let wrapper
        let input

        const run = ({submitting, size, ...inputProps} = {}) => {
            wrapper = mount(
                <ReduxFormGroup input={{name: 'xyz'}} meta={{submitting}} size={size}>
                    <Input type="text" size="fake-size" {...inputProps}/>
                </ReduxFormGroup>
            )
            input = wrapper.find(Input)
        }

        afterEach(() => {
            wrapper && wrapper.unmount()
        })

        it('should be disabled when submitting', () => {
            run({submitting: true, disabled: false})
            expect(input.prop('disabled')).toBe(true)
        })

        it('should be disabled when input is disabled', () => {
            run({submitting: false, disabled: true})
            expect(input.prop('disabled')).toBe(true)
        })

        it('should have id equal to input name when id does not exist', () => {
            run()
            expect(input.prop('id')).toEqual('xyz')
        })

        it('should retain id when id does exist', () => {
            run({id: 'fake-id'})
            expect(input.prop('id')).toEqual('fake-id')
        })

        it('should have size equal to input size when a size is not specified', () => {
            run()
            expect(input.prop('size')).toEqual('fake-size')
        })

        it('should use new size when passed to the formGroup', () => {
            run({size: 'fake-formGroup-size'})
            expect(input.prop('size')).toEqual('fake-formGroup-size')
        })
    })
})