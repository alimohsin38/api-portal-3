import React from 'react'
import {mount} from 'enzyme'
import {ProgressBar} from '@abc/protonpack'
import StepBar from './'
import range from 'lodash/range'

const testTitleCount = 6
const testTitles = range(testTitleCount).map(step => `fake-title-${step}`)

describe('Step Bar', () => {
    describe('Test Elements/DOM', () => {
        const wrapper = mount(
            <StepBar step={1} titles={testTitles} />
        )

        const progressBar = wrapper.find(ProgressBar)
        const stepNumber = wrapper.find('.currentStepNumber')
        const stepTitle = wrapper.find('.currentStepTitle')
        const currentStep = wrapper.prop('step')
        const currentTitle = wrapper.prop('titles')[currentStep - 1]

        it('should contain a single ProgressBar element', () => {
            expect(progressBar.length).toBe(1)
        })

        it('should contain a step number node with the step number as the content', () => {
            expect(stepNumber.text()).toEqual(currentStep.toString())
        })

        it('should contain a step title node with the step title as the content', () => {
            expect(stepTitle.text()).toEqual(currentTitle)
        })
    })

    describe('Test Props/State', () => {
        const defaultProps = {
            step: 1,
            titles: testTitles,
        }

        let wrapper
        let progressBar
        let stepNumber
        let stepTitle

        beforeEach(() => {
            wrapper = mount(
                <StepBar {...defaultProps} className="fake-class-name" />
            )

            progressBar = wrapper.find(ProgressBar)
            stepNumber = wrapper.find('.currentStepNumber')
            stepTitle = wrapper.find('.currentStepTitle')
        })

        it('should handle passed className', () => {
            expect(wrapper.hasClass('fake-class-name')).toBe(true)
        })

        it('should change progressBar progress', () => {
            const step = 2
            wrapper.setProps({step})
            expect(progressBar.prop('progress')).toEqual(step / testTitles.length)
        })

        it('should change text content on step change', () => {
            const step = 2
            wrapper.setProps({step})
            expect(stepNumber.text()).toEqual(step.toString())
            expect(stepTitle.text()).toEqual(testTitles[step - 1])
        })

        it('should not allow steps <= 0', () => {
            wrapper.setProps({step: 0})
            expect(stepNumber.text()).toEqual('1')
            wrapper.setProps({step: -100})
            expect(stepNumber.text()).toEqual('1')
        })

        it('should automatically round down steps to the nearest integer', () => {
            wrapper.setProps({step: 2.123})
            expect(stepNumber.text()).toEqual('2')
            wrapper.setProps({step: 3.765})
            expect(stepNumber.text()).toEqual('3')
        })

        it('should cap step at titles length', () => {
            const step = testTitles.length + 1
            wrapper.setProps({step})
            expect(stepNumber.text()).toEqual(testTitles.length.toString())
        })

        it('should not render the step number when hideStepNumber == true', () => {
            wrapper.setProps({hideStepNumber: true})
            expect(wrapper.find('.currentStep__number').length).toEqual(0)
        })

        it('should pass remaining props to the progressBar', () => {
            const barStyle = 'success'
            const size = 'xl'
            wrapper.setProps({barStyle, size})
            expect(progressBar.prop('barStyle')).toEqual(barStyle)
            expect(progressBar.prop('size')).toEqual(size)
        })
    })
})