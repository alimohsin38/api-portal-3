import React, {Component} from 'react'
import {List} from '../../../export'
import {Button, Divider} from '@abc/protonpack'
import range from 'lodash/range'
import remove from 'lodash/remove'
import uniqueId from 'lodash/uniqueId'

const makeNewListItem = (count) => {
    return {
        id: uniqueId('list_uid_'),
        number: count + 1,
    }
}

export default class InteractiveListExample extends Component {
    constructor(props) {
        super(props)

        this.state = {
            count: 6,
            loading: false,
            options: range(6).map(makeNewListItem),
        }

        this.addItem = this.addItem.bind(this)
        this.removeItem = this.removeItem.bind(this)
        this.resetItems = this.resetItems.bind(this)
        this.renderGenericItem = this.renderGenericItem.bind(this)
    }

    addItem() {
        clearTimeout(this.timeout)
        this.timeout = 0
        const index = Math.floor(Math.random() * (this.state.options.length - 1))
        this.setState({
            count: this.state.count + 1,
            loading: false,
            options: [
                ...this.state.options.slice(0,index),
                makeNewListItem(this.state.count),
                ...this.state.options.slice(index),
            ],
        })
    }

    removeItem(id) {
        if (this.state.count > 0) {
            this.setState({
                count: this.state.count - 1,
                loading: false,
                options: remove(this.state.options, item => item.id !== id),
            })
        }
    }

    resetItems() {
        if (!this.timeout) {
            this.setState({
                count: 0,
                loading: true,
                options: [],
            })
            this.timeout = setTimeout(() => {
                this.timeout = 0
                this.setState({
                    count: 6,
                    loading: false,
                    options: range(6).map(makeNewListItem),
                })
            }, 3000)
        }
    }

    renderGenericItem(test) {
        return (
            <div className="example">
                <Button
                    size="sm"
                    btnStyle="primary"
                    onClick={() => this.removeItem(test.id)}
                    style={{width: '100%'}}
                >
                    Item {test.number} - Click to Remove
                </Button>
            </div>
        )
    }

    render() {
        return (
            <div>
                <Button size="sm" btnStyle="secondary" onClick={this.addItem}>Add New List Item</Button>
                <Button size="sm" btnStyle="secondary" onClick={this.resetItems}>Reload Items</Button>
                <Divider />
                <List
                    loading={this.state.loading}
                    displayData={this.state.options}
                    item={this.renderGenericItem}
                    {...this.props}
                />
            </div>
        )
    }
}
