import React, {Component} from 'react'
import {Fade, None} from './animations'
import {TransitionGroup} from 'react-transition-group'
import PropTypes from 'prop-types'
import {ListItem, ListItemLoading, ListItemNoResults} from './listItems'
import {Row} from '@abc/protonpack'
import styles from './list.styl'
import classnames from 'classnames'

const listTransitions = {
    fade: Fade,
    none: None,
}

export default class List extends Component {
    render() {
        const {
            displayData,
            item,
            emptyTemplate,
            loading,
            align,
            colProps,
            messages,
            direction,
            transition,
            idKey,
            ...remain
        } = this.props

        const hasResults = displayData.length > 0
        const Transition = listTransitions[transition] || None
        const directionStyle = `${direction}List`

        const alignItems = direction === 'horizontal' ? 'flex-start' : align
        const justifyContent = direction === 'horizontal' ? align : 'flex-start'

        const listStyles = {
            [styles.list]: true,
            [styles.noResults]: !hasResults,
            [styles.animatedList]: transition !== 'none',
            [styles[directionStyle]]: true,
        }

        return (
            <div className={styles.listWrapper}>
                <TransitionGroup
                    component={Row}
                    sm={{
                        alignItems,
                        justifyContent,
                    }}
                    exit={hasResults}
                    role="list"
                    data-abc-id="list"
                    className={classnames(listStyles)}
                    {...remain}
                >
                    {loading &&
                        <Transition
                            key="loading"
                            className={classnames(styles.loading, direction)}
                            {...remain}
                        >
                            <ListItemLoading />
                        </Transition>
                    }
                    {!loading && hasResults && displayData.map((obj, i) => (
                        <Transition
                            key={obj[idKey]}
                            role="listitem"
                            data-abc-id={`listitem-${i}`}
                            className={classnames(styles.listItem, direction)}
                            {...remain}
                        >
                            <ListItem {...colProps} >
                                {item(obj)}
                            </ListItem>
                        </Transition>
                    ))}
                    {!loading && !hasResults &&
                        <Transition
                            key="noResults"
                            className={classnames(styles.noResultsItem, direction)}
                            {...remain}
                        >
                            {emptyTemplate || <ListItemNoResults messages={messages} />}
                        </Transition>
                    }
                </TransitionGroup>
            </div>
        )
    }
}

List.propTypes = {
    align: PropTypes.oneOf([
        'center',
        'left',
        'right',
    ]),
    displayData: PropTypes.arrayOf(PropTypes.object).isRequired,
    loading: PropTypes.bool,
    idKey: PropTypes.string,
    item: PropTypes.func.isRequired,
    emptyTemplate: PropTypes.element,
    colProps: PropTypes.object,
    messages: PropTypes.shape({
        noResults: PropTypes.string,
        matchSearch: PropTypes.string,
        tryAgain: PropTypes.string,
    }),
    direction: PropTypes.oneOf([
        'horizontal',
        'vertical',
    ]),
    transition: PropTypes.string,
}

List.defaultProps = {
    align: 'left',
    colProps: {xs: 12},
    idKey: 'id',
    messages: {
        noResults: 'No Results Found',
        matchSearch: 'There are no results that match your search',
        tryAgain: 'Please try again',
    },
    direction: 'horizontal',
    transition: 'none',
}
