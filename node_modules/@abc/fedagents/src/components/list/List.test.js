import React from 'react'
import {mount} from 'enzyme'
import List from './'
import {None, Fade} from './animations'
import {Row} from '@abc/protonpack'
import {TransitionGroup} from 'react-transition-group'
import {ListItemLoading, ListItemNoResults} from './listItems'

describe('List', () => {
    const defaultList = [
        {id: '1', one: '1', two: '2', three: '3'},
        {id: '2', one: 'one', two: 'two', three: 'three'},
        {id: '3', one: 'eno', two: 'owt', three: 'eerht'},
        {id: '4', one: '1111', two: '2222', three: '4444'},
    ]

    const listItem = item => <div>{item.one} {item.two} {item.three}</div>

    describe('render a basic List', () => {
        const wrapper = mount(
            <List displayData={defaultList} item={listItem} />
        )

        const wrapperElement = wrapper.find(Row)

        it('should have a role list', () => {
            expect(wrapperElement.prop('role')).toBe('list')
        })

        it('should align items left list has elements', () => {
            expect(wrapperElement.props().sm).toEqual({alignItems: 'flex-start', justifyContent: 'left'})
        })

        describe('render columns properly', () => {
            const cols = [
                wrapperElement.childAt(0),
                wrapperElement.childAt(1),
                wrapperElement.childAt(2),
                wrapperElement.childAt(3),
            ]

            it('should have 4 Cols as children', () => {
                expect(cols[0].type()).toBe(None)
                expect(cols[0].prop('role')).toBe('listitem')
                expect(cols[0].prop('data-abc-id')).toBe('listitem-0')

                expect(cols[1].type()).toBe(None)
                expect(cols[1].prop('role')).toBe('listitem')
                expect(cols[1].prop('data-abc-id')).toBe('listitem-1')

                expect(cols[2].type()).toBe(None)
                expect(cols[2].prop('role')).toBe('listitem')
                expect(cols[2].prop('data-abc-id')).toBe('listitem-2')

                expect(cols[3].type()).toBe(None)
                expect(cols[3].prop('role')).toBe('listitem')
                expect(cols[3].prop('data-abc-id')).toBe('listitem-3')

                expect(cols[4]).toBe(undefined)
            })

            it('each Col should have 1 child div', () => {
                expect(cols[0].childAt(0).type()).toBe('div')
                expect(cols[0].childAt(0).text()).toBe(`${defaultList[0].one} ${defaultList[0].two} ${defaultList[0].three}`)

                expect(cols[1].childAt(0).type()).toBe('div')
                expect(cols[1].childAt(0).text()).toBe(`${defaultList[1].one} ${defaultList[1].two} ${defaultList[1].three}`)

                expect(cols[2].childAt(0).type()).toBe('div')
                expect(cols[2].childAt(0).text()).toBe(`${defaultList[2].one} ${defaultList[2].two} ${defaultList[2].three}`)

                expect(cols[3].childAt(0).type()).toBe('div')
                expect(cols[3].childAt(0).text()).toBe(`${defaultList[3].one} ${defaultList[3].two} ${defaultList[3].three}`)
            })
        })
    })

    describe('render a Loading List', () => {
        const wrapper = mount(
            <List displayData={[]} item={listItem} loading />
        )

        const loadingElement = wrapper.find(ListItemLoading)

        it('should have the child loading', () => {
            expect(loadingElement.type()).toBe(ListItemLoading)
        })
    })

    describe('render an empty List', () => {
        const wrapper = mount(
            <List displayData={[]} item={listItem} />
        )

        const noResultsElement = wrapper.find(ListItemNoResults)
        const noResultsItem = noResultsElement.find('.noResultsItem')

        it('should have the child with "no results found"', () => {
            expect(noResultsElement.type()).toBe(ListItemNoResults)
            expect(noResultsItem.childAt(0).type()).toBe('div')
            expect(noResultsItem.childAt(1).text()).toBe('No Results Found')
        })
    })

    describe('render a list with extra props', () => {
        const wrapper = mount(
            <List displayData={[]} item={listItem} data-test="yay"/>
        )

        it('should have the data-test="yay"', () => {
            expect(wrapper.prop('data-test')).toBe('yay')
        })
    })

    describe('render a list with overridden role', () => {
        const wrapper = mount(
            <List displayData={[]} item={listItem} role="newrole" />
        )

        it('should override the role', () => {
            expect(wrapper.prop('role')).toBe('newrole')
        })
    })

    describe('Transition Animations', () => {
        const transitionTypes = {
            fade: Fade,
            none: None,
        }

        Object.keys(transitionTypes).forEach((transitionType) => {
            it(`should use a "${transitionType}" transition`, () => {
                const wrapper = mount(
                    <List displayData={[{id:'fake-id'}]} item={listItem} transition={transitionType} />
                )
                const wrapperElement = wrapper.find(TransitionGroup)
                expect(wrapperElement.childAt(0).type()).toBe(transitionTypes[transitionType])
            })
        })

        it('should use a "None" transition when an invalid transition is assigned', () => {
            const wrapper = mount(
                <List displayData={[{id:'fake-id'}]} item={listItem} transition={'fake-transition'} />
            )
            const wrapperElement = wrapper.find(TransitionGroup)
            expect(wrapperElement.childAt(0).type()).toBe(None)
        })
    })

    describe('Directions', () => {
        const directions = [
            'horizontal',
            'vertical',
        ]

        directions.forEach((direction) => {
            it(`should render a "${direction}" list`, () => {
                const wrapper = mount(
                    <List displayData={[{id:'fake-id'}]} item={listItem} direction={direction} />
                )
                const wrapperElement = wrapper.find(TransitionGroup)
                expect(wrapperElement.hasClass(`${direction}List`)).toBe(true)
            })
        })
    })
})