import React from 'react'
import Icon from '@abc/quarkicons'
import {mount} from 'enzyme'
import Loading from './'

describe('Loading', () => {
    describe('render a basic loading icon w/ extra classes', () => {
        jest.useFakeTimers()

        const wrapper = mount(<Loading className="123 xyz" />)

        const wrapperElement = wrapper.find('div[data-abc-id="loadingSpinner"]')

        it('should be a div', () => {
            expect(wrapperElement.type()).toBe('div')
        })

        it('should have the data-abc-id loadingSpinner', () => {
            expect(wrapperElement.prop('data-abc-id')).toBe('loadingSpinner')
        })

        it('should wait for 500ms before showing', () => {
            expect(setTimeout.mock.calls.length).toBe(1)
            expect(setTimeout.mock.calls[0][1]).toBe(500)

            expect(wrapperElement.hasClass('hidden')).toBe(true)

            jest.runAllTimers()

            expect(wrapperElement.hasClass('hidden')).toBe(false)
            expect(wrapperElement.hasClass('center')).toBe(true)
        })

        it('should have a child icon', () => {
            const icon = wrapperElement.childAt(0)
            expect(icon.type()).toBe(Icon)
            expect(icon.hasClass('icon-spinner')).toBe(true)
        })

        it('should have a srOnly label', () => {
            const label = wrapperElement.childAt(1)
            expect(label.type()).toBe('span')
            expect(label.hasClass('sr-only'))
            expect(label.prop('data-abc-id')).toBe('loadingText')
        })

        it('should have extra classes', () => {
            expect(wrapperElement.hasClass('123')).toBe(true)
            expect(wrapperElement.hasClass('xyz')).toBe(true)
        })
       
        it('should be true', () => {
            expect(true).toBe(true)
        })
    })

    describe('clean itself up before unmounting', () => {
        jest.useFakeTimers()

        const wrapper = mount(<Loading />)

        it('unmount and remove timer', () => {
            expect(setTimeout.mock.calls.length).toBe(1)

            wrapper.unmount()

            expect(clearTimeout.mock.calls.length).toBe(1)
        })
    })

    describe('make a small Loading icon', () => {
        jest.useFakeTimers()

        const wrapper = mount(<Loading sm />)

        const loaderElement = wrapper.find('div')

        it('should have the class loaderSm', () => {
            expect(loaderElement.hasClass('loaderSm')).toBe(true)
        })
    })

    describe('make a medium Loading icon', () => {
        jest.useFakeTimers()

        const wrapper = mount(<Loading md />)

        it('should have the class loaderMd', () => {
            expect(wrapper.hasClass('loaderMd')).toBe(true)
        })
    })

    describe('make a large Loading icon', () => {
        jest.useFakeTimers()

        const wrapper = mount(<Loading lg />)

        it('should have the class loaderLg', () => {
            expect(wrapper.hasClass('loaderLg')).toBe(true)
        })
    })
})