import React from 'react'
import {shallow} from 'enzyme'
import {ProgressBar, Tooltip} from '@abc/protonpack'
import GoalBar from './'

const defaultState = {
    insideBar: false,
    insideTooltip: false,
    tooltipOpen: false,
}

jest.useFakeTimers()

describe('Goal Bar', () => {
    describe('Test Elements/DOM', () => {
        const wrapper = shallow(
            <GoalBar />
        )
        wrapper.setState(defaultState)

        const tooltip = wrapper.find(Tooltip)
        const progressBars = wrapper.find(ProgressBar)
        const bottomBar = progressBars.at(0)
        const topBar = progressBars.at(1)

        it('should contain a single Tooltip element', () => {
            expect(tooltip.length).toBe(1)
        })

        it('should contain a bottomBar', () => {
            expect(bottomBar.length).toBe(1)
        })

        it('should contain a topBar', () => {
            expect(topBar.length).toBe(1)
        })
    })

    describe('Test Props/State', () => {
        const wrapper = shallow(
            <GoalBar />
        )

        beforeEach(() => {
            wrapper.instance().componentDidMount()
            wrapper.setState(defaultState)
        })

        afterEach(() => {
            wrapper.instance().componentWillUnmount()
        })

        it('should set "insideBar" to "true" when tooltip opened', () => {
            expect(wrapper.state('insideBar')).toEqual(false)
            wrapper.instance().openTooltip()
            jest.runAllTimers()
            expect(wrapper.state('insideBar')).toEqual(true)
        })

        it('should set "insideBar" to "false" when tooltip closed', () => {
            wrapper.setState({
                ...defaultState,
                insideBar:true,
            })
            expect(wrapper.state('insideBar')).toEqual(true)
            wrapper.instance().closeTooltip()
            jest.runAllTimers()
            expect(wrapper.state('insideBar')).toEqual(false)
        })

        it('should set "insideTooltip" to "true" on Tooltip mouseEnter', () => {
            expect(wrapper.state('insideTooltip')).toEqual(false)
            wrapper.instance().mouseEnterTooltip()
            jest.runAllTimers()
            expect(wrapper.state('insideTooltip')).toEqual(true)
        })

        it('should set "insideTooltip" to "false" on Tooltip mouseLeave', () => {
            wrapper.setState({
                ...defaultState,
                insideTooltip:true,
            })
            expect(wrapper.state('insideTooltip')).toEqual(true)
            wrapper.instance().mouseLeaveTooltip()
            jest.runAllTimers()
            expect(wrapper.state('insideTooltip')).toEqual(false)
        })

        it('should set "tooltipOpen" to "true" when tooltip opened', () => {
            expect(wrapper.state('tooltipOpen')).toEqual(false)
            wrapper.instance().openTooltip()
            jest.runAllTimers()
            expect(wrapper.state('tooltipOpen')).toEqual(true)
        })

        it('should set "tooltipOpen" to "true" on bar click', () => {
            expect(wrapper.state('tooltipOpen')).toEqual(false)
            wrapper.simulate('click')
            jest.runAllTimers()
            expect(wrapper.state('tooltipOpen')).toEqual(true)
        })

        it('should not set "tooltipOpen" to "true" on bar click when insideBar is true', () => {
            wrapper.setState({
                ...defaultState,
                insideBar:true,
            })
            expect(wrapper.state('tooltipOpen')).toEqual(false)
            wrapper.simulate('click')
            jest.runAllTimers()
            expect(wrapper.state('tooltipOpen')).toEqual(false)
        })

        it('should set "tooltipOpen" to "false" when tooltip closed', () => {
            wrapper.setState({
                ...defaultState,
                tooltipOpen:true,
            })
            expect(wrapper.state('tooltipOpen')).toEqual(true)
            wrapper.instance().closeTooltip()
            jest.runAllTimers()
            expect(wrapper.state('tooltipOpen')).toEqual(false)
        })

        it('should not set "tooltipOpen" to "false" on Tooltip mouseLeave and insideBar is true', () => {
            wrapper.setState({
                ...defaultState,
                tooltipOpen: true,
                insideBar: true,
            })
            expect(wrapper.state('tooltipOpen')).toEqual(true)
            wrapper.instance().mouseLeaveTooltip()
            jest.runAllTimers()
            expect(wrapper.state('tooltipOpen')).toEqual(true)
        })

        it('should set "touched" to "true" when touching outside the tooltip when it\'s open', () => {
            wrapper.setState({
                ...defaultState,
                tooltipOpen: true,
            })
            expect(wrapper.state('touched')).toEqual(false)
            const event = new window.Event('touchend')
            document.dispatchEvent(event)
            expect(wrapper.state('touched')).toEqual(true)
            jest.runAllTimers()
            expect(wrapper.state('touched')).toEqual(false)
        })

        it('should not set "touched" to "true" when touching outside the tooltip when it\'s not open', () => {
            expect(wrapper.state('touched')).toEqual(false)
            const event = new window.Event('touchend')
            document.dispatchEvent(event)
            expect(wrapper.state('touched')).toEqual(false)
        })

        it('should set "tooltipOpen" to "false" when touching outside the tooltip when it\'s open', () => {
            wrapper.setState({
                ...defaultState,
                tooltipOpen: true,
            })
            const event = new window.Event('touchend')
            document.dispatchEvent(event)
            expect(wrapper.state('tooltipOpen')).toEqual(false)
        })

        it('should not set "tooltipOpen" to "false" when touching inside the tooltip when it\'s open', () => {
            wrapper.setState({
                ...defaultState,
                tooltipOpen: true,
            })
            const originalMethod = document.getElementById
            document.getElementById = jest.fn().mockReturnValue({contains: () => true})
            wrapper.instance().handleOutsideTouch({target: wrapper.instance().firstChild})
            expect(wrapper.state('tooltipOpen')).toEqual(true)
            document.getElementById = originalMethod
        })
    })

    describe('Test Goal Exceeded Bar colors', () => {
        const wrapper = shallow(
            <GoalBar />
        )

        beforeEach(() => {
            wrapper.setState(defaultState)
        })

        it('should set bottomBar "barStyle" to "success-light" if goal is not exceeded', () => {
            wrapper.setProps({goal: 10, max: 20, value: 10})
            const progressBars = wrapper.find(ProgressBar)
            const bottomBar = progressBars.at(0)
            expect(bottomBar.prop('barStyle')).toEqual('success-light')
        })

        it('should set topBar "barStyle" to "success" if goal is not exceeded', () => {
            wrapper.setProps({goal: 10, max: 20, value: 10})
            const progressBars = wrapper.find(ProgressBar)
            const topBar = progressBars.at(1)
            expect(topBar.prop('barStyle')).toEqual('success')
        })

        it('should set bottomBar "barStyle" to "danger-light" if goal is exceeded', () => {
            wrapper.setProps({goal: 10, max: 20, value: 15})
            const progressBars = wrapper.find(ProgressBar)
            const bottomBar = progressBars.at(0)
            expect(bottomBar.prop('barStyle')).toEqual('danger-light')
        })

        it('should set topBar "barStyle" to "danger" if goal is exceeded', () => {
            wrapper.setProps({goal: 10, max: 20, value: 15})
            const progressBars = wrapper.find(ProgressBar)
            const topBar = progressBars.at(1)
            expect(topBar.prop('barStyle')).toEqual('danger')
        })
    })
})