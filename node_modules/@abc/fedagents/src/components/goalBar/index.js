import React, {Component} from 'react'
import PropTypes from 'prop-types'
import Icon from '@abc/quarkicons'
import {Tooltip, SecondaryFont, ProgressBar} from '@abc/protonpack'
import uniqueId from 'lodash/uniqueId'
import classnames from 'classnames'
import styles from './goalBar.styl'

export default class GoalBar extends Component {
    constructor(props) {
        super(props)

        this.uniqueId = uniqueId('goal-bar__')
        this.state = {
            insideBar: false,
            insideTooltip: false,
            tooltipOpen: false,
        }

        this.closeTooltip = this.closeTooltip.bind(this)
        this.openTooltip = this.openTooltip.bind(this)
        this.toggleTooltip = this.toggleTooltip.bind(this)
        this.mouseEnterTooltip = this.mouseEnterTooltip.bind(this)
        this.mouseLeaveTooltip = this.mouseLeaveTooltip.bind(this)
        this.handleOutsideTouch = this.handleOutsideTouch.bind(this)
    }

    componentDidMount() {
        document.addEventListener('touchend', this.handleOutsideTouch)
    }

    componentWillUnmount() {
        document.removeEventListener('touchend', this.handleOutsideTouch)
    }

    handleOutsideTouch(event) {
        const el = document.getElementById(this.uniqueId)
        if (this.state.tooltipOpen) {
            this.setState({
                touched: true,
                insideBar: !!(el && el.contains(event.target)),
                insideTooltip: false,
                tooltipOpen: !!(el && el.contains(event.target)),
            })
        }
        setTimeout(() => {
            this.setState({
                insideBar: false,
                touched: false,
            })
        }, 0)
    }

    closeTooltip() {
        this.setState({
            touched: false,
            insideBar: false,
        })
        setTimeout(() => {
            this.setState({
                tooltipOpen: this.state.insideTooltip,
            })
        }, 100)
    }

    toggleTooltip() {
        if (!this.state.insideBar && !this.state.touched) {
            this.setState({
                tooltipOpen: !this.state.tooltipOpen,
            })
        }
        this.setState({
            touched: false,
        })
    }

    openTooltip() {
        this.setState({
            touched: false,
            insideBar: true,
            tooltipOpen: true,
        })
    }

    mouseEnterTooltip() {
        this.setState({
            touched: false,
            insideTooltip: true,
            tooltipOpen: true,
        })
    }

    mouseLeaveTooltip() {
        this.setState({
            touched: false,
            insideTooltip: false,
        })
        setTimeout(() => {
            this.setState({
                tooltipOpen: this.state.insideBar,
            })
        }, 100)
    }

    render() {
        // eslint-disable-next-line no-unused-vars
        const {goal, max, value, LOCALE_WORD_OF_LOWER, LOCALE_WORD_MAX, ...remain} = this.props

        const classes = {
            [styles.goalBar]: true,
        }

        const id = this.uniqueId
        const goalExceeded = value > goal
        const percentage = value / max
        const goalPercentage = goal / max

        const bottomBarStyle = goalExceeded ? 'danger-light' : 'success-light'
        const topBarStyle = goalExceeded ? 'danger' : 'success'
        const tooltipTextStyle = {
            [styles.tooltipText]: true,
        }
        const targetLeft = goalExceeded ? goalPercentage : percentage
        const targetWidth = Math.abs(percentage - goalPercentage)
        const targetCenter = targetLeft + (targetWidth / 2)
        const tooltipTargetStyle = {
            bottom: 0,
            left: goalExceeded ? `${targetCenter * 100}%` : `${targetLeft * 100}%`,
            position: 'absolute',
            top: 0,
            width: `${targetWidth * 50}%`,
        }
        const placement = goalExceeded && targetCenter > 0.5 ? 'left' : 'right'

        return (
            <div
                id={id}
                className={classnames(classes)}
                onMouseLeave={this.closeTooltip}
                onMouseEnter={this.openTooltip}
                onClick={this.toggleTooltip}
            >
                <ProgressBar
                    id={`${id}--bottom`}
                    barStyle={bottomBarStyle}
                    className={classnames(styles.bottomBar,styles.progressBar)}
                    progress={goalExceeded ? percentage : goalPercentage}
                    size="lg"
                />
                <ProgressBar
                    id={`${id}--top`}
                    barStyle={topBarStyle}
                    background="none"
                    className={classnames(styles.topBar,styles.progressBar)}
                    progress={goalExceeded ? goalPercentage : percentage}
                    size="lg"
                />
                <div
                    id={`${id}--tooltipTarget`}
                    style={tooltipTargetStyle}
                />
                <SecondaryFont size="xs" alpha={0.4}>
                    <div className={styles.maxIndicator}>{LOCALE_WORD_MAX}: {max}</div>
                </SecondaryFont>
                <Tooltip
                    autohide={false}
                    delay={{show: 0, hide: 0}}
                    className={styles.tooltip}
                    innerClassName={styles.tooltipInner}
                    isOpen={this.state.tooltipOpen}
                    target={`${id}--tooltipTarget`}
                    toggle={this.onToggle}
                    aria-hidden="true"
                    onMouseEnter={this.mouseEnterTooltip}
                    placement={placement}
                >
                    <div onMouseLeave={this.mouseLeaveTooltip}>
                        <SecondaryFont size='sm'>
                            <div className={classnames(tooltipTextStyle)}>
                                <SecondaryFont size='sm' color={topBarStyle}><Icon type="check"/></SecondaryFont>
                                <SecondaryFont size='sm' color={topBarStyle}><span> {value}</span></SecondaryFont>
                                <SecondaryFont size='sm'><span> {LOCALE_WORD_OF_LOWER} {goal}</span></SecondaryFont>
                            </div>
                        </SecondaryFont>
                    </div>
                </Tooltip>
            </div>
        )
    }
}

GoalBar.propTypes = {
    goal: PropTypes.number,
    max: PropTypes.number,
    value: PropTypes.number,
    LOCALE_WORD_OF_LOWER: PropTypes.string,
    LOCALE_WORD_MAX: PropTypes.string,
}

GoalBar.defaultProps = {
    goal: 100,
    max: 100,
    value: 0,
    LOCALE_WORD_OF_LOWER: 'of',
    LOCALE_WORD_MAX: 'Max',
}
