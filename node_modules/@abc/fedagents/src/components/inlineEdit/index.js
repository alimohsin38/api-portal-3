import React, {Component} from 'react'
import PropTypes from 'prop-types'
import {Input, FormGroup, InlineHover} from '@abc/protonpack'
import styles from './inlineEdit.styl'
import classnames from 'classnames'

export default class InlineEdit extends Component {
    constructor(props) {
        super(props)

        this.state = {
            editing: false,
            hovered: false,
        }

        this.handleEditClick = this.handleEditClick.bind(this)
        this.handleEditBlur = this.handleEditBlur.bind(this)
        this.handleEditFocus = this.handleEditFocus.bind(this)
        this.handleKeyPress = this.handleKeyPress.bind(this)
        this.setInputRef = this.setInputRef.bind(this)
    }

    setInputRef(target) {
        this.formInput = target
    }

    handleEditClick() {
        this.setState({editing: true})
        this.formInput && this.formInput.setState({focused: true})
    }

    handleEditFocus() {
        this.setState({editing: true})
        this.formInput && this.formInput.setState({focused: true})
    }

    handleEditBlur(e) {
        if (e.target.value !== this.input) {
            this.props.onEdit(e.target.value)
        }

        this.setState({editing: false})
        this.formInput && this.formInput.setState({focused: false})
    }

    handleKeyPress(e) {
        if (e.key === 'Enter') {
            this.handleEditBlur(e)
        }
    }

    render() {
        // eslint-disable-next-line no-unused-vars
        const {children, inputClass, inputProps, iconSize, onEdit, ...remain} = this.props

        this.input = React.Children.only(children).props.children

        return (
            <div>
                <FormGroup className={classnames(styles.formGroup, !this.state.editing ? styles.formGroupHidden : undefined)}>
                    <Input
                        type="text"
                        className={inputClass}
                        defaultValue={this.input || ''}
                        icon={{type: 'x', position: 'right'}}
                        onFocus={this.handleEditFocus}
                        onBlur={this.handleEditBlur}
                        onKeyUp={this.handleKeyPress}
                        ref={this.setInputRef}
                        {...inputProps}
                    />
                </FormGroup>
                { !this.state.editing &&
                    <InlineHover
                        icon="pencil"
                        iconSize={iconSize}
                        onClick={this.handleEditClick}
                        {...remain}
                    >
                        {children}
                    </InlineHover>
                }
            </div>
        )
    }
}

InlineEdit.propTypes = {
    children: PropTypes.node.isRequired,
    onEdit: PropTypes.func.isRequired,
    iconSize: PropTypes.string,
    inputClass: PropTypes.string,
    inputProps: PropTypes.object,
}