import React from 'react'
import InlineEdit from './'
import {mount} from 'enzyme'

describe('<InlineEdit />', () => {
    describe('Test basic render', () => {
        let inputValue = ''
        const handleEdit = value => inputValue = value

        const inlineEdit = mount(
            <InlineEdit
                onEdit={handleEdit}
                iconSize="1.25rem"
                inputClass="fake-input-class"
                inputProps={{style: {fontSize: '1rem'}}}
            >
                <h1 style={{padding: 0}}>{inputValue}</h1>
            </InlineEdit>
        )

        it('should render a FormGroup when editing', () => {
            const formGroup = inlineEdit.childAt(0)
            expect(formGroup.name()).toEqual('FormGroup')
        })

        it('should render an InlineHover when not editing', () => {
            const inlineHover = inlineEdit.childAt(1)
            expect(inlineHover.name()).toEqual('InlineHover')
        })
    })

    describe('Test editing features', () => {
        let inlineEdit
        let inputValue = ''
        const handleEdit = value => inputValue = value

        beforeEach(() => {
            inlineEdit = mount(
                <InlineEdit
                    onEdit={handleEdit}
                    iconSize="1.25rem"
                    inputClass="fake-input-class"
                    inputProps={{style: {fontSize: '1rem'}}}
                >
                    <h1>{inputValue}</h1>
                </InlineEdit>
            )
        })

        it('should toggle editing to \'true\' when inlineHover is clicked', () => {
            expect(inlineEdit.state('editing')).toEqual(false)
            const inlineHover = inlineEdit.childAt(1)
            inlineHover.simulate('click')
            expect(inlineEdit.state('editing')).toEqual(true)
        })

        it('should toggle editing to \'true\' when the input gains focus', () => {
            inlineEdit.setState({editing:false})
            const inlineInput = inlineEdit.find('input')
            inlineInput.simulate('focus')
            expect(inlineEdit.state('editing')).toEqual(true)
        })

        it('should toggle editing to \'false\' when the input looses focus', () => {
            inlineEdit.setState({editing:true})
            const inlineInput = inlineEdit.find('input')
            inlineInput.simulate('blur')
            expect(inlineEdit.state('editing')).toEqual(false)
        })

        it('should toggle editing to \'false\' when enter is pressed', () => {
            inlineEdit.setState({editing:true})
            const inlineInput = inlineEdit.find('input')
            inlineInput.simulate('keyup', {key: 'Enter'})
            expect(inlineEdit.state('editing')).toEqual(false)
        })

        it('should NOT toggle editing to \'false\' when any other key is pressed', () => {
            inlineEdit.setState({editing:true})
            const inlineInput = inlineEdit.find('input')
            inlineInput.simulate('keyup', {key: 'fake-key'})
            expect(inlineEdit.state('editing')).toEqual(true)
        })

        it('should trigger onEdit when input looses focus', () => {
            inlineEdit.setState({editing:true})
            const inlineInput = inlineEdit.find('input')
            inlineInput.simulate('blur', {target: {value: 'fake-input-value'}})
            expect(inputValue).toEqual('fake-input-value')
        })
    })
})