import React from 'react'
import {mount} from 'enzyme'
import Address from './'

import states from './states'

describe('Address', () => {
    const defaultAddress = {
        address1: '123 Fake St.',
        address2: 'PO Box 777',
        city: 'Springfield',
        state: 'OreGoN',
        zipCode: '90210',
    }

    describe('render an address in the proper format', () => {
        const wrapper = mount(
            <Address displayData={defaultAddress} />
        )

        const wrapperElement = wrapper.find('[data-abc-id="addressContainer"]')

        it('should be a have the data-abc-id of addressContainer and be a div', () => {
            expect(wrapperElement.is('div')).toBe(true)
        })

        it('should have a matching address1', () => {
            expect(wrapperElement.find('[data-abc-id="address1"]').text()).toBe(defaultAddress.address1)
        })

        it('should have a matching address2', () => {
            expect(wrapperElement.find('[data-abc-id="address2"]').text()).toBe(defaultAddress.address2)
        })

        it('should have a matching city', () => {
            expect(wrapperElement.find('[data-abc-id="city"]').text()).toBe(defaultAddress.city)
        })

        it('should have a matching state', () => {
            const stateAbbreviation = states[defaultAddress.state.toLowerCase()]
            expect(wrapperElement.find('[data-abc-id="state"]').text()).toBe(stateAbbreviation)
        })

        it('should have a matching zipCode', () => {
            expect(wrapperElement.find('[data-abc-id="zipCode"]').text()).toBe(defaultAddress.zipCode)
        })
    })

    describe('render an empty div when nothing is passed in', () => {
        const emptyAddress = {}

        const wrapper = mount(
            <Address displayData={emptyAddress} />
        )
        
        it('should be empty', () => {
            expect(wrapper.html()).toBe('<div>&nbsp;</div>')
        })
    })

    describe('allow extra properties', () => {
        const wrapper = mount(
            <Address displayData={defaultAddress} role="something" />
        )
        
        it('should have the prop role: something', () => {
            expect(wrapper.prop('role')).toBe('something')
        })
    })

    describe('allow data-abc-id to be overridden', () => {
        const wrapper = mount(
            <Address displayData={defaultAddress} data-abc-id="somethingElse" />
        )
        
        it('should have the prop data-abc-id: somethingElse', () => {
            expect(wrapper.prop('data-abc-id')).toBe('somethingElse')
        })
    })

    describe('allow for a short state name', () => {
        const state = 'AR'

        const longState = {
            ...defaultAddress,
            state,
        }

        const wrapper = mount(
            <Address displayData={longState} />
        )

        const wrapperElement = wrapper.find('[data-abc-id="addressContainer"]')

        it('should be a have the data-abc-id of addressContainer and be a div', () => {
            expect(wrapperElement.is('div')).toBe(true)
        })

        it('should have a matching address1', () => {
            expect(wrapperElement.find('[data-abc-id="address1"]').text()).toBe(defaultAddress.address1)
        })

        it('should have a matching address2', () => {
            expect(wrapperElement.find('[data-abc-id="address2"]').text()).toBe(defaultAddress.address2)
        })

        it('should have a matching city', () => {
            expect(wrapperElement.find('[data-abc-id="city"]').text()).toBe(defaultAddress.city)
        })

        it('should have a matching state', () => {
            const stateAbbreviation = states[states[state.toLowerCase()].toLowerCase()]
            expect(wrapperElement.find('[data-abc-id="state"]').text()).toBe(stateAbbreviation)
        })

        it('should have a matching zipCode', () => {
            expect(wrapperElement.find('[data-abc-id="zipCode"]').text()).toBe(defaultAddress.zipCode)
        })
    })
})