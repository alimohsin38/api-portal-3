import React from 'react'
import {mount, shallow} from 'enzyme'
import Accordion from './'

describe('AccountNumber', () => {
    describe('render the accordion', () => {
        const wrapper = mount(
            <Accordion displayContent="testing">
                Test
            </Accordion>
        )

        const wrapperElement = wrapper.find('div[data-abc-id="accordion"]')

        const buttonElement = wrapperElement.childAt(0)
        const contentElement = wrapperElement.childAt(1)

        it('should have a button with an icon', () => {
            expect(buttonElement.hasClass('button')).toBe(true)
            expect(buttonElement.childAt(0).hasClass('icon-plus-heavy'))
            expect(buttonElement.prop('data-abc-id')).toBe('accordionButton')
        })

        it('should have a content element', () => {
            expect(contentElement.hasClass('content')).toBe(true)
            expect(contentElement.hasClass('contentActive')).toBe(false)
            expect(contentElement.prop('data-abc-id')).toBe('accordionContent')
        })
    })


    describe('test if accordion is functional', () => {
        let isOpen = false

        const handleOpen = open => isOpen = open

        const wrapper = mount(
            <Accordion displayContent="testing" onToggle={handleOpen}>
                Test
            </Accordion>
        )

        const wrapperElement = wrapper.find('div[data-abc-id="accordion"]')

        const buttonElement = wrapperElement.childAt(0)
        const contentElement = wrapperElement.childAt(1)

        buttonElement.simulate('click')

        it('should have a content element open after click', () => {
            expect(contentElement.hasClass('content')).toBe(true)
            expect(contentElement.hasClass('contentActive')).toBe(true)
            expect(isOpen).toBe(true)
        })
    })

    describe('test if accordion accepts isOpen prop', () => {
        const wrapper = mount(
            <Accordion displayContent="testing" isOpen>
                Test
            </Accordion>
        )

        const wrapperElement = wrapper.find('div[data-abc-id="accordion"]')

        const contentElement = wrapperElement.childAt(1)

        it('should have a content element open', () => {
            expect(contentElement.hasClass('content')).toBe(true)
            expect(contentElement.hasClass('contentActive')).toBe(true)
        })
    })

    describe('test if accordion accepts a changed isOpen prop', () => {
        const wrapper = shallow(
            <Accordion displayContent="testing" isOpen>
                Test
            </Accordion>
        )

        const wrapperElement = wrapper.find('div[data-abc-id="accordion"]')

        const contentElement = wrapperElement.childAt(1)

        wrapper.setProps({isOpen: false})

        it('should have a content element closed', () => {
            expect(contentElement.hasClass('content')).toBe(true)
            expect(contentElement.hasClass('contentActive')).toBe(false)
        })
    })

    describe('test if accordion stays open after props changed', () => {
        const wrapper = mount(
            <Accordion displayContent="testing">
                Test
            </Accordion>
        )

        const wrapperElement = wrapper.find('div[data-abc-id="accordion"]')

        const buttonElement = wrapperElement.childAt(0)
        const contentElement = wrapperElement.childAt(1)

        buttonElement.simulate('click')

        wrapper.setProps({propThatDoesntExist: false})

        it('should have a content element open after click', () => {
            expect(contentElement.hasClass('content')).toBe(true)
            expect(contentElement.hasClass('contentActive')).toBe(true)
        })
    })
})