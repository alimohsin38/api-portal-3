import React from 'react'
import sinon from 'sinon'
import {mount} from 'enzyme'
import {Button} from '@abc/protonpack'
import Icon from '@abc/quarkicons'
import EmailButton from './'

describe('Email Button', () => {
    const defEmail = 'Hubert.ThugLife.Farnsworth@PlanetExpress.com'
    const defEmailLower = defEmail.toLowerCase()
    const fakeEmailAddress = 'Fake@Email.Address'.toLowerCase()
    const fakeEmailObject = {address:fakeEmailAddress}

    describe('render an email button', () => {
        const wrapper = mount(
            <EmailButton displayData={defEmail} />
        )

        const wrapperElement = wrapper.find(Button)

        it('should contain a <Button />', () => {
            expect(wrapperElement.length).toBe(1)
        })

        it('should have the prop link', () => {
            expect(wrapperElement.prop('btnStyle')).toBe('link')
        })

        it('should have the className emailButton', () => {
            expect(wrapperElement.prop('className')).toBe('emailButton')
        })

        it('should have the title of the passed in email', () => {
            expect(wrapperElement.prop('title')).toBe(defEmailLower)
        })

        it('should have the title of the passed in email address object', () => {
            wrapper.setProps({displayData: fakeEmailObject})
            expect(wrapperElement.prop('title')).toBe(fakeEmailAddress)
        })

        it('should have the title of "none provided" if no displayData is provided', () => {
            wrapper.setProps({displayData: undefined})
            expect(wrapperElement.prop('title')).toBe('none provided')
        })

        it('should have the data-abc-id of emailButton', () => {
            expect(wrapperElement.prop('data-abc-id')).toBe('emailButton')
        })

        it('should have an envelope icon', () => {
            expect(wrapperElement.find(Icon).prop('type')).toBe('envelope')
        })
    })
    
    describe('test click functionality', () => {
        // this could probably be done with Jest mocks, but I'm not sure how
        const stub = sinon.stub(window.location, 'assign')

        const wrapper = mount(
            <EmailButton displayData={defEmail} />
        )

        it(`should try to send the user to window.location mailto:${defEmailLower}`, () => {
            wrapper.find(Button).simulate('click', stub)
            expect(stub.callCount).toBe(1)

            wrapper.find(Button).simulate('click', stub)
            expect(stub.callCount).toBe(2)
        })
    })
})