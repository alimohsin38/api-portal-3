import React from 'react'
import {mount} from 'enzyme'
import Email from './'

describe('Email', () => {
    const defEmail = 'Fry@PlanetExpress.com'
    const defEmailLower = defEmail.toLowerCase()

    describe('render an email in the proper format', () => {
        const wrapper = mount(
            <Email className="testClass" displayData={defEmail} />
        )

        const wrapperElement = wrapper.find('a')

        it('should be an anchor', () => {
            expect(wrapperElement.matchesElement(<a>Email</a>)).toBe(true)
        })

        it('should have the data-abc-id of email', () => {
            expect(wrapperElement.prop('data-abc-id')).toBe('email')
        })

        it('should have the href mailto email', () => {
            expect(wrapperElement.props().href).toBe(`mailto:${defEmailLower}`)
        })

        it('should have the right classNames', () => {
            expect(wrapperElement.hasClass('email')).toBe(true)
            expect(wrapperElement.hasClass('testClass')).toBe(true)
        })
    })

    describe('render an email with object data type', () => {
        const emailObject = {address: 'test@test.com'}
        const emptyEmailObject = {}

        const email = mount(
            <Email displayData={emailObject} />
        )

        const wrapperElement = email.find('a')

        it('should be an anchor', () => {
            expect(wrapperElement.matchesElement(<a>Email</a>)).toBe(true)
        })

        it('should have the data-abc-id of email', () => {
            expect(wrapperElement.prop('data-abc-id')).toBe('email')
        })

        it('should have the href mailto email', () => {
            expect(wrapperElement.props().href).toBe(`mailto:${emailObject.address}`)
        })

        const emptyEmail = mount(
            <Email displayData={emptyEmailObject} />
        )

        it('should be none provided', () => {
            expect(emptyEmail.html()).toBe('<em class="email" data-abc-id="email">none provided</em>')
        })
    })

    describe('render none provided when nothing is passed in', () => {
        const emptyEmail = null

        const wrapper = mount(
            <Email displayData={emptyEmail} />
        )

        it('should be none provided', () => {
            expect(wrapper.html()).toBe('<em class="email" data-abc-id="email">none provided</em>')
        })
    })

    describe('render a span without a link using noLink and allow extra properties', () => {
        const wrapper = mount(
            <Email displayData={defEmail} noLink role="I'm an email!"/>
        )

        it('should be a span with text', () => {
            expect(wrapper.html()).toBe(`<span class="email" role="I'm an email!" data-abc-id="email">${defEmailLower}</span>`)
        })
    })

    describe('render and anchor with children', () => {
        const wrapper = mount(
            <Email displayData={defEmail}>Email Them!</Email>
        )

        const wrapperElement = wrapper.find('a')

        it('should be an anchor', () => {
            expect(wrapperElement.matchesElement(<a>Email Them!</a>)).toBe(true)
        })

        it('should have the data-abc-id of email', () => {
            expect(wrapperElement.prop('data-abc-id')).toBe('email')
        })

        it('should have the href mailto email', () => {
            expect(wrapperElement.props().href).toBe(`mailto:${defEmailLower}`)
        })
    })

    describe('render an anchor showing the email address using showAddress', () => {
        const wrapper = mount(
            <Email displayData={defEmail} showAddress />
        )

        const wrapperElement = wrapper.find('a')

        it('should be an anchor', () => {
            expect(wrapperElement.matchesElement(<a>{defEmailLower}</a>)).toBe(true)
        })

        it('should have the data-abc-id of email', () => {
            expect(wrapperElement.prop('data-abc-id')).toBe('email')
        })

        it('should have the href mailto email', () => {
            expect(wrapperElement.props().href).toBe(`mailto:${defEmailLower}`)
        })
    })

    describe('render a span without a link using noLink and show the email address using showAddress', () => {
        const wrapper = mount(
            <Email displayData={defEmail} noLink showAddress />
        )

        const emailSpan = wrapper.find('span')

        it('should a span with text', () => {
            expect(emailSpan.matchesElement(<span>{defEmailLower}</span>)).toBe(true)
        })

        it('should have the data-abc-id of email', () => {
            expect(emailSpan.prop('data-abc-id')).toBe('email')
        })
    })

    describe('should allow extra properties', () => {
        const wrapper = mount(
            <Email displayData={defEmail} role="list" />
        )

        it('should have the prop role: list', () => {
            expect(wrapper.prop('role')).toBe('list')
        })
    })
})