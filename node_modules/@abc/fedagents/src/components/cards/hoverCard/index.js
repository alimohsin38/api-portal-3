import React, {Component} from 'react'
import PropTypes from 'prop-types'
import Icon from '@abc/quarkicons'
import requiredIf from 'utils/requiredIf'
import styles from './hoverCard.styl'

export default class HoverCard extends Component {
    buildClasses(className, isHovered, disableHover) {
        const classes = [styles.container]

        if (className) {
            classes.push(className)
        }

        if (!disableHover) {
            classes.push(styles.hoverContainer)
        }

        if (isHovered && !disableHover) {
            classes.push(styles.hovered)
        }

        return classes.join(' ').trim()
    }

    render() {
        const {icon, children, onIconClick, onIconHover, className, isHovered, disableHover, ...remain} = this.props

        const classes = this.buildClasses(className, isHovered, disableHover)

        return (
            <div className={classes} data-abc-id="hoverCard" {...remain}>
                {icon && !disableHover &&
                    <div
                        className={styles.iconContainer}
                        onClick={onIconClick}
                        onMouseOver={onIconHover}
                        data-abc-id="iconContainer">
                        <Icon type={icon} className={styles.titleIcon} data-abc-id="icon" />
                    </div>
                }
                <div data-abc-id="hoverCardContent">
                    {children}
                </div>
            </div>
        )
    }
}

HoverCard.propTypes = {    
    children: PropTypes.node.isRequired,
    className: PropTypes.string,
    icon: requiredIf(PropTypes.string, props => props.onIconClick || props.onIconHover),
    onIconClick: requiredIf(PropTypes.func, props => props.icon && !props.onIconHover), 
    onIconHover: requiredIf(PropTypes.func, props => props.icon && !props.onIconClick),
    isHovered: PropTypes.bool,
    disableHover: PropTypes.bool,
}

HoverCard.defaultProps = {
    isHovered: false,
}
