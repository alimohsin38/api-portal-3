import React from 'react'
import Icon from '@abc/quarkicons'
import {mount} from 'enzyme'
import HoverCard from './'

describe('HoverCard', () => {
    describe('render a basic hover card', () => {
        const wrapper = mount(
            <HoverCard>
                Some stuff
            </HoverCard>
        )

        const wrapperElement = wrapper.find('.container')

        it('should render a div.container', () => {
            expect(wrapperElement.type()).toBe('div')
        })

        it('should have the data-abc-id of hoverCard', () => {
            expect(wrapperElement.prop('data-abc-id')).toBe('hoverCard')
        })

        it('should have the hoverContainer class', () => {
            expect(wrapperElement.hasClass('hoverContainer')).toBe(true)
        })
    })

    describe('render a icon hover card', () => {
        const wrapper = mount(
            <HoverCard icon="pencil" onIconClick={() => {}}>
                Some stuff
            </HoverCard>
        )

        const wrapperElement = wrapper.find('.container')
        const iconContainer = wrapperElement.childAt(0)

        it('should be a div', () => {
            expect(iconContainer.type()).toBe('div')
        })

        it('should have teh class .iconContainer', () => {
            expect(iconContainer.hasClass('iconContainer')).toBe(true)
        })

        it('should have the data-abc-id of iconContainer', () => {
            expect(iconContainer.prop('data-abc-id')).toBe('iconContainer')
        })

        describe('child icon should have an icon', () => {
            const icon = iconContainer.find(Icon)
            expect(icon.hasClass('icon-pencil')).toBe(true)
            expect(icon.hasClass('titleIcon')).toBe(true)
            expect(icon.prop('data-abc-id')).toBe('icon')
        })
    })

    describe('render a hover card hovered', () => {
        const wrapper = mount(
            <HoverCard icon="pencil" onIconClick={() => this.clicked()} isHovered>
                Some stuff   
            </HoverCard>
        )

        const wrapperElement = wrapper.find('.container')

        it('should render a div.container', () => {
            expect(wrapperElement.type()).toBe('div')
        })

        it('should have the data-abc-id of hoverCard', () => {
            expect(wrapperElement.prop('data-abc-id')).toBe('hoverCard')
        })

        it('should have the class .hovered', () => {
            expect(wrapperElement.hasClass('hovered')).toBe(true)
        })

        describe('render a child icon container', () => {
            const iconContainer = wrapperElement.childAt(0)

            it('should be a div', () => {
                expect(iconContainer.type()).toBe('div')
            })

            it('should have the class .iconContainer', () => {
                expect(iconContainer.hasClass('iconContainer')).toBe(true)
            })

            it('should have the data-abc-id of iconContainer', () => {
                expect(iconContainer.prop('data-abc-id')).toBe('iconContainer')
            })

            describe('child icon should have an icon', () => {
                const icon = iconContainer.find(Icon)
                expect(icon.hasClass('icon-pencil')).toBe(true)
                expect(icon.hasClass('titleIcon')).toBe(true)
                expect(icon.prop('data-abc-id')).toBe('icon')
            })
        })
    })

    describe('render a hover card hovered', () => {
        const wrapper = mount(
            <HoverCard icon="pencil" onIconClick={() => this.clicked()} disableHover>
                Some stuff   
            </HoverCard>
        )

        const wrapperElement = wrapper.find('.container')

        it('should render a div.container', () => {
            expect(wrapperElement.type()).toBe('div')
        })

        describe('should NOT render a child icon container', () => {
            expect(wrapperElement.find('.iconContainer').length).toBe(0)
        })

        it('should have the hoverContainer class', () => {
            expect(wrapperElement.hasClass('hoverContainer')).toBe(false)
        })
    })

    describe('render a hover card hovered', () => {
        const wrapper = mount(
            <HoverCard icon="pencil" onIconClick={() => this.clicked()} isHovered className="xyz 123 abc">
                Some stuff   
            </HoverCard>
        )

        const wrapperElement = wrapper.find('.container')

        it('should render a div.container', () => {
            expect(wrapperElement.type()).toBe('div')
        })

        it('should have the data-abc-id of hoverCard', () => {
            expect(wrapperElement.prop('data-abc-id')).toBe('hoverCard')
        })

        it('should have the class .hovered', () => {
            expect(wrapperElement.hasClass('hovered')).toBe(true)
        })

        it('should have the class .xyz .abc and .123', () => {
            expect(wrapperElement.hasClass('xyz')).toBe(true)
            expect(wrapperElement.hasClass('123')).toBe(true)
            expect(wrapperElement.hasClass('abc')).toBe(true)
        })

        describe('render a child icon container', () => {
            const iconContainer = wrapperElement.childAt(0)

            it('should be a div', () => {
                expect(iconContainer.type()).toBe('div')
            })

            it('should have teh class .iconContainer', () => {
                expect(iconContainer.hasClass('iconContainer')).toBe(true)
            })

            it('should have the data-abc-id of iconContainer', () => {
                expect(iconContainer.prop('data-abc-id')).toBe('iconContainer')
            })

            describe('child icon should have an icon', () => {
                const icon = iconContainer.find(Icon)
                expect(icon.hasClass('icon-pencil')).toBe(true)
                expect(icon.hasClass('titleIcon')).toBe(true)
                expect(icon.prop('data-abc-id')).toBe('icon')
            })
        })
    })
})