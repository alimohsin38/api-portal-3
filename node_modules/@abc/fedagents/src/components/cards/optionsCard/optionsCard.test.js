import React from 'react'
import {mount} from 'enzyme'
import OptionsCard from './'

const boatBrands = [
    {id: 'MB', name: 'MB - Atwater, California', checked: true},
    {id: 'BU', name: 'Malibu - Loudon Tennessee', checked: true, disabled: true},
    {id: 'M_C', name: 'MasterCraft - Vonore Tennessee', checked: true},
    {id: 'TIGE', name: 'Tige - Abilene Texas', checked: true, disabled: true},
    {id: 'AXIS', name: 'Axis - Vonore Tennessee', checked: true},
    {id: 'SKI_N', name: 'Ski Nautique - Orlando Florida', checked: true},
]
const dummyHandleChange = () => { /* placeholder */ }

describe('OptionsCard', () => {
    describe('render a basic OptionsCard', () => {
        const wrapper = mount(
            <OptionsCard
                title="Boat Brands"
                options={boatBrands}
                onOptionChange={dummyHandleChange}
                onSelectAllChange={dummyHandleChange}
                className="test-rest"
            />
        )

        it('should have a title', () => {
            const headerTitle = wrapper.find('h2[data-abc-id="header-title"]')
            expect(headerTitle.text()).toBe('Boat Brands')
        })

        const card = wrapper.first()
        it('should not have the class .cardPadding', () => {
            expect(card.hasClass('cardPadding')).toBe(false)
            expect(card.hasClass('card')).toBe(true)
        })
        it('should have the className passed down through rest', () => {
            expect(card.hasClass('test-rest')).toBe(true)
        })

        it('should have a check all checkbox', () => {
            const selectAllCheckbox = wrapper.find('input[data-abc-id="header-select-all"]')
            expect(selectAllCheckbox.prop('type')).toBe('checkbox')
        })

        it('should render its children', () => {
            const options = wrapper.find('div[data-abc-id="body"] div[data-abc-id="labelGroup"]')
            expect(options.length).toBe(6)
        })
    })

    describe('render a disabled OptionsCard', () => {
        const wrapper = mount(
            <OptionsCard
                title="Boat Brands"
                options={boatBrands}
                onOptionChange={dummyHandleChange}
                onSelectAllChange={dummyHandleChange}
                disabled
            />
        )

        const selectAllCheckbox = wrapper.find('input[data-abc-id="header-select-all"]')

        it('should have a disabled select all checkbox when disabled property is true', () => {
            expect(selectAllCheckbox.props().disabled).toBe(true)
        })
    })

    describe('test select all', () => {
        let selectAllChangeCount = 0
        const handleSelectAllChange = () => selectAllChangeCount += 1

        const wrapper = mount(
            <OptionsCard
                title="Boat Brands"
                options={boatBrands}
                onOptionChange={dummyHandleChange}
                onSelectAllChange={handleSelectAllChange}
            />
        )

        const selectAllCheckbox = wrapper.find('input[data-abc-id="header-select-all"]')
        selectAllCheckbox.simulate('change')

        it('should call select all change handler when change event is fired', () => {
            expect(selectAllChangeCount).toBe(1)
        })
    })

    describe('test options rendered', () => {
        let optionChangeCount = 0
        const handleOptionChange = () => optionChangeCount += 1

        const wrapper = mount(
            <OptionsCard
                title="Boat Brands"
                options={boatBrands}
                onOptionChange={handleOptionChange}
                onSelectAllChange={dummyHandleChange}
            />
        )

        const optionLabelGroup = wrapper.find('div[data-abc-id="body"] div[data-abc-id="labelGroup"]').first()

        it('should render option name as its label', () => {
            expect(optionLabelGroup.text()).toBe(boatBrands[0].name)
        })

        const optionCheckbox = optionLabelGroup.find('#MB')

        it('should be checked when property checked is true', () => {
            expect(optionCheckbox.props().checked).toBe(true)
        })

        optionCheckbox.simulate('change')

        it('should call option change handler when change event is fired', () => {
            expect(optionChangeCount).toBe(1)
        })

        const disabledOptionCheckbox = wrapper.find('div[data-abc-id="body"] #BU')

        it('should be disabled when property disabled is true', () => {
            expect(disabledOptionCheckbox.props().disabled).toBe(true)
        })
    })
})