import React, {Component} from 'react'
import {VirtualizedList} from '../../../../export'
import {Button, Divider} from '@abc/protonpack'
import range from 'lodash/range'
import uniqueId from 'lodash/uniqueId'

const makeNewListItem = offset => (count) => {
    return {
        id: uniqueId('list_uid_'),
        number: offset + count + 1,
    }
}

export default class InfiniteScrollListExample extends Component {
    constructor(props) {
        super(props)

        this.state = {
            count: 20,
            loading: false,
            options: range(20).map(makeNewListItem(0)),
        }

        this.loadMore = this.loadMore.bind(this)
        this.resetItems = this.resetItems.bind(this)
        this.renderGenericItem = this.renderGenericItem.bind(this)
    }

    loadMore() {
        if (!this.timeout) {
            this.setState({
                loading: true,
            })
            this.timeout = setTimeout(() => {
                this.timeout = 0
                this.setState({
                    count: this.state.count + 10,
                    loading: false,
                    options: [
                        ...this.state.options,
                        ...range(10).map(makeNewListItem(this.state.count)),
                    ],
                })
            }, 3000)
        }
    }

    resetItems() {
        if (!this.timeout) {
            this.setState({
                count: 0,
                loading: true,
                options: [],
            })
            this.timeout = setTimeout(() => {
                this.timeout = 0
                this.setState({
                    count: 20,
                    loading: false,
                    options: range(20).map(makeNewListItem(0)),
                })
            }, 3000)
        }
    }

    renderGenericItem(test) {
        return (
            <div className="example">
                <Button
                    size="sm"
                    btnStyle="primary"
                    style={{width: '100%'}}
                >
                    Item {test.number}
                </Button>
            </div>
        )
    }

    render() {
        return (
            <div>
                <Button size="sm" btnStyle="secondary" onClick={this.resetItems}>Reload Items</Button>
                <Divider />
                <VirtualizedList
                    loading={this.state.loading}
                    displayData={this.state.options}
                    item={this.renderGenericItem}
                    transition="fade"
                    onInfiniteLoad={this.loadMore}
                    totalResults={Math.min(this.state.options.length > 0 ? this.state.options.length + 1 : 0, 100)}
                    {...this.props}
                />
            </div>
        )
    }
}
