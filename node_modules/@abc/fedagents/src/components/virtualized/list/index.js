import React, {Component} from 'react'
import PropTypes from 'prop-types'
import {
    AutoSizer,
    CellMeasurer,
    CellMeasurerCache,
    InfiniteLoader,
    List,
    WindowScroller,
    defaultCellRangeRenderer,
} from 'react-virtualized'
import {TransitionGroup} from 'react-transition-group'
import {Row} from '@abc/protonpack'
import {Fade, None} from 'components/list/animations'
import FAList from 'components/list'
import {ListItem, ListItemLoading, ListItemNoResults} from 'components/list/listItems'
import styles from 'components/list/list.styl'
import classnames from 'classnames'

const listTransitions = {
    fade: Fade,
    none: None,
}

export default class VirtualizedList extends Component {
    constructor(props) {
        super(props)

        this.isRowLoaded = this.isRowLoaded.bind(this)
        this.keyMapper = this.keyMapper.bind(this)

        this.cellRangeRenderer = this.cellRangeRenderer.bind(this)
        this.listRowRenderer = this.listRowRenderer.bind(this)
        this.noResultsRowRenderer = this.noResultsRowRenderer.bind(this)
        this.wrapRow = this.wrapRow.bind(this)

        this.handleLoadMoreRows = this.handleLoadMoreRows.bind(this)
        this.handleRowsRendered = this.handleRowsRendered.bind(this)

        this.setListContainerReference = this.setListContainerReference.bind(this)

        this._cache = new CellMeasurerCache({
            fixedWidth: true,
            minHeight: 16,
            keyMapper: this.keyMapper,
        })

        this._rowData = {}

        this.state = {
            scrollElement: props.scrollElement,
        }
    }

    componentDidMount() {
        this.setScrollParent()
    }

    componentWillReceiveProps(newProps) {
        !newProps.displayData.length && this._cache.clearAll()
        if (this.props.loading && !newProps.loading && this.props.displayData.length === 0) {
            this._rowData = {}
        }
    }

    componentDidUpdate(prevProps) {
        if (prevProps.scrollElement !== this.props.scrollElement) {
            this.setScrollParent()
        }
    }

    setListContainerReference(container) {
        this._container = container
        !this.props.scrollElement && this.setScrollParent()
    }

    cellRangeRenderer(props) {
        const {
            displayData,
            align,
            transition,
        } = this.props

        for (let i = 0; i < displayData.length; i++) {
            const key = this.keyMapper(i, 0)
            this._rowData[key] = {
                ...(this._rowData[key] || {}),
                lastChange: 'cellRangeRenderer',
                appear: false,
                enter: false,
                exit: false,
            }
        }

        const children = defaultCellRangeRenderer(props)

        const hasResults = displayData.length > 0

        const alignItems = align
        const justifyContent = 'flex-start'

        const listStyles = {
            [styles.list]: true,
            [styles.noResults]: !hasResults,
            [styles.animatedList]: transition !== 'none',
            [styles.verticalList]: true,
        }

        return [(
            <TransitionGroup
                component={Row}
                sm={{
                    alignItems,
                    justifyContent,
                }}
                role="list"
                data-abc-id="list"
                className={classnames(listStyles)}
                children={children}
                key="transition-group"
                style={{}}
            />
        )]
    }

    isRowLoaded({index}) {
        return this.props.isRowLoaded
            ? this.props.isRowLoaded({index})
            : this.props.displayData && !!this.props.displayData[index]
    }

    keyMapper(rowIndex, columnIndex) {
        const {
            displayData,
            idKey,
            loading,
        } = this.props

        const rowData = displayData[rowIndex]
        const totalResults = this.props.totalResults || displayData.length

        const hasResults = !rowData || totalResults <= 0
            ? 'noResults'
            : rowData && rowData[idKey]

        const key = loading && rowIndex === displayData.length
            ? 'loading'
            : hasResults

        return key || `${rowIndex}-${columnIndex}`
    }

    handleLoadMoreRows(props) {
        return !this.props.loading
            && this.props.onInfiniteLoad
            && this.props.onInfiniteLoad(props)
    }

    handleRowsRendered(callback) {
        return (parameters) => {
            for (let i = 0; !this.props.loading && i < this.props.displayData.length; i++) {
                const key = this.keyMapper(i, 0)
                this._rowData[key] = {
                    ...(this._rowData[key] || {}),
                    lastChange: 'handleRowsRendered',
                    appear: false,
                    enter: false,
                }
            }
            return callback(parameters)
        }
    }

    wrapRow(props) {
        const {
            align,
            colProps,
            transition,
        } = this.props

        const {
            index,
            key,
            transitions,
            rowElement,
            parent,
            style,
            isScrolling, // eslint-disable-line no-unused-vars
            isVisible, // eslint-disable-line no-unused-vars
            ...remain
        } = props

        const Transition = listTransitions[transition] || None
        const alignSelf = align === 'center' ? align : `flex-${align === 'right' ? 'end' : 'start'}`

        return (
            <Transition
                {...transitions}
                key={key}
                style={{}}
            >
                <CellMeasurer
                    cache={this._cache}
                    columnIndex={0}
                    rowIndex={index}
                    parent={parent}
                >
                    <ListItem
                        role="listitem"
                        data-abc-id={key}
                        {...colProps}
                        style={{
                            ...style,
                            alignSelf,
                        }}
                        {...remain}
                    >
                        {rowElement}
                    </ListItem>
                </CellMeasurer>
            </Transition>
        )
    }

    listRowRenderer(props) {
        const {
            displayData,
            item,
        } = this.props

        const {
            index,
            isScrolling,
            isVisible,
        } = props

        const key = this.keyMapper(index, 0)
        const rowData = displayData[index]

        this._rowData[key] = this._rowData[key] || {
            lastChange: 'listRowRenderer',
            appear: isVisible,
            enter: isVisible,
            exit: false,
        }

        return rowData
            ? this.wrapRow({
                ...props,
                key,
                rowElement: item({
                    index,
                    isScrolling,
                    isVisible,
                    key,
                    ...rowData,
                }),
                className: styles.listItem,
                transitions: this._rowData[key],
            })
            : index === displayData.length && this.noResultsRowRenderer(props)
    }

    noResultsRowRenderer(props = {}) {
        const {
            displayData,
            emptyTemplate,
            loading,
            messages,
            totalResults,
        } = this.props

        const rowCount = (totalResults || displayData.length) + (loading ? 1 : 0)

        const NoResults = emptyTemplate || ListItemNoResults
        const transitions = {
            lastChange: 'noResultsRowRenderer',
            appear: true,
            enter: true,
            exit: false,
        }

        return loading
            ? this.wrapRow({
                index: displayData.length,
                ...props,
                key: 'loading',
                className: styles.loading,
                rowElement: (<ListItemLoading />),
                transitions,
            })
            : rowCount === 0 && this.wrapRow({
                index: 0,
                ...props,
                key: 'noResults',
                className: styles.noResultsItem,
                rowElement: (<NoResults messages={messages} />),
                transitions,
            })
    }

    setScrollParent() {
        let scrollElement = this.props.scrollElement || this._container
        const overflowKey = 'overflowY'

        while (scrollElement) {
            if (scrollElement !== document) {
                const overflow = window.getComputedStyle(scrollElement)[overflowKey]
                if (['auto', 'scroll', 'overlay'].includes(overflow)) {
                    break
                }
            }
            scrollElement = scrollElement.parentNode
        }

        this.setState({
            scrollElement: scrollElement || window,
        })
    }

    render() {
        const {
            displayData,
            loading,
            totalResults,
            ...remain
        } = this.props

        const rowCount = (totalResults || displayData.length) + (loading ? 1 : 0) || 1

        return (
            <div ref={this.setListContainerReference}>
                <WindowScroller
                    scrollElement={this.state.scrollElement}
                >
                    {({
                        height,
                        isScrolling,
                        registerChild: registerWindowScrollerChild,
                        scrollTop,
                    }) => (
                        <InfiniteLoader
                            isRowLoaded={this.isRowLoaded}
                            loadMoreRows={this.handleLoadMoreRows}
                            rowCount={rowCount}
                            threshold={5}
                        >
                            {({
                                onRowsRendered,
                                registerChild: registerInfiniteChild,
                            }) => (
                                <AutoSizer disableHeight>
                                    {({width}) => (
                                        <List
                                            ref={() => {
                                                registerInfiniteChild.apply(null, arguments)
                                                registerWindowScrollerChild.apply(null, arguments)
                                            }}
                                            cellRangeRenderer={this.cellRangeRenderer}
                                            className={classnames(styles.listWrapper)}
                                            deferredMeasurementCache={this._cache}
                                            autoHeight={true}
                                            height={height}
                                            scrollTop={scrollTop}
                                            isScrolling={isScrolling}
                                            width={width}
                                            noRowsRenderer={this.noResultsRowRenderer}
                                            onRowsRendered={this.handleRowsRendered(onRowsRendered)}
                                            rowCount={rowCount}
                                            rowHeight={this._cache.rowHeight}
                                            rowRenderer={rowProps =>
                                                this.listRowRenderer({
                                                    ...rowProps,
                                                    isScrolling,
                                                    width,
                                                })
                                            }
                                            {...remain}
                                        />
                                    )}
                                </AutoSizer>
                            )}
                        </InfiniteLoader>
                    )}
                </WindowScroller>
            </div>
        )
    }
}

VirtualizedList.propTypes = {
    align: PropTypes.oneOf([
        'center',
        'left',
        'right',
    ]),
    colProps: PropTypes.object,
    displayData: PropTypes.arrayOf(PropTypes.object).isRequired,
    emptyTemplate: PropTypes.oneOfType([
        PropTypes.element,
        PropTypes.func,
    ]),
    idKey: PropTypes.string,
    isRowLoaded: PropTypes.func,
    item: PropTypes.func.isRequired,
    loading: PropTypes.bool,
    messages: PropTypes.shape({
        noResults: PropTypes.string,
        matchSearch: PropTypes.string,
        tryAgain: PropTypes.string,
    }),
    onInfiniteLoad: PropTypes.func,
    scrollElement: PropTypes.element,
    totalResults: PropTypes.number,
    transition: PropTypes.string,
}

VirtualizedList.defaultProps = {
    align: FAList.defaultProps.align,
    colProps: FAList.defaultProps.colProps,
    idKey: FAList.defaultProps.idKey,
    messages: FAList.defaultProps.messages,
    transition: FAList.defaultProps.transition,
}
