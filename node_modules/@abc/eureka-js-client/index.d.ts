import Eureka from 'eureka-js-client'
import Logger from 'bunyan'
import { Response, OptionsWithUrl } from 'request'

interface EurekaClientOptions {
  /**
   * Application identifier
   */
  app?: string;
  /**
   * Port number where application running
   */
  port?: number;
  /**
   * Hostname, where application hosted
   */
  hostname?: string;
  /**
   * Ip address, where application hosted
   */
  ipAddr?: string;
  /**
   * Service URL's for search and detect services
   */
  eurekaServiceUrls?: string[];
  /**
   * Logger instance
   */
  logger?: Logger;

  /**
   * Custom eureka options
   */
  eureka?: {
    serviceUrls?: {
      default?: string[]
    }
  }
}

declare class EurekaClient extends Eureka.Eureka {
  /**
   * Constructor of Eureka client wrapper
   * @param {EurekaClientOptions} options
   */
  constructor (options: EurekaClientOptions);

  /**
   * Make a call to service registered in Eureka
   * @param {string} serviceName eureka registered service name
   * @param {request.OptionsWithUrl} requestOptions custom request options
   * @param {string} errMsg Error message in case of request failure
   * @returns {Promise<request.Response>}
   */
  public callEurekaService (serviceName: string, requestOptions: OptionsWithUrl, errMsg: string): Promise<Response>

  /**
   * Build url path string from provided
   * @deprecated Since version 2.1.0. Will be deleted in the future. Use buildQueryString instead.
   * @param {object} object
   * @returns {string}
   */
  public buildUrlPathFromObject (object: object): string;

  /**
   * Build query string from options of provided object
   * @param {object} object
   * @returns {string}
   */
  public buildQueryString (object: object): string;
}

export {
  EurekaClientOptions,
  EurekaClient,
  Response,
  OptionsWithUrl,
  Eureka,
  Logger
}

export default EurekaClient
