import MaskedInput from  './'

jest.useFakeTimers()

describe('MaskedInput', () => {
    describe('Test basic render', () => {
        let input
        let maskedInput

        const selection = {
            start: 1,
            end: 3,
        }

        beforeEach(() => {
            input = document.createElement('input')
            maskedInput = new MaskedInput({
                pattern: 'AAA-111',
            })
        })

        it('should have default value', () => {
            expect(maskedInput.value).toEqual('')
        })

        it('should have a placeholder', () => {
            expect(maskedInput.placeholder).toEqual('___-___')
        })

        it('should set the value of the input to the passed value if it adheres to the mask', () => {
            maskedInput.value = 'ABC123'
            expect(maskedInput.value).toEqual('ABC123')
        })

        it('should set the value of the input to the raw passed value if it adheres to the mask and contains extra characters', () => {
            maskedInput.value = 'ABC-123'
            expect(maskedInput.value).toEqual('ABC123')
        })

        it('should set the value of the input to an empty string if the value is set to the mask', () => {
            maskedInput.value = maskedInput.placeholder
            expect(maskedInput.value).toEqual('')
        })

        it('should set the value of the input to a portion of the passed value if it adheres to the mask', () => {
            maskedInput.value = 'ABCDEF'
            expect(maskedInput.value).toEqual('ABC')
        })

        it('should set the display value of the input to a masked value of the passed value if it adheres to the mask', () => {
            maskedInput.value = 'ABCDEF'
            expect(maskedInput.displayValue).toEqual('ABC-___')
        })

        it('should not set the value of the input for any portion of the string after the mask fails', () => {
            maskedInput.value = 'AB0123'
            expect(maskedInput.value).toEqual('AB')
        })

        it('should set the display value of the input for any portion of the string after the mask fails', () => {
            maskedInput.value = 'AB0123'
            expect(maskedInput.displayValue).toEqual('AB_-___')
        })

        it('should update the mask selection', (done) => {
            input.value = 'ABC123'
            input.setSelectionRange(selection.start, selection.end)
            maskedInput.updateMaskSelection(input)
                .then((maskSelection) => {
                    expect(maskSelection).toEqual(selection)
                    done()
                })
            jest.runAllTimers()
        })

        it('should update the input selection', (done) => {
            input.value = 'ABC123'
            input.setSelectionRange(selection.start, selection.end)
            maskedInput.updateInputSelection(input)
                .then((maskSelection) => {
                    expect(maskSelection).toEqual({
                        start: 0,
                        end: 0,
                    })
                    done()
                })
            jest.runAllTimers()
        })
    })

    describe('Test event handlers', () => {
        let input
        let maskedInput
        let event

        const selection = {
            start: 1,
            end: 5,
        }

        let clipboardContent
        const getData = jest.fn(type => type === 'text/plain' ? 'WX8' : 'YZ9')

        beforeEach(() => {
            clipboardContent = 'fake-old-value'
            input = document.createElement('input')
            event = {
                clipboardData: {
                    getData,
                    setData: (type, value) => clipboardContent = value,
                },
                preventDefault: () => {},
                shiftKkey: false,
                target: input,
            }
            maskedInput = new MaskedInput({
                pattern: 'AAA-111',
            })
        })

        afterEach(() => {
            jest.clearAllTimers()
        })

        describe(':: Cut Event', () => {
            beforeEach(() => {
                event.type = 'paste'
                event.keyCode = 88
                event.key = 'X'
                event.ctrlKey = true
                maskedInput.value = 'ABC123'
                input.value = maskedInput.displayValue
                input.focus()
                input.setSelectionRange(selection.start, selection.end)
            })

            it('should bail when event is not passed', () => {
                maskedInput.handleCut()
                expect(maskedInput.value).toEqual('ABC123')
            })

            it('should cut old value', () => {
                maskedInput.handleCut(event)
                expect(maskedInput.value).toEqual('A')
            })

            it('should set the clipboard to the raw value', () => {
                maskedInput.handleCut(event)
                expect(clipboardContent).toEqual('BC1')
            })

            it('should not replace cut value if there is no non-placeholder data', () => {
                maskedInput.value = ''
                input.value = maskedInput.displayValue
                input.focus()
                input.setSelectionRange(0, 1)
                expect(input.value).toEqual('___-___')
                maskedInput.handleCut(event)
                expect(clipboardContent).toEqual('fake-old-value')
            })

            it('should not replace cut value if cut cannot complete', () => {
                input.focus()
                input.setSelectionRange(0, 0)
                maskedInput.handleCut(event)
                expect(clipboardContent).toEqual('fake-old-value')
            })

            it('should not change if event scope is invalid', () => {
                maskedInput.handleCut = maskedInput.handleCut.bind(this)
                maskedInput.handleCut(event)
                expect(maskedInput.value).toEqual('ABC123')
            })

            it('should not change if clipboardData is unavailable', () => {
                event.clipboardData = undefined
                maskedInput.handleCut(event)
                expect(maskedInput.value).toEqual('ABC123')
            })
        })

        describe(':: Paste Event', () => {
            beforeEach(() => {
                event.type = 'paste'
                event.keyCode = 86
                event.key = 'V'
                event.ctrlKey = true
                maskedInput.value = 'ABC123'
                input.value = maskedInput.displayValue
                input.focus()
                input.setSelectionRange(selection.start, selection.end)
            })

            it('should bail when event is not passed', () => {
                maskedInput.handlePaste()
                expect(maskedInput.value).toEqual('ABC123')
            })

            it('should paste if new value would be valid', () => {
                maskedInput.handlePaste(event)
                expect(maskedInput.value).toEqual('AYZ923')
            })

            it('should use "text/plain" format if vailable', () => {
                event.clipboardData.types = {
                    ['text/plain']: true,
                }
                maskedInput.handlePaste(event)
                expect(maskedInput.value).toEqual('AWX823')
            })

            it('should not paste if new value would be invalid', () => {
                getData.mockReturnValueOnce('A1C')
                input.focus()
                input.setSelectionRange(4,7)
                maskedInput.handlePaste(event)
                expect(maskedInput.value).toEqual('ABC123')
            })

            it('should not change if event scope is invalid', () => {
                maskedInput.handlePaste = maskedInput.handlePaste.bind(this)
                maskedInput.handlePaste(event)
                expect(maskedInput.value).toEqual('ABC123')
            })

            it('should not change if clipboardData is unavailable', () => {
                event.clipboardData = undefined
                maskedInput.handlePaste(event)
                expect(maskedInput.value).toEqual('ABC123')
            })
        })

        describe(':: Keydown Event', () => {
            beforeEach(() => {
                event.ctrlKey = true
                maskedInput.value = 'ABC123'
                input.value = maskedInput.displayValue
                input.focus()
                input.setSelectionRange(selection.start, selection.end)
            })

            it('should bail when event is not passed', () => {
                maskedInput.handleKeyDown()
                expect(maskedInput.value).toEqual('ABC123')
            })

            it('should delete the selected characters and re-evaluate if backspace is pressed', () => {
                event.key = 'Backspace'
                maskedInput.handleKeyDown(event)
                expect(maskedInput.value).toEqual('A')
            })

            it('should undo changes on Ctrl-Z', () => {
                event.key = 'Backspace'
                maskedInput.handleKeyDown(event)
                expect(maskedInput.value).toEqual('A')
                event.keyCode = 90
                event.key = 'Z'
                maskedInput.handleKeyDown(event)
                expect(maskedInput.value).toEqual('ABC123')
            })

            it('should redo changes on Ctrl-Y', () => {
                event.key = 'Backspace'
                maskedInput.handleKeyDown(event)
                expect(maskedInput.value).toEqual('A')
                event.keyCode = 90
                event.key = 'Z'
                maskedInput.handleKeyDown(event)
                expect(maskedInput.value).toEqual('ABC123')
                event.keyCode = 89
                event.key = 'Y'
                maskedInput.handleKeyDown(event)
                expect(maskedInput.value).toEqual('A')
            })

            it('should not change if event scope is invalid', () => {
                event.key = 'Backspace'
                maskedInput.handleKeyDown = maskedInput.handleKeyDown.bind(this)
                maskedInput.handleKeyDown(event)
                expect(maskedInput.value).toEqual('ABC123')
            })
        })

        describe(':: Keypress Event', () => {
            beforeEach(() => {
                maskedInput.value = 'ABC'
                input.value = maskedInput.displayValue
            })

            it('should bail when event is not passed', () => {
                maskedInput.handleKeyPress()
                expect(maskedInput.value).toEqual('ABC')
            })

            it('should update the input if new key value would be valid', () => {
                input.focus()
                input.setSelectionRange(4,4)
                event.key = '1'
                maskedInput.handleKeyPress(event)
                expect(maskedInput.value).toEqual('ABC1')
            })

            it('should update the input if new data value would be valid', () => {
                input.focus()
                input.setSelectionRange(4,4)
                event.data = '1'
                maskedInput.handleKeyPress(event)
                expect(maskedInput.value).toEqual('ABC1')
            })

            it('should not update the input if event has ctrl pressed', () => {
                input.focus()
                input.setSelectionRange(4,4)
                event.key = '1'
                event.ctrlKey = true
                maskedInput.handleKeyPress(event)
                expect(maskedInput.value).toEqual('ABC')
            })

            it('should not update the input if event has alt pressed', () => {
                input.focus()
                input.setSelectionRange(4,4)
                event.key = '1'
                event.altKey = true
                maskedInput.handleKeyPress(event)
                expect(maskedInput.value).toEqual('ABC')
            })

            it('should not update the input if event has meta pressed', () => {
                input.focus()
                input.setSelectionRange(4,4)
                event.key = '1'
                event.metaKey = true
                maskedInput.handleKeyPress(event)
                expect(maskedInput.value).toEqual('ABC')
            })

            it('should not update the input if key pressed is "Enter"', () => {
                input.focus()
                input.setSelectionRange(4,4)
                event.key = 'Enter'
                event.ctrlKey = true
                maskedInput.handleKeyPress(event)
                expect(maskedInput.value).toEqual('ABC')
            })

            it('should overwrite the input if new value would be valid for selection', () => {
                input.focus()
                input.setSelectionRange(2,3)
                event.key = 'Z'
                maskedInput.handleKeyPress(event)
                expect(maskedInput.value).toEqual('ABZ')
            })

            it('should not overwrite the input if new value would be invalid for selection', () => {
                input.focus()
                input.setSelectionRange(2,3)
                event.key = '1'
                maskedInput.handleKeyPress(event)
                expect(maskedInput.value).toEqual('ABC')
            })

            it('should set selection on the mask', () => {
                input.focus()
                input.setSelectionRange(2,3)
                event.key = 'Z'
                maskedInput.handleKeyPress(event)
                jest.runAllTimers()
                expect(maskedInput.selection).toEqual({
                    start: maskedInput.revealedValue.length,
                    end: maskedInput.revealedValue.length,
                })
            })

            it('should set selection on the input', () => {
                input.focus()
                input.setSelectionRange(2,3)
                event.key = 'Z'
                maskedInput.handleKeyPress(event)
                jest.runAllTimers()
                expect(input.selectionStart).toEqual(maskedInput.revealedValue.length)
                expect(input.selectionEnd).toEqual(maskedInput.revealedValue.length)
            })

            it('should not change if event scope is invalid', () => {
                input.focus()
                input.setSelectionRange(4,4)
                event.key = '1'
                maskedInput.handleKeyPress = maskedInput.handleKeyPress.bind(this)
                maskedInput.handleKeyPress(event)
                expect(maskedInput.value).toEqual('ABC')
            })
        })

        describe(':: Input Event', () => {
            beforeEach(() => {
                maskedInput.value = 'ABC'
                input.value = maskedInput.displayValue
            })

            it('should bail when event is not passed', () => {
                maskedInput.handleInput()
                expect(maskedInput.value).toEqual('ABC')
            })

            it('should update the input if new value would be valid', () => {
                input.value = 'ZYX-987'
                maskedInput.handleInput(event)
                expect(maskedInput.value).toEqual('ZYX987')
            })

            it('should update the input if new value would be valid without non-masked characters', () => {
                input.value = 'ZYX987'
                maskedInput.handleInput(event)
                expect(maskedInput.value).toEqual('ZYX987')
            })

            it('should not update the input if new value would be the same as the old value', () => {
                input.value = 'ABC-___'
                maskedInput.handleInput(event)
                expect(maskedInput.value).toEqual('ABC')
            })

            it('should remask the input if new value would be partially valid', () => {
                input.value = 'ZYX-WVU'
                maskedInput.handleInput(event)
                expect(maskedInput.value).toEqual('ZYX')
            })

            it('should set selection to end of input', () => {
                input.value = 'ZYXWVU'
                input.focus()
                input.setSelectionRange(1,2)
                maskedInput.handleInput(event)
                jest.runAllTimers()
                expect(input.selectionEnd).toEqual(maskedInput.revealedValue.length)
            })

            it('should not change if event scope is invalid', () => {
                input.value = 'ZYX-987'
                maskedInput.handleInput = maskedInput.handleInput.bind(this)
                maskedInput.handleInput(event)
                expect(maskedInput.value).toEqual('ABC')
            })
        })
    })

    describe('Test selection', () => {
        let input
        let maskedInput
        let event
        let selection

        const selectAll = () => {
            selection = {
                start: 0,
                end: input.value.length,
            }
            input.focus()
            input.setSelectionRange(selection.start, selection.end)
            maskedInput.updateMaskSelection(input)
        }

        const getData = jest.fn()

        beforeEach(() => {
            input = document.createElement('input')
            event = {
                clipboardData: {
                    getData,
                },
                key: 'Backspace',
                preventDefault: () => {},
                shiftKkey: false,
                target: input,
            }
            maskedInput = new MaskedInput({
                pattern: '+\\1(111)111-1111',
            })
            maskedInput.value = '2134567890'
            input.value = maskedInput.displayValue
            selectAll()
        })

        afterEach(() => {
            jest.clearAllTimers()
        })

        it('should paste if new value would be valid', () => {
            getData.mockReturnValueOnce('+1(987)654-3210')
            event.type = 'paste'
            event.keyCode = 86
            event.key = 'V'
            event.ctrlKey = true
            maskedInput.handlePaste(event)
            expect(maskedInput.value).toEqual('9876543210')
        })

        it('should paste if new value would be valid', () => {
            getData.mockReturnValueOnce('9876543210')
            event.type = 'paste'
            event.keyCode = 86
            event.key = 'V'
            event.ctrlKey = true
            maskedInput.handlePaste(event)
            expect(maskedInput.value).toEqual('9876543210')
        })
    })

    describe('Test backspacing on non-masked characters', () => {
        let input
        let maskedInput
        let event

        const getData = jest.fn()
        getData.mockReturnValue('YZ9')

        beforeEach(() => {
            input = document.createElement('input')
            event = {
                clipboardData: {
                    getData,
                },
                key: 'Backspace',
                preventDefault: () => {},
                shiftKkey: false,
                target: input,
            }
            maskedInput = new MaskedInput({
                pattern: '+\\1(111)111-1111',
            })
        })

        afterEach(() => {
            jest.clearAllTimers()
        })

        it('should delete an input value every time backspace is pressed', () => {
            maskedInput.value = '987654'
            input.value = maskedInput.displayValue
            maskedInput.updateInputSelection(input)

            expect(maskedInput.revealedValue).toEqual('+1(987)654-')
            maskedInput.handleKeyDown(event)
            expect(maskedInput.value).toEqual('98765')
            expect(maskedInput.revealedValue).toEqual('+1(987)65')
            maskedInput.handleKeyDown(event)
            maskedInput.handleKeyDown(event)
            maskedInput.handleKeyDown(event)
            expect(maskedInput.value).toEqual('98')
            expect(maskedInput.revealedValue).toEqual('+1(98')
            maskedInput.handleKeyDown(event)
            maskedInput.handleKeyDown(event)
            expect(maskedInput.value).toEqual('')
            expect(maskedInput.revealedValue).toEqual('+1(')
            maskedInput.handleKeyDown(event)
            expect(maskedInput.value).toEqual('')
            expect(maskedInput.revealedValue).toEqual('+1(')
        })
    })
})