import keyboard from './'

let event
const faultyEvent = {}

beforeEach(() => {
    event = {}
})

describe('isCut', () => {
    beforeEach(() => {
        event.keyCode = 88
    })

    it('should return true when the key combination is Ctrl+X', () => {
        event.ctrlKey = true
        expect(keyboard.isCut(event)).toEqual(true)
    })

    it('should return true when the key combination is Meta+X', () => {
        event.metaKey = true
        expect(keyboard.isCut(event)).toEqual(true)
    })

    it('should return undefined when the anything else', () => {
        expect(keyboard.isCut(faultyEvent)).toEqual(undefined)
    })
})

describe('isPaste', () => {
    beforeEach(() => {
        event.keyCode = 86
    })

    it('should return true when the key combination is Ctrl+V', () => {
        event.ctrlKey = true
        expect(keyboard.isPaste(event)).toEqual(true)
    })

    it('should return true when the key combination is Meta+V', () => {
        event.metaKey = true
        expect(keyboard.isPaste(event)).toEqual(true)
    })

    it('should return undefined when the anything else', () => {
        expect(keyboard.isCut(faultyEvent)).toEqual(undefined)
    })
})

describe('isUndo', () => {
    it('should return true when the key combination is Ctrl+Z', () => {
        event.keyCode = 90
        event.ctrlKey = true
        expect(keyboard.isUndo(event)).toEqual(true)
    })

    it('should return true when the key combination is Meta+Z', () => {
        event.keyCode = 90
        event.metaKey = true
        expect(keyboard.isUndo(event)).toEqual(true)
    })

    it('should return true when the key combination is Shift+Ctrl+Y', () => {
        event.keyCode = 89
        event.ctrlKey = true
        event.shiftKey = true
        expect(keyboard.isUndo(event)).toEqual(true)
    })

    it('should return true when the key combination is Shift+Meta+Y', () => {
        event.keyCode = 89
        event.metaKey = true
        event.shiftKey = true
        expect(keyboard.isUndo(event)).toEqual(true)
    })

    it('should return undefined when the anything else', () => {
        expect(keyboard.isUndo(faultyEvent)).toEqual(undefined)
    })
})

describe('isRedo', () => {
    it('should return true when the key combination is Ctrl+Y', () => {
        event.keyCode = 89
        event.ctrlKey = true
        expect(keyboard.isRedo(event)).toEqual(true)
    })

    it('should return true when the key combination is Meta+Y', () => {
        event.keyCode = 89
        event.metaKey = true
        expect(keyboard.isRedo(event)).toEqual(true)
    })

    it('should return true when the key combination is Shift+Ctrl+Z', () => {
        event.keyCode = 90
        event.ctrlKey = true
        event.shiftKey = true
        expect(keyboard.isRedo(event)).toEqual(true)
    })

    it('should return true when the key combination is Shift+Meta+Z', () => {
        event.keyCode = 90
        event.metaKey = true
        event.shiftKey = true
        expect(keyboard.isRedo(event)).toEqual(true)
    })

    it('should return undefined when the anything else', () => {
        expect(keyboard.isRedo(faultyEvent)).toEqual(undefined)
    })
})
