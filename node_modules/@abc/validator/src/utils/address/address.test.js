import {
    countryNameLookup,
    countryCodeLookup,
    countryHasTerritories,
    territoryLabelForCountry,
} from './'

describe('countryNameLookup', () => {
    it('should normalize the country name', () => {
        expect(countryNameLookup('     UNIted    StaTes  ')).toEqual('United States')
    })
    it('should work for two letter country codes', () => {
        expect(countryNameLookup('US')).toEqual('United States')
    })
    it('should work for three letter country codes', () => {
        expect(countryNameLookup('USA')).toEqual('United States')
    })
    it('should return undefined for an invalid country', () => {
        expect(countryNameLookup('fake-country')).toEqual(undefined)
    })
})

describe('countryCodeLookup', () => {
    it('should return the two letter code by default', () => {
        expect(countryCodeLookup('Canada')).toEqual('CA')
    })
    it('should normalize the country name', () => {
        expect(countryCodeLookup('     CaNADa  ')).toEqual('CA')
    })
    it('should return the two letter code when threeLetter code is passed', () => {
        expect(countryCodeLookup('CAN')).toEqual('CA')
    })
    it('should return the three letter code when the second parameter is set to "threeLetter"', () => {
        expect(countryCodeLookup('Canada', 'threeLetter')).toEqual('CAN')
    })
})

describe('countryHasTerritories', () => {
    it('should return true when the country has territories/provinces/states', () => {
        expect(countryHasTerritories('Canada')).toEqual(true)
        expect(countryHasTerritories('USA')).toEqual(true)
        expect(countryHasTerritories('MX')).toEqual(true)
    })
    it('should return false when the country does not have territories/provinces/states', () => {
        expect(countryHasTerritories('Germany')).toEqual(false)
        expect(countryHasTerritories('ITL')).toEqual(false)
        expect(countryHasTerritories('UK')).toEqual(false)
    })
    it('should return false when the country does not exist', () => {
        expect(countryHasTerritories('fake-country')).toEqual(false)
    })
})

describe('territoryLabelForCountry', () => {
    const territoryLabels = {
        Australia: 'State/Territory',
        Canada: 'Province',
        Malaysia: 'State',
        Mexico: 'State',
        'United States': 'State',
    }

    const countriesWithTerritories = [
        'AU', 'AUS', 'Australia',
        'CA', 'CAN', 'Canada',
        'MY', 'MYS', 'Malaysia',
        'MX', 'MEX', 'Mexico',
        'US', 'USA', 'United States',
    ]

    countriesWithTerritories.map((country) => {
        it(`should return the appropriate territory label for '${country}'`, () => {
            expect(territoryLabelForCountry(country)).toEqual(territoryLabels[countryNameLookup(country)])
        })
    })

    it('should return an empty string when the country does not have territories/provinces/states', () => {
        expect(territoryLabelForCountry('Germany')).toEqual('')
    })

    it('should return an empty string when the country does not exist', () => {
        expect(territoryLabelForCountry('fake-country')).toEqual('')
    })
})
