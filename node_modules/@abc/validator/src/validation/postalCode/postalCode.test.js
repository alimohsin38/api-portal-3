import {validatePostalCode, validateZipCode} from '../../export'

describe('validateZipCode', () => {
    it('should be falsy for an empty value', () => {
        expect(validateZipCode('')).toBeFalsy()
    })
    it('should be falsy for a 3-digit zip code', () => {
        expect(validateZipCode('123')).toBeFalsy()
    })
    it('should be truthy for a 5-digit zip code', () => {
        expect(validateZipCode('12345')).toBeTruthy()
    })
    it('should be falsy for a 6-digit zip code', () => {
        expect(validateZipCode('1234567')).toBeFalsy()
    })
    it('should be truthy for a 9-digit zip code', () => {
        expect(validateZipCode('123456789')).toBeTruthy()
    })
    it('should be falsy for a 10-digit zip code', () => {
        expect(validateZipCode('1234567890')).toBeFalsy()
    })
})

describe('validatePostalCode', () => {
    it('should be falsy for an empty value', () => {
        expect(validatePostalCode('', 'CA')).toBeFalsy()
    })
    it('should be falsy for a 3-digit numeric string in Canada', () => {
        expect(validatePostalCode('123', 'CA')).toBeFalsy()
    })
    it('should be falsy for a 3-digit alpha string in Canada', () => {
        expect(validatePostalCode('ABC', 'CA')).toBeFalsy()
    })
    it('should be falsy for a 3-digit alpha-numeric-alpha string in Canada', () => {
        expect(validatePostalCode('A1B', 'CA')).toBeFalsy()
    })
    it('should be falsy for a 6-digit numeric string in Canada', () => {
        expect(validatePostalCode('1234567', 'CA')).toBeFalsy()
    })
    it('should be falsy for a 6-digit alpha-numeric string in Canada', () => {
        expect(validatePostalCode('1234567', 'CA')).toBeFalsy()
    })
    it('should be truthy for a 6-digit alpha-numeric-alpha numeric-alpha-numeric string in Canada', () => {
        expect(validatePostalCode('A1B2C3', 'CA')).toBeTruthy()
    })
    it('should be falsy for anything over 6-characters in Canada', () => {
        expect(validatePostalCode('A1B2C3D', 'CA')).toBeFalsy()
    })
    it('should be truthy for any country if country is not found and value is valid for any country', () => {
        expect(validatePostalCode('12345', 'fake-country')).toBeTruthy()
        expect(validatePostalCode('A1B2C3', 'fake-country')).toBeTruthy()
    })
    it('should be falsy for any country if country is not found and value is invalid for all countries', () => {
        expect(validatePostalCode('______', 'fake-country')).toBeFalsy()
    })
})
